"use strict";(self.webpackChunkvirtalis_docs=self.webpackChunkvirtalis_docs||[]).push([[554],{22106:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>d,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"visionary-render-programming/reference/c-api/classes/metanodes/meta-z-space-viewport","title":"Meta_ZSpaceViewport","description":"Module: Metanodes / Definitions","source":"@site/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-z-space-viewport.mdx","sourceDirName":"visionary-render-programming/reference/c-api/classes/metanodes","slug":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-z-space-viewport","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-z-space-viewport","draft":false,"unlisted":false,"editUrl":"https://github.com/virtalis/docs/tree/master/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-z-space-viewport.mdx","tags":[],"version":"current","lastUpdatedAt":1730817102000,"frontMatter":{"title":"Meta_ZSpaceViewport","summary":"A ZSpaceViewport is a derivative of Viewport that specifically handles interaction with a zSpace device."},"sidebar":"visionaryRenderProgrammingSidebar","previous":{"title":"Meta_Window","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-window"},"next":{"title":"Trait_AbstractTrait","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/trait-abstracttrait"}}');var n=t(74848),s=t(28453);const d={title:"Meta_ZSpaceViewport",summary:"A ZSpaceViewport is a derivative of Viewport that specifically handles interaction with a zSpace device."},c="Meta_ZSpaceViewport",a={},o=[{value:"Public Types",id:"public-types",level:2},{value:"Public Types Documentation",id:"public-types-documentation",level:2},{value:"enum IDX",id:"enum-idx",level:3}];function l(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.header,{children:(0,n.jsx)(r.h1,{id:"meta_zspaceviewport",children:"Meta_ZSpaceViewport"})}),"\n",(0,n.jsxs)(r.p,{children:[(0,n.jsx)(r.strong,{children:"Module:"})," ",(0,n.jsx)(r.strong,{children:(0,n.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/",children:"Metanodes"})})," ",(0,n.jsx)(r.strong,{children:"/"})," ",(0,n.jsx)(r.strong,{children:(0,n.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/definitions",children:"Definitions"})})]}),"\n",(0,n.jsx)(r.p,{children:"A ZSpaceViewport is a derivative of Viewport that specifically handles interaction with a zSpace device."}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)(r.code,{children:"#include <meta_view.hpp>"})}),"\n",(0,n.jsx)(r.h2,{id:"public-types",children:"Public Types"}),"\n",(0,n.jsxs)(r.table,{children:[(0,n.jsx)(r.thead,{children:(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.th,{children:"Type"}),(0,n.jsx)(r.th,{children:"Name"})]})}),(0,n.jsx)(r.tbody,{children:(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"enum"}),(0,n.jsxs)(r.td,{children:[(0,n.jsx)(r.strong,{children:(0,n.jsx)(r.a,{href:"#enum-idx",children:"IDX"})})," { Idx_Enabled, Idx_Rectangle, Idx_Camera, Idx_ProjectionMode, Idx_Screen_Mono, Idx_Screen_Left, Idx_Screen_Right, Idx_FOV, Idx_ScreenWidth, Idx_ScreenOffset, Idx_HMD, Idx_EyeOverride }",(0,n.jsx)("br",{}),"Property index."]})]})})]}),"\n",(0,n.jsx)(r.h2,{id:"public-types-documentation",children:"Public Types Documentation"}),"\n",(0,n.jsx)(r.h3,{id:"enum-idx",children:"enum IDX"}),"\n",(0,n.jsxs)(r.table,{children:[(0,n.jsx)(r.thead,{children:(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.th,{children:"Enumerator"}),(0,n.jsx)(r.th,{children:"Value"}),(0,n.jsx)(r.th,{children:"Description"})]})}),(0,n.jsxs)(r.tbody,{children:[(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"Idx_Enabled"}),(0,n.jsx)(r.td,{}),(0,n.jsx)(r.td,{children:"bool - When enabled, viewport is drawn to the screen"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"Idx_Rectangle"}),(0,n.jsx)(r.td,{}),(0,n.jsxs)(r.td,{children:["vec4f - The viewport bounds, scaled on the screen by the ViewportLayout size. (e.g. layout size ",(0,n.jsx)(r.code,{children:"2.0, 1.0"}),", and child viewport width ",(0,n.jsx)(r.code,{children:"1.0"})," will fill half the screen with the viewport)"]})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"Idx_Camera"}),(0,n.jsx)(r.td,{}),(0,n.jsx)(r.td,{children:"link - The camera from which the scene is rendered"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"Idx_ProjectionMode"}),(0,n.jsx)(r.td,{}),(0,n.jsx)(r.td,{children:"ProjectionMode (int) - The projection mode"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"Idx_Screen_Mono"}),(0,n.jsx)(r.td,{}),(0,n.jsx)(r.td,{children:"link - (for PhysicalScreen mode) Link to the physical screen for rendering mono"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"Idx_Screen_Left"}),(0,n.jsx)(r.td,{}),(0,n.jsx)(r.td,{children:"link - (for PhysicalScreen mode) Link to the physical screen for rendering the left eye"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"Idx_Screen_Right"}),(0,n.jsx)(r.td,{}),(0,n.jsx)(r.td,{children:"link - (for PhysicalScreen mode) Link to the physical screen for rendering the right eye"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"Idx_FOV"}),(0,n.jsx)(r.td,{}),(0,n.jsx)(r.td,{children:"float - (for other modes) The field of view"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"Idx_ScreenWidth"}),(0,n.jsx)(r.td,{}),(0,n.jsx)(r.td,{children:"float - (for other modes) The physical width of the screen being displayed on (for stereo separation calculations)"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"Idx_ScreenOffset"}),(0,n.jsx)(r.td,{}),(0,n.jsx)(r.td,{children:"vec2f - (for other modes) The screen offset"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"Idx_HMD"}),(0,n.jsx)(r.td,{}),(0,n.jsx)(r.td,{children:"bool - (for other modes) Whether the viewport is being used in a HMD, which makes the viewport calculation affect the camera transform directly, rather than skewing the projection for wall-based setups"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"Idx_EyeOverride"}),(0,n.jsx)(r.td,{}),(0,n.jsx)(r.td,{children:"EyeOverride (int) - Overrides the eye drawn by this viewport"})]})]})]}),"\n",(0,n.jsx)(r.p,{children:"Property index."})]})}function h(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},28453:(e,r,t)=>{t.d(r,{R:()=>d,x:()=>c});var i=t(96540);const n={},s=i.createContext(n);function d(e){const r=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:d(e.components),i.createElement(s.Provider,{value:r},e.children)}}}]);
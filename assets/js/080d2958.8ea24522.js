"use strict";(self.webpackChunkvirtalis_docs=self.webpackChunkvirtalis_docs||[]).push([[751],{21060:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>l,frontMatter:()=>d,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"visionary-render-programming/architecture/nodes","title":"Nodes","description":"Every node is an instance of a metanode, giving it a descriptor for its property values and data structure.","source":"@site/docs/visionary-render-programming/architecture/nodes.mdx","sourceDirName":"visionary-render-programming/architecture","slug":"/visionary-render-programming/architecture/nodes","permalink":"/visionary-render-programming/architecture/nodes","draft":false,"unlisted":false,"editUrl":"https://github.com/virtalis/docs/tree/master/docs/visionary-render-programming/architecture/nodes.mdx","tags":[],"version":"current","lastUpdatedAt":1741279868000,"frontMatter":{},"sidebar":"visionaryRenderProgrammingSidebar","previous":{"title":"Metanodes","permalink":"/visionary-render-programming/architecture/metanodes"},"next":{"title":"Observers","permalink":"/visionary-render-programming/architecture/observers"}}');var s=t(74848),i=t(28453);const d={},o="Nodes",a={},c=[{value:"Paths",id:"paths",level:2}];function h(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"nodes",children:"Nodes"})}),"\n",(0,s.jsxs)(n.p,{children:["Every node is an instance of a ",(0,s.jsx)(n.a,{href:"/visionary-render-programming/architecture/metanodes",children:"metanode"}),", giving it a descriptor for its ",(0,s.jsx)(n.a,{href:"/visionary-render-programming/architecture/properties",children:"property"})," values and data structure."]}),"\n",(0,s.jsx)(n.p,{children:"Nodes represent the main data structure in the VRTree. Instances of nodes are arranged into a tree structure, with each instance referencing the following other nodes (if present)"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Relative"}),(0,s.jsx)(n.th,{children:"API Function"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Parent"}),(0,s.jsx)(n.td,{children:"VRGetParent"}),(0,s.jsx)(n.td,{children:"The parent node. Every node in the tree is expected to be a child of something else, except the root node (VRGetRootNode)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Child"}),(0,s.jsx)(n.td,{children:"VRGetChild"}),(0,s.jsx)(n.td,{children:"The first child node"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Sibling"}),(0,s.jsx)(n.td,{children:"VRGetNext"}),(0,s.jsx)(n.td,{children:"The next sibling node (sharing the same parent)"})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"paths",children:"Paths"}),"\n",(0,s.jsxs)(n.p,{children:["All nodes have a name. They cannot have an empty string for a name. (The GUI prevents this, but it is not enforced by the API. Technically you ",(0,s.jsx)(n.em,{children:"can"})," create nameless nodes, you just won't be able to find them again, or save files with link properties pointing at them)."]}),"\n",(0,s.jsx)(n.p,{children:"The tree structure allows every node to have a path composed of the names of all ascending nodes up to the root node."}),"\n",(0,s.jsxs)(n.p,{children:["Starting at the root node, a node's absolute path starts with a ",(0,s.jsx)(n.code,{children:"/"})," (signifying the root), followed by node names separated with a ",(0,s.jsx)(n.code,{children:"/"})," (e.g. ",(0,s.jsx)(n.code,{children:"/Scenes/MyAssembly"})," is the path to the ",(0,s.jsx)(n.code,{children:"MyAssembly"})," node under the ",(0,s.jsx)(n.code,{children:"Scenes"})," node)."]}),"\n",(0,s.jsxs)(n.p,{children:["If there are multiple children of a node with the same name, an array index suffix is added to their name in the path (e.g. ",(0,s.jsx)(n.code,{children:"/Scenes/MyAssembly[1]"})," finds the second node called ",(0,s.jsx)(n.code,{children:"MyAssembly"})," under the ",(0,s.jsx)(n.code,{children:"Scenes"})," node)."]}),"\n",(0,s.jsxs)(n.p,{children:["Paths can also be relative to the node being searched from (VRFind) - e.g. ",(0,s.jsx)(n.code,{children:'VRFind(VRGetScenesNode(), "MyAssembly")'})," finds the first ",(0,s.jsx)(n.code,{children:"MyAssembly"})," node under the ",(0,s.jsx)(n.code,{children:"Scenes"})," node."]}),"\n",(0,s.jsx)(n.p,{children:"Link properties are serialized to paths when saved to a file, and they use this mechanism to resolve to the target node when the file is loaded again."})]})}function l(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>o});var r=t(96540);const s={},i=r.createContext(s);function d(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);
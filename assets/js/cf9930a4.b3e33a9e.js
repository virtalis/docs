"use strict";(self.webpackChunkvirtalis_docs=self.webpackChunkvirtalis_docs||[]).push([[8732],{15100:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>c,frontMatter:()=>s,metadata:()=>r,toc:()=>h});const r=JSON.parse('{"id":"visionary-render-programming/reference/c-api/modules/metanodes/semantics-and-hints","title":"Semantics and Hints","description":"Module: Metanodes","source":"@site/docs/visionary-render-programming/reference/c-api/modules/metanodes/semantics-and-hints.mdx","sourceDirName":"visionary-render-programming/reference/c-api/modules/metanodes","slug":"/visionary-render-programming/reference/c-api/modules/metanodes/semantics-and-hints","permalink":"/visionary-render-programming/reference/c-api/modules/metanodes/semantics-and-hints","draft":false,"unlisted":false,"editUrl":"https://github.com/virtalis/docs/tree/master/docs/visionary-render-programming/reference/c-api/modules/metanodes/semantics-and-hints.mdx","tags":[],"version":"current","frontMatter":{"title":"Semantics and Hints","summary":"Functions for adding semantics and hints."},"sidebar":"visionaryRenderProgrammingSidebar","previous":{"title":"Properties","permalink":"/visionary-render-programming/reference/c-api/modules/metanodes/properties"},"next":{"title":"Nodes","permalink":"/visionary-render-programming/reference/c-api/modules/nodes/"}}');var i=t(74848),d=t(28453);const s={title:"Semantics and Hints",summary:"Functions for adding semantics and hints."},a="Semantics and Hints",o={},h=[{value:"Functions",id:"functions",level:2},{value:"Functions Documentation",id:"functions-documentation",level:2},{value:"VRAddGuiHintBool",id:"vraddguihintbool",level:3},{value:"VRAddGuiHintDouble",id:"vraddguihintdouble",level:3},{value:"VRAddGuiHintInt",id:"vraddguihintint",level:3},{value:"VRAddGuiHintString",id:"vraddguihintstring",level:3},{value:"VRAddSymbol",id:"vraddsymbol",level:3},{value:"VRAddTrait",id:"vraddtrait",level:3},{value:"VRAddTraitEx",id:"vraddtraitex",level:3}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,d.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"semantics-and-hints",children:"Semantics and Hints"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Module:"})," ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/",children:"Metanodes"})})]}),"\n",(0,i.jsx)(n.p,{children:"Functions for adding semantics and hints."}),"\n",(0,i.jsx)(n.h2,{id:"functions",children:"Functions"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Name"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"int"}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"#vraddguihintbool",children:"VRAddGuiHintBool"})}),"(",(0,i.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName, const char * hintName, char value)",(0,i.jsx)("br",{}),"Adds a bool gui hint to the metanode. Used to provide hints about how to display the property in a gui."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"int"}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"#vraddguihintdouble",children:"VRAddGuiHintDouble"})}),"(",(0,i.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName, const char * hintName, double value)",(0,i.jsx)("br",{}),"Adds a double gui hint to the metanode. Used to provide hints about how to display the property in a gui."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"int"}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"#vraddguihintint",children:"VRAddGuiHintInt"})}),"(",(0,i.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName, const char * hintName, int value)",(0,i.jsx)("br",{}),"Adds an int gui hint to the metanode. Used to provide hints about how to display the property in a gui."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"int"}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"#vraddguihintstring",children:"VRAddGuiHintString"})}),"(",(0,i.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName, const char * hintName, const char * value)",(0,i.jsx)("br",{}),"Adds a string gui hint to the metanode. Used to provide hints about how to display the property in a gui."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"int"}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"#vraddsymbol",children:"VRAddSymbol"})}),"(",(0,i.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * symName, int symValue)",(0,i.jsx)("br",{}),"Adds a symbol to the metanode. Used to provide string representations of enum values for use with scripts and VRSetPropertyEnum etc."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"int"}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"#vraddtrait",children:"VRAddTrait"})}),"(",(0,i.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * traitName)",(0,i.jsx)("br",{}),"Adds a trait to a metanode (a description of its purpose)."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"int"}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"#vraddtraitex",children:"VRAddTraitEx"})}),"(",(0,i.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * traitName, int primaryIdx)",(0,i.jsx)("br",{}),"Adds a trait to a metanode (a description of its purpose)."]})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"functions-documentation",children:"Functions Documentation"}),"\n",(0,i.jsx)(n.h3,{id:"vraddguihintbool",children:"VRAddGuiHintBool"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"int VRAddGuiHintBool(\r\n    HMeta metaNode,\r\n    const char * propertyName,\r\n    const char * hintName,\r\n    char value\r\n)\n"})}),"\n",(0,i.jsx)(n.p,{children:"Adds a bool gui hint to the metanode. Used to provide hints about how to display the property in a gui."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"metaNode"})," handle to the metanode to add the hint to"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"propertyName"})," name of the property to add the hint to"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"hintName"})," the name of the hint to add"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"value"})," the value"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"vraddguihintdouble",children:"VRAddGuiHintDouble"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"int VRAddGuiHintDouble(\r\n    HMeta metaNode,\r\n    const char * propertyName,\r\n    const char * hintName,\r\n    double value\r\n)\n"})}),"\n",(0,i.jsx)(n.p,{children:"Adds a double gui hint to the metanode. Used to provide hints about how to display the property in a gui."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"metaNode"})," handle to the metanode to add the hint to"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"propertyName"})," name of the property to add the hint to"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"hintName"})," the name of the hint to add"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"value"})," the value"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"vraddguihintint",children:"VRAddGuiHintInt"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"int VRAddGuiHintInt(\r\n    HMeta metaNode,\r\n    const char * propertyName,\r\n    const char * hintName,\r\n    int value\r\n)\n"})}),"\n",(0,i.jsx)(n.p,{children:"Adds an int gui hint to the metanode. Used to provide hints about how to display the property in a gui."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"metaNode"})," handle to the metanode to add the hint to"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"propertyName"})," name of the property to add the hint to"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"hintName"})," the name of the hint to add"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"value"})," the value"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"vraddguihintstring",children:"VRAddGuiHintString"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"int VRAddGuiHintString(\r\n    HMeta metaNode,\r\n    const char * propertyName,\r\n    const char * hintName,\r\n    const char * value\r\n)\n"})}),"\n",(0,i.jsx)(n.p,{children:"Adds a string gui hint to the metanode. Used to provide hints about how to display the property in a gui."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"metaNode"})," handle to the metanode to add the hint to"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"propertyName"})," name of the property to add the hint to"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"hintName"})," the name of the hint to add"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"value"})," the value"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"vraddsymbol",children:"VRAddSymbol"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"int VRAddSymbol(\r\n    HMeta metaNode,\r\n    const char * symName,\r\n    int symValue\r\n)\n"})}),"\n",(0,i.jsx)(n.p,{children:"Adds a symbol to the metanode. Used to provide string representations of enum values for use with scripts and VRSetPropertyEnum etc."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"metaNode"})," handle to the metanode to add the symbol to"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"symName"})," name of the symbol to add"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"symValue"})," value of the symbol"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Return"}),": 0 on success"]}),"\n",(0,i.jsx)(n.h3,{id:"vraddtrait",children:"VRAddTrait"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"int VRAddTrait(\r\n    HMeta metaNode,\r\n    const char * traitName\r\n)\n"})}),"\n",(0,i.jsx)(n.p,{children:"Adds a trait to a metanode (a description of its purpose)."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"traitName"})," name of the trait to add"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Return"}),": 0 if trait was added successfully"]}),"\n",(0,i.jsx)(n.h3,{id:"vraddtraitex",children:"VRAddTraitEx"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"int VRAddTraitEx(\r\n    HMeta metaNode,\r\n    const char * traitName,\r\n    int primaryIdx\r\n)\n"})}),"\n",(0,i.jsx)(n.p,{children:"Adds a trait to a metanode (a description of its purpose)."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"traitName"})," name of the trait to add"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"primaryIdx"})," index of the primary property that can be associated with the trait"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Return"}),": 0 if trait was added successfully"]})]})}function c(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var r=t(96540);const i={},d=r.createContext(i);function s(e){const n=r.useContext(d);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(d.Provider,{value:n},e.children)}}}]);
"use strict";(self.webpackChunkvirtalis_docs=self.webpackChunkvirtalis_docs||[]).push([[7791],{67616:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>a});const o=JSON.parse('{"id":"visionary-render-programming/reference/c-api/classes/metanodes/meta-convex-decomposition","title":"Meta_ConvexDecomposition","description":"Module: Metanodes / Definitions","source":"@site/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-convex-decomposition.mdx","sourceDirName":"visionary-render-programming/reference/c-api/classes/metanodes","slug":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-convex-decomposition","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-convex-decomposition","draft":false,"unlisted":false,"editUrl":"https://github.com/virtalis/docs/tree/master/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-convex-decomposition.mdx","tags":[],"version":"current","lastUpdatedAt":1730820727000,"frontMatter":{"title":"Meta_ConvexDecomposition","summary":"A ConvexDecomposition is used to store pre-computed convex decomposition data as part of the scene."},"sidebar":"visionaryRenderProgrammingSidebar","previous":{"title":"Meta_Container","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-container"},"next":{"title":"Meta_Deformable","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-deformable"}}');var s=i(74848),t=i(28453);const r={title:"Meta_ConvexDecomposition",summary:"A ConvexDecomposition is used to store pre-computed convex decomposition data as part of the scene."},c="Meta_ConvexDecomposition",d={},a=[{value:"Public Types",id:"public-types",level:2},{value:"Public Functions",id:"public-functions",level:2},{value:"Detailed Description",id:"detailed-description",level:2},{value:"Public Types Documentation",id:"public-types-documentation",level:2},{value:"enum IDX",id:"enum-idx",level:3},{value:"Public Functions Documentation",id:"public-functions-documentation",level:2},{value:"Meta_ConvexDecomposition",id:"meta_convexdecomposition-1",level:3}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"meta_convexdecomposition",children:"Meta_ConvexDecomposition"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Module:"})," ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/",children:"Metanodes"})})," ",(0,s.jsx)(n.strong,{children:"/"})," ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/definitions",children:"Definitions"})})]}),"\n",(0,s.jsxs)(n.p,{children:["A ConvexDecomposition is used to store pre-computed convex decomposition data as part of the scene.  ",(0,s.jsx)(n.a,{href:"#detailed-description",children:"More..."})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"#include <meta_division.hpp>"})}),"\n",(0,s.jsx)(n.h2,{id:"public-types",children:"Public Types"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Name"})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"enum"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#enum-idx",children:"IDX"})})," { Idx_Data }"]})]})})]}),"\n",(0,s.jsx)(n.h2,{id:"public-functions",children:"Public Functions"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Name"})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#meta_convexdecomposition-1",children:"Meta_ConvexDecomposition"})}),"()"]})]})})]}),"\n",(0,s.jsx)(n.h2,{id:"detailed-description",children:"Detailed Description"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"struct Meta_ConvexDecomposition;\n"})}),"\n",(0,s.jsx)(n.p,{children:"A ConvexDecomposition is used to store pre-computed convex decomposition data as part of the scene."}),"\n",(0,s.jsxs)(n.p,{children:["When a ",(0,s.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-collision",children:"Meta_Collision"})," is set to Geometry mode, the specified model is used to generate a convex decomposition, to be used by the collision system. This can be a slow process so this data is cached to avoid unnecessary re-processing every time the scene is loaded."]}),"\n",(0,s.jsx)(n.p,{children:"The contents of this data are not intended to be modified by external APIs."}),"\n",(0,s.jsx)(n.h2,{id:"public-types-documentation",children:"Public Types Documentation"}),"\n",(0,s.jsx)(n.h3,{id:"enum-idx",children:"enum IDX"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Enumerator"}),(0,s.jsx)(n.th,{children:"Value"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_Data"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{})]})})]}),"\n",(0,s.jsx)(n.h2,{id:"public-functions-documentation",children:"Public Functions Documentation"}),"\n",(0,s.jsx)(n.h3,{id:"meta_convexdecomposition-1",children:"Meta_ConvexDecomposition"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"inline Meta_ConvexDecomposition()\n"})})]})}function m(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>c});var o=i(96540);const s={},t=o.createContext(s);function r(e){const n=o.useContext(t);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),o.createElement(t.Provider,{value:n},e.children)}}}]);
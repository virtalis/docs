"use strict";(self.webpackChunkvirtalis_docs=self.webpackChunkvirtalis_docs||[]).push([[61673],{33797:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>o,contentTitle:()=>d,default:()=>h,frontMatter:()=>a,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"visionary-render-programming/reference/c-api/classes/metanodes/meta-tracker-prs-link","title":"Meta_TrackerPRSLink","description":"Module: Metanodes / Definitions","source":"@site/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-tracker-prs-link.mdx","sourceDirName":"visionary-render-programming/reference/c-api/classes/metanodes","slug":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-tracker-prs-link","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-tracker-prs-link","draft":false,"unlisted":false,"editUrl":"https://github.com/virtalis/docs/tree/master/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-tracker-prs-link.mdx","tags":[],"version":"current","lastUpdatedAt":1730817102000,"frontMatter":{"title":"Meta_TrackerPRSLink","summary":"A TrackerPRSLink connects to Meta_TrackerInput nodes and translates their input data into a transformation matrix."},"sidebar":"visionaryRenderProgrammingSidebar","previous":{"title":"Meta_TrackerOutput","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-tracker-output"},"next":{"title":"Meta_TransformLimits","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-transform-limits"}}');var i=t(74848),s=t(28453);const a={title:"Meta_TrackerPRSLink",summary:"A TrackerPRSLink connects to Meta_TrackerInput nodes and translates their input data into a transformation matrix."},d="Meta_TrackerPRSLink",o={},c=[{value:"Public Types",id:"public-types",level:2},{value:"Detailed Description",id:"detailed-description",level:2},{value:"Public Types Documentation",id:"public-types-documentation",level:2},{value:"enum IDX",id:"enum-idx",level:3}];function l(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"meta_trackerprslink",children:"Meta_TrackerPRSLink"})}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Module:"})," ",(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/",children:"Metanodes"})})," ",(0,i.jsx)(r.strong,{children:"/"})," ",(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/definitions",children:"Definitions"})})]}),"\n",(0,i.jsxs)(r.p,{children:["A TrackerPRSLink connects to ",(0,i.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-tracker-input",children:"Meta_TrackerInput"})," nodes and translates their input data into a transformation matrix.  ",(0,i.jsx)(r.a,{href:"#detailed-description",children:"More..."})]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.code,{children:"#include <meta_tracking.hpp>"})}),"\n",(0,i.jsx)(r.h2,{id:"public-types",children:"Public Types"}),"\n",(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.th,{children:"Type"}),(0,i.jsx)(r.th,{children:"Name"})]})}),(0,i.jsx)(r.tbody,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"enum"}),(0,i.jsxs)(r.td,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"#enum-idx",children:"IDX"})})," { Idx_Enabled, Idx_PositionSource, Idx_RotationSource, Idx_ScaleSource, Idx_Transform, Idx_Prediction, Idx_DefaultPosition, Idx_DefaultRotation, Idx_DefaultScale, Idx_IsTracking }",(0,i.jsx)("br",{}),"Property index."]})]})})]}),"\n",(0,i.jsx)(r.h2,{id:"detailed-description",children:"Detailed Description"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-cpp",children:"struct Meta_TrackerPRSLink;\n"})}),"\n",(0,i.jsxs)(r.p,{children:["A TrackerPRSLink connects to ",(0,i.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-tracker-input",children:"Meta_TrackerInput"})," nodes and translates their input data into a transformation matrix."]}),"\n",(0,i.jsx)(r.p,{children:"This is used, mostly, for reading head and hand tracker position and rotations and composing them into a matrix that can be applied to assemblies. Any sources that are not provided are populated using their default values."}),"\n",(0,i.jsx)(r.h2,{id:"public-types-documentation",children:"Public Types Documentation"}),"\n",(0,i.jsx)(r.h3,{id:"enum-idx",children:"enum IDX"}),"\n",(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.th,{children:"Enumerator"}),(0,i.jsx)(r.th,{children:"Value"}),(0,i.jsx)(r.th,{children:"Description"})]})}),(0,i.jsxs)(r.tbody,{children:[(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"Idx_Enabled"}),(0,i.jsx)(r.td,{}),(0,i.jsx)(r.td,{children:"bool - When enabled, the Transform property is updated according to the tracker inputs"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"Idx_PositionSource"}),(0,i.jsx)(r.td,{}),(0,i.jsx)(r.td,{children:"link - A TrackerInput providing position data"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"Idx_RotationSource"}),(0,i.jsx)(r.td,{}),(0,i.jsx)(r.td,{children:"link - A TrackerInput providing rotation data"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"Idx_ScaleSource"}),(0,i.jsx)(r.td,{}),(0,i.jsx)(r.td,{children:"link - A TrackerInput providing scale data"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"Idx_Transform"}),(0,i.jsx)(r.td,{}),(0,i.jsx)(r.td,{children:"mat4w - The transform matrix, composed from the tracker input data this frame"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"Idx_Prediction"}),(0,i.jsx)(r.td,{}),(0,i.jsx)(r.td,{children:"floatw - Very basic motion prediction applied to position. Value is number of frames of prediction to apply."})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"Idx_DefaultPosition"}),(0,i.jsx)(r.td,{}),(0,i.jsx)(r.td,{children:"vec3w - Position value to use when no position source is provided"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"Idx_DefaultRotation"}),(0,i.jsx)(r.td,{}),(0,i.jsx)(r.td,{children:"vec3w - Rotation value to use when no rotation source is provided"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"Idx_DefaultScale"}),(0,i.jsx)(r.td,{}),(0,i.jsx)(r.td,{children:"vec3w - Scale value to use when no scale source is provided"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"Idx_IsTracking"}),(0,i.jsx)(r.td,{}),(0,i.jsx)(r.td,{children:"bool - Gets set to true if it is receiving data from the tracker inputs"})]})]})]}),"\n",(0,i.jsx)(r.p,{children:"Property index."})]})}function h(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},28453:(e,r,t)=>{t.d(r,{R:()=>a,x:()=>d});var n=t(96540);const i={},s=n.createContext(i);function a(e){const r=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function d(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),n.createElement(s.Provider,{value:r},e.children)}}}]);
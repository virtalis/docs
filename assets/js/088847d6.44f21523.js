"use strict";(self.webpackChunkvirtalis_docs=self.webpackChunkvirtalis_docs||[]).push([[8998],{89200:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>d,toc:()=>o});const d=JSON.parse('{"id":"visionary-render-programming/reference/c-api/classes/metanodes/meta-view-filter","title":"Meta_ViewFilter","description":"Module: Metanodes / Definitions","source":"@site/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-view-filter.mdx","sourceDirName":"visionary-render-programming/reference/c-api/classes/metanodes","slug":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-view-filter","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-view-filter","draft":false,"unlisted":false,"editUrl":"https://github.com/virtalis/docs/tree/master/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-view-filter.mdx","tags":[],"version":"current","frontMatter":{"title":"Meta_ViewFilter","summary":"Meta_ViewFilter\'s are associated with Views, and correspond to a full-screen quad being drawn over the View executing a fragment shader function."},"sidebar":"visionaryRenderProgrammingSidebar","previous":{"title":"Meta_VertexPrim","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-vertex-prim"},"next":{"title":"Meta_ViewShader","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-view-shader"}}');var i=r(74848),t=r(28453);const s={title:"Meta_ViewFilter",summary:"Meta_ViewFilter's are associated with Views, and correspond to a full-screen quad being drawn over the View executing a fragment shader function."},l="Meta_ViewFilter",a={},o=[{value:"Public Types",id:"public-types",level:2},{value:"Detailed Description",id:"detailed-description",level:2},{value:"Public Types Documentation",id:"public-types-documentation",level:2},{value:"enum BlendMode",id:"enum-blendmode",level:3},{value:"enum IDX",id:"enum-idx",level:3}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"meta_viewfilter",children:"Meta_ViewFilter"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Module:"})," ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/",children:"Metanodes"})})," ",(0,i.jsx)(n.strong,{children:"/"})," ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/definitions",children:"Definitions"})})]}),"\n",(0,i.jsxs)(n.p,{children:["Meta_ViewFilter's are associated with Views, and correspond to a full-screen quad being drawn over the View executing a fragment shader function.  ",(0,i.jsx)(n.a,{href:"#detailed-description",children:"More..."})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"#include <meta_division.hpp>"})}),"\n",(0,i.jsx)(n.h2,{id:"public-types",children:"Public Types"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Name"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"enum"}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"#enum-blendmode",children:"BlendMode"})})," { BlendMode_None, BlendMode_Alpha, BlendMode_Add, BlendMode_Multiply }",(0,i.jsx)("br",{}),"Values for Idx_BlendMode."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"enum"}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"#enum-idx",children:"IDX"})})," { Idx_Enabled, Idx_Shader, Idx_BlendMode }"]})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"detailed-description",children:"Detailed Description"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"struct Meta_ViewFilter;\n"})}),"\n",(0,i.jsx)(n.p,{children:"Meta_ViewFilter's are associated with Views, and correspond to a full-screen quad being drawn over the View executing a fragment shader function."}),"\n",(0,i.jsx)(n.p,{children:"The shader can sample the current contents of the View's colour and depth buffers (among others) as it goes. Examples of filters: colour grading, depth-of-field, screen-space ambient occlusion, screen-space reflections, screen-space atmospheric scattering, night-vision goggles."}),"\n",(0,i.jsx)(n.p,{children:"Expected Implementation Details:- When the Shader property changes (or when the SourceCode property of the linked Shader changes) any new arguments in the linked shader will be copied over to this ViewFilter as children, allowing the user to override the defaults in the Shader."}),"\n",(0,i.jsx)(n.h2,{id:"public-types-documentation",children:"Public Types Documentation"}),"\n",(0,i.jsx)(n.h3,{id:"enum-blendmode",children:"enum BlendMode"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Enumerator"}),(0,i.jsx)(n.th,{children:"Value"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"BlendMode_None"}),(0,i.jsx)(n.td,{}),(0,i.jsxs)(n.td,{children:["No blend mode (Symbols - C: ",(0,i.jsx)(n.code,{children:'"BlendModeNone"'}),", Lua: ",(0,i.jsx)(n.code,{children:"__ViewFilter_BlendModeNone"}),")"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"BlendMode_Alpha"}),(0,i.jsx)(n.td,{}),(0,i.jsxs)(n.td,{children:["Alpha blending (Symbols - C: ",(0,i.jsx)(n.code,{children:'"BlendModeAlpha"'}),", Lua: ",(0,i.jsx)(n.code,{children:"__ViewFilter_BlendModeAlpha"}),")"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"BlendMode_Add"}),(0,i.jsx)(n.td,{}),(0,i.jsxs)(n.td,{children:["Additive blending (Symbols - C: ",(0,i.jsx)(n.code,{children:'"BlendModeAdd"'}),", Lua: ",(0,i.jsx)(n.code,{children:"__ViewFilter_BlendModeAdd"}),")"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"BlendMode_Multiply"}),(0,i.jsx)(n.td,{}),(0,i.jsxs)(n.td,{children:["Multiplicative blending (Symbols - C: ",(0,i.jsx)(n.code,{children:'"BlendModeMultiply"'}),", Lua: ",(0,i.jsx)(n.code,{children:"__ViewFilter_BlendModeMultiply"}),")"]})]})]})]}),"\n",(0,i.jsx)(n.p,{children:"Values for Idx_BlendMode."}),"\n",(0,i.jsx)(n.h3,{id:"enum-idx",children:"enum IDX"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Enumerator"}),(0,i.jsx)(n.th,{children:"Value"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Idx_Enabled"}),(0,i.jsx)(n.td,{}),(0,i.jsx)(n.td,{children:"bool - whether or not to apply the filter to any views it's attached to"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Idx_Shader"}),(0,i.jsx)(n.td,{}),(0,i.jsx)(n.td,{children:"link - a link to a Meta_ViewShader instance"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Idx_BlendMode"}),(0,i.jsx)(n.td,{}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.a,{href:"#enum-blendmode",children:"BlendMode"})," (int) - controls how shader output is blended with the framebuffer contents."]})]})]})]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>l});var d=r(96540);const i={},t=d.createContext(i);function s(e){const n=d.useContext(t);return d.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),d.createElement(t.Provider,{value:n},e.children)}}}]);
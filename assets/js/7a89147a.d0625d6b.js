"use strict";(self.webpackChunkvirtalis_docs=self.webpackChunkvirtalis_docs||[]).push([[26369],{41245:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>o,contentTitle:()=>a,default:()=>u,frontMatter:()=>d,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"visionary-render-programming/reference/c-api/classes/metanodes/meta-audio-buffer","title":"Meta_AudioBuffer","description":"Module: Metanodes / Definitions","source":"@site/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-audio-buffer.mdx","sourceDirName":"visionary-render-programming/reference/c-api/classes/metanodes","slug":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-audio-buffer","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-audio-buffer","draft":false,"unlisted":false,"editUrl":"https://github.com/virtalis/docs/tree/master/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-audio-buffer.mdx","tags":[],"version":"current","lastUpdatedAt":1730817102000,"frontMatter":{"title":"Meta_AudioBuffer","summary":"An AudioBuffer represents sound data that can be played by multiple sources."},"sidebar":"visionaryRenderProgrammingSidebar","previous":{"title":"Meta_Assembly","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-assembly"},"next":{"title":"Meta_AudioSound","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-audio-sound"}}');var s=n(74848),t=n(28453);const d={title:"Meta_AudioBuffer",summary:"An AudioBuffer represents sound data that can be played by multiple sources."},a="Meta_AudioBuffer",o={},c=[{value:"Public Types",id:"public-types",level:2},{value:"Detailed Description",id:"detailed-description",level:2},{value:"Public Types Documentation",id:"public-types-documentation",level:2},{value:"enum IDX",id:"enum-idx",level:3}];function l(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"meta_audiobuffer",children:"Meta_AudioBuffer"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Module:"})," ",(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/",children:"Metanodes"})})," ",(0,s.jsx)(r.strong,{children:"/"})," ",(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/definitions",children:"Definitions"})})]}),"\n",(0,s.jsxs)(r.p,{children:["An AudioBuffer represents sound data that can be played by multiple sources.  ",(0,s.jsx)(r.a,{href:"#detailed-description",children:"More..."})]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.code,{children:"#include <meta_audio.hpp>"})}),"\n",(0,s.jsx)(r.h2,{id:"public-types",children:"Public Types"}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Type"}),(0,s.jsx)(r.th,{children:"Name"})]})}),(0,s.jsx)(r.tbody,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"enum"}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"#enum-idx",children:"IDX"})})," { Idx_File, Idx_RawData, Idx_RawModifiedTime }",(0,s.jsx)("br",{}),"Property index."]})]})})]}),"\n",(0,s.jsx)(r.h2,{id:"detailed-description",children:"Detailed Description"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"struct Meta_AudioBuffer;\n"})}),"\n",(0,s.jsx)(r.p,{children:"An AudioBuffer represents sound data that can be played by multiple sources."}),"\n",(0,s.jsxs)(r.p,{children:["This node is usually created in a library and referenced from ",(0,s.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-audio-sound",children:"Meta_AudioSound"})," or ",(0,s.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-audio-track",children:"Meta_AudioTrack"})," nodes. These are positional."]}),"\n",(0,s.jsx)(r.h2,{id:"public-types-documentation",children:"Public Types Documentation"}),"\n",(0,s.jsx)(r.h3,{id:"enum-idx",children:"enum IDX"}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Enumerator"}),(0,s.jsx)(r.th,{children:"Value"}),(0,s.jsx)(r.th,{children:"Description"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Idx_File"}),(0,s.jsx)(r.td,{}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.code,{children:"string"})," - Path to the audio file, which is loaded automatically and stored in RawData"]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Idx_RawData"}),(0,s.jsx)(r.td,{}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.code,{children:"vector<char>"})," - Raw audio file data (including headers), can be set directly if not specifying a file name"]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Idx_RawModifiedTime"}),(0,s.jsx)(r.td,{}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.code,{children:"int64"})," - The time the raw data was last modified. Unix epoch (seconds since Jan 1 1970) stored as two 32-bit ints (LO,HI)"]})]})]})]}),"\n",(0,s.jsx)(r.p,{children:"Property index."})]})}function u(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},28453:(e,r,n)=>{n.d(r,{R:()=>d,x:()=>a});var i=n(96540);const s={},t=i.createContext(s);function d(e){const r=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),i.createElement(t.Provider,{value:r},e.children)}}}]);
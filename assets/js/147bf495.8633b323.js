"use strict";(self.webpackChunkvirtalis_docs=self.webpackChunkvirtalis_docs||[]).push([[37263],{5747:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"visionary-render-programming/reference/c-api/classes/metanodes/meta-shader-sampler","title":"Meta_ShaderSampler","description":"Module: Metanodes / Definitions","source":"@site/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-shader-sampler.mdx","sourceDirName":"visionary-render-programming/reference/c-api/classes/metanodes","slug":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-shader-sampler","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-shader-sampler","draft":false,"unlisted":false,"editUrl":"https://github.com/virtalis/docs/tree/master/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-shader-sampler.mdx","tags":[],"version":"current","lastUpdatedAt":1730820727000,"frontMatter":{"title":"Meta_ShaderSampler","summary":"define special metanode for sampler uniform type. Sampler contains a reference to a texture node, along with offset and scale to apply to texture coordinates before sampling."},"sidebar":"visionaryRenderProgrammingSidebar","previous":{"title":"Meta_Sequence","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-sequence"},"next":{"title":"Meta_ShadowBoundsOverride","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-shadow-bounds-override"}}');var t=n(74848),a=n(28453);const i={title:"Meta_ShaderSampler",summary:"define special metanode for sampler uniform type. Sampler contains a reference to a texture node, along with offset and scale to apply to texture coordinates before sampling."},d="Meta_ShaderSampler",c={},o=[{value:"Public Types",id:"public-types",level:2},{value:"Public Functions",id:"public-functions",level:2},{value:"Public Types Documentation",id:"public-types-documentation",level:2},{value:"enum IDX",id:"enum-idx",level:3},{value:"Public Functions Documentation",id:"public-functions-documentation",level:2},{value:"Meta_ShaderSampler",id:"meta_shadersampler-1",level:3}];function l(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"meta_shadersampler",children:"Meta_ShaderSampler"})}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Module:"})," ",(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/",children:"Metanodes"})})," ",(0,t.jsx)(r.strong,{children:"/"})," ",(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/definitions",children:"Definitions"})})]}),"\n",(0,t.jsx)(r.p,{children:"define special metanode for sampler uniform type. Sampler contains a reference to a texture node, along with offset and scale to apply to texture coordinates before sampling."}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.code,{children:"#include <meta_division.hpp>"})}),"\n",(0,t.jsx)(r.h2,{id:"public-types",children:"Public Types"}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"Type"}),(0,t.jsx)(r.th,{children:"Name"})]})}),(0,t.jsx)(r.tbody,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"enum"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"#enum-idx",children:"IDX"})})," { Idx_Texture, Idx_Override, Idx_Locked }"]})]})})]}),"\n",(0,t.jsx)(r.h2,{id:"public-functions",children:"Public Functions"}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"Type"}),(0,t.jsx)(r.th,{children:"Name"})]})}),(0,t.jsx)(r.tbody,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"#meta_shadersampler-1",children:"Meta_ShaderSampler"})}),"()"]})]})})]}),"\n",(0,t.jsx)(r.h2,{id:"public-types-documentation",children:"Public Types Documentation"}),"\n",(0,t.jsx)(r.h3,{id:"enum-idx",children:"enum IDX"}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"Enumerator"}),(0,t.jsx)(r.th,{children:"Value"}),(0,t.jsx)(r.th,{children:"Description"})]})}),(0,t.jsxs)(r.tbody,{children:[(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Idx_Texture"}),(0,t.jsx)(r.td,{}),(0,t.jsx)(r.td,{})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Idx_Override"}),(0,t.jsx)(r.td,{}),(0,t.jsx)(r.td,{})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Idx_Locked"}),(0,t.jsx)(r.td,{}),(0,t.jsx)(r.td,{})]})]})]}),"\n",(0,t.jsx)(r.h2,{id:"public-functions-documentation",children:"Public Functions Documentation"}),"\n",(0,t.jsx)(r.h3,{id:"meta_shadersampler-1",children:"Meta_ShaderSampler"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-cpp",children:"inline Meta_ShaderSampler()\n"})})]})}function h(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},28453:(e,r,n)=>{n.d(r,{R:()=>i,x:()=>d});var s=n(96540);const t={},a=s.createContext(t);function i(e){const r=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function d(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),s.createElement(a.Provider,{value:r},e.children)}}}]);
"use strict";(self.webpackChunkvirtalis_docs=self.webpackChunkvirtalis_docs||[]).push([[70508],{76644:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"visionary-render-programming/reference/c-api/classes/metanodes/meta-physical-screen","title":"Meta_PhysicalScreen","description":"Module: Metanodes / Definitions","source":"@site/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-physical-screen.mdx","sourceDirName":"visionary-render-programming/reference/c-api/classes/metanodes","slug":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-physical-screen","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-physical-screen","draft":false,"unlisted":false,"editUrl":"https://github.com/virtalis/docs/tree/master/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-physical-screen.mdx","tags":[],"version":"current","lastUpdatedAt":1730817102000,"frontMatter":{"title":"Meta_PhysicalScreen","summary":"A PhysicalScreen describes the physical location of a projection screen as part of a view configuration."},"sidebar":"visionaryRenderProgrammingSidebar","previous":{"title":"Meta_Permission","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-permission"},"next":{"title":"Meta_Pivot","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-pivot"}}');var i=n(74848),t=n(28453);const a={title:"Meta_PhysicalScreen",summary:"A PhysicalScreen describes the physical location of a projection screen as part of a view configuration."},c="Meta_PhysicalScreen",o={},d=[{value:"Public Types",id:"public-types",level:2},{value:"Public Types Documentation",id:"public-types-documentation",level:2},{value:"enum IDX",id:"enum-idx",level:3}];function l(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"meta_physicalscreen",children:"Meta_PhysicalScreen"})}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Module:"})," ",(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/",children:"Metanodes"})})," ",(0,i.jsx)(r.strong,{children:"/"})," ",(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/definitions",children:"Definitions"})})]}),"\n",(0,i.jsx)(r.p,{children:"A PhysicalScreen describes the physical location of a projection screen as part of a view configuration."}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.code,{children:"#include <meta_view.hpp>"})}),"\n",(0,i.jsx)(r.h2,{id:"public-types",children:"Public Types"}),"\n",(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.th,{children:"Type"}),(0,i.jsx)(r.th,{children:"Name"})]})}),(0,i.jsx)(r.tbody,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"enum"}),(0,i.jsxs)(r.td,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"#enum-idx",children:"IDX"})})," { Idx_Transform, Idx_Size, Idx_Curvature, Idx_DrawOutline }",(0,i.jsx)("br",{}),"Property index."]})]})})]}),"\n",(0,i.jsx)(r.h2,{id:"public-types-documentation",children:"Public Types Documentation"}),"\n",(0,i.jsx)(r.h3,{id:"enum-idx",children:"enum IDX"}),"\n",(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.th,{children:"Enumerator"}),(0,i.jsx)(r.th,{children:"Value"}),(0,i.jsx)(r.th,{children:"Description"})]})}),(0,i.jsxs)(r.tbody,{children:[(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"Idx_Transform"}),(0,i.jsx)(r.td,{}),(0,i.jsx)(r.td,{children:"mat4w - The transform used to position and orient the screen"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"Idx_Size"}),(0,i.jsx)(r.td,{}),(0,i.jsx)(r.td,{children:"vec2w - The physical size of the screen, in metres"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"Idx_Curvature"}),(0,i.jsx)(r.td,{}),(0,i.jsx)(r.td,{children:"float - The horizontal curvature of the screen, in degrees"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"Idx_DrawOutline"}),(0,i.jsx)(r.td,{}),(0,i.jsx)(r.td,{children:"bool - Whether to draw the outline of the physical screen in the viewports to help with alignment during installation"})]})]})]}),"\n",(0,i.jsx)(r.p,{children:"Property index."})]})}function h(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},28453:(e,r,n)=>{n.d(r,{R:()=>a,x:()=>c});var s=n(96540);const i={},t=s.createContext(i);function a(e){const r=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(t.Provider,{value:r},e.children)}}}]);
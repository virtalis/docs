"use strict";(self.webpackChunkvirtalis_docs=self.webpackChunkvirtalis_docs||[]).push([[8775],{89223:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>d,toc:()=>x});const d=JSON.parse('{"id":"visionary-render-programming/reference/c-api/classes/metanodes/meta-std-material","title":"Meta_StdMaterial","description":"Module: Metanodes / Definitions","source":"@site/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-std-material.mdx","sourceDirName":"visionary-render-programming/reference/c-api/classes/metanodes","slug":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-std-material","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-std-material","draft":false,"unlisted":false,"editUrl":"https://github.com/virtalis/docs/tree/master/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-std-material.mdx","tags":[],"version":"current","frontMatter":{"title":"Meta_StdMaterial","summary":"A StdMaterial describes a standard material that can be applied to numerous 3D objects (geogroups, visuals, etc)"},"sidebar":"visionaryRenderProgrammingSidebar","previous":{"title":"Meta_Stack","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-stack"},"next":{"title":"Meta_SurfaceShaderDefinition","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-surface-shader-definition"}}');var s=t(74848),i=t(28453);const r={title:"Meta_StdMaterial",summary:"A StdMaterial describes a standard material that can be applied to numerous 3D objects (geogroups, visuals, etc)"},l="Meta_StdMaterial",a={},x=[{value:"Public Types",id:"public-types",level:2},{value:"Public Types Documentation",id:"public-types-documentation",level:2},{value:"enum BlendMode",id:"enum-blendmode",level:3},{value:"enum IDX",id:"enum-idx",level:3},{value:"enum LinePatterns",id:"enum-linepatterns",level:3},{value:"enum TextureChannels",id:"enum-texturechannels",level:3}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"meta_stdmaterial",children:"Meta_StdMaterial"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Module:"})," ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/",children:"Metanodes"})})," ",(0,s.jsx)(n.strong,{children:"/"})," ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/definitions",children:"Definitions"})})]}),"\n",(0,s.jsx)(n.p,{children:"A StdMaterial describes a standard material that can be applied to numerous 3D objects (geogroups, visuals, etc)"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"#include <meta_importables.hpp>"})}),"\n",(0,s.jsx)(n.h2,{id:"public-types",children:"Public Types"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Name"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"enum"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#enum-blendmode",children:"BlendMode"})})," { Blend_None, Blend_Alpha, Blend_Add, Blend_Mult }",(0,s.jsx)("br",{}),"Values for Idx_BlendMode."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"enum"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#enum-idx",children:"IDX"})})," { Idx_Diffuse, Idx_Ambient, Idx_Specular, Idx_Emissive, Idx_Reflectivity, Idx_Smoothness, Idx_Metalness, Idx_Opacity, Idx_DiffuseMap, Idx_AmbientMap, Idx_ReflectivityMap, Idx_EmissiveMap, Idx_EnvironmentMap, Idx_SmoothnessMap, Idx_MetalnessMap, Idx_OpacityMap, Idx_NormalMap, Idx_BumpMap, Idx_TwoSidedLighting, Idx_Fresnel, Idx_MapMatrix, Idx_EmissiveIntensity, Idx_BumpScale, Idx_BlendMode, Idx_AlphaTest, Idx_AlphaTestRef, Idx_Enabled, Idx_LineWidth, Idx_ReliefMapping, Idx_LinePattern, Idx_Lit, Idx_AlphaToCoverage, Idx_HalfLambert, Idx_AmbientMapChannel, Idx_ReflectivityMapChannel, Idx_SmoothnessMapChannel, Idx_MetalnessMapChannel, Idx_InvertSmoothness, Idx_PreviewShape }",(0,s.jsx)("br",{}),"Property index."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"enum"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#enum-linepatterns",children:"LinePatterns"})})," { FullLine = 0x0001FFFF, NoLine = 0x00010000, DoubleDashed = 0x00010F0F, DashedLine = 0x000100FF }",(0,s.jsx)("br",{}),"Values for Idx_LinePattern."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"enum"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#enum-texturechannels",children:"TextureChannels"})})," { TextureChannel_Red = 0, TextureChannel_Green = 1, TextureChannel_Blue = 2, TextureChannel_Alpha = 3 }"]})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"public-types-documentation",children:"Public Types Documentation"}),"\n",(0,s.jsx)(n.h3,{id:"enum-blendmode",children:"enum BlendMode"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Enumerator"}),(0,s.jsx)(n.th,{children:"Value"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Blend_None"}),(0,s.jsx)(n.td,{}),(0,s.jsxs)(n.td,{children:["No alpha blending. Opacity related options are ignored (Symbols - C: ",(0,s.jsx)(n.code,{children:'"BlendNone"'}),", Lua: ",(0,s.jsx)(n.code,{children:"__StdMaterial_BlendNone"}),")"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Blend_Alpha"}),(0,s.jsx)(n.td,{}),(0,s.jsxs)(n.td,{children:["Alpha blending (Symbols - C: ",(0,s.jsx)(n.code,{children:'"BlendAlpha"'}),", Lua: ",(0,s.jsx)(n.code,{children:"__StdMaterial_BlendAlpha"}),")"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Blend_Add"}),(0,s.jsx)(n.td,{}),(0,s.jsxs)(n.td,{children:["Additive blending (Symbols - C: ",(0,s.jsx)(n.code,{children:'"BlendAdditive"'}),", Lua: ",(0,s.jsx)(n.code,{children:"__StdMaterial_BlendAdditive"}),")"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Blend_Mult"}),(0,s.jsx)(n.td,{}),(0,s.jsxs)(n.td,{children:["Multiplicative blending (Symbols - C: ",(0,s.jsx)(n.code,{children:'"BlendMultiplicative"'}),", Lua: ",(0,s.jsx)(n.code,{children:"__StdMaterial_BlendMultiplicative"}),")"]})]})]})]}),"\n",(0,s.jsx)(n.p,{children:"Values for Idx_BlendMode."}),"\n",(0,s.jsx)(n.h3,{id:"enum-idx",children:"enum IDX"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Enumerator"}),(0,s.jsx)(n.th,{children:"Value"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_Diffuse"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"vec3f - Constant diffuse colour; RGB 0.0 to 1.0"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_Ambient"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"float - Ambient scalar."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_Specular"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"vec3f - Constant specular colour; RGB 0.0 to 1.0"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_Emissive"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"vec3f - Constant emissive colour; RGB 0.0 to 1.0"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_Reflectivity"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"float - Constant which modulates the colour sampled from the reflection map before adding to result."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_Smoothness"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"float - Constant smoothness value (0=minimum exponent, 1=maximum exponent)."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_Metalness"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"float - Constant metalness value (0=not metal, 1=metal)."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_Opacity"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"float - Constant opacity value (0=fully transparent, 1=fully opaque)."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_DiffuseMap"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"link - Texture providing per-pixel diffuse colour. Alpha is used to modulate Idx_Opacity value unless Idx_OpacityMap is present."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_AmbientMap"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"link - Texture providing per-pixel ambient colour."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_ReflectivityMap"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"link - Texture providing per-pixel specular colour. Alpha is used to modulate Idx_Smoothness value unless Idx_SmoothnessMap is present."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_EmissiveMap"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"link - Texture providing per-pixel emissive colour. Adds on to Idx_Emissive value."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_EnvironmentMap"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"link - Texture providing per-pixel reflection colour."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_SmoothnessMap"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"link - Texture providing per-pixel smoothness, modulates Idx_Smoothness value."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_MetalnessMap"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"link - Texture providing per-pixel metalness, modulates Idx_Metalness value."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_OpacityMap"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"link - Texture providing per-pixel opacity, modulates Idx_Opacity value."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_NormalMap"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"link - Texture providing per-pixel object-space normal vector (XYZ scaled and biased into RGB)."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_BumpMap"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"link - Texture providing per-pixel tangent-space normal vector (XYZ scaled and biased into RGB)."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_TwoSidedLighting"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"bool - Tf true, back faces are lit using the inverted normal (which results in an expensive branch in the shader)."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_Fresnel"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"Unused."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_MapMatrix"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"mat4f - Transformation matrix for the texture coordinates"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_EmissiveIntensity"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"float - Constant emissive intensity."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_BumpScale"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"float - Constant bump scale."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_BlendMode"}),(0,s.jsx)(n.td,{}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.a,{href:"#enum-blendmode",children:"BlendMode"})," (int) - Blend mode"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_AlphaTest"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:'bool - Enables alpha testing - required for any blend mode other than "None"'})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_AlphaTestRef"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"float - Determines the level at what point in an opacity map is it counted as transparent or not."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_Enabled"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"bool - When disabled, objects with this material are not rendered"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_LineWidth"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"float - Width of any lines drawn with this material"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_ReliefMapping"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"Whether or not relief mapping is enabled."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_LinePattern"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"LinePatterns (int) - Sets line drawing pattern (factor and pattern combined)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_Lit"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"bool - if true (default) the material is affected by scene lighting, if false it isn't (only emits light)."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_AlphaToCoverage"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"bool - Use the alpha of this material for a screen-door transparency effect (Note: MSAA must be enabled)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_HalfLambert"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"bool - Use special diffuse lighting to prevent the rear of an object losing its shape and looking too flat"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_AmbientMapChannel"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"int - Specifies which channel of the ambient map contains the ambient values, allowing a single RGB/RGBA texture to be shared between several maps."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_ReflectivityMapChannel"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"int - Specifies which channel of the reflectivity map contains the reflectivity values, allowing a single RGB/RGBA texture to be shared between several maps."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_SmoothnessMapChannel"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"int - Specifies which channel of the smoothness map contains the smoothness values, allowing a single RGB/RGBA texture to be shared between several maps."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_MetalnessMapChannel"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"int - Specifies which channel of the metalness map contains the metalness values, allowing a single RGB/RGBA texture to be shared between several maps."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_InvertSmoothness"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"bool - Inverts smoothness and smoothness map values, enabling use of a roughness map."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_PreviewShape"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"link - the model used for previewing the material"})]})]})]}),"\n",(0,s.jsx)(n.p,{children:"Property index."}),"\n",(0,s.jsx)(n.h3,{id:"enum-linepatterns",children:"enum LinePatterns"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Enumerator"}),(0,s.jsx)(n.th,{children:"Value"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"FullLine"}),(0,s.jsx)(n.td,{children:"0x0001FFFF"}),(0,s.jsxs)(n.td,{children:["Symbols - C: ",(0,s.jsx)(n.code,{children:'"LinePatternFullLine"'}),", Lua: ",(0,s.jsx)(n.code,{children:"__StdMaterial_LinePatternFullLine"})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"NoLine"}),(0,s.jsx)(n.td,{children:"0x00010000"}),(0,s.jsxs)(n.td,{children:["Symbols - C: ",(0,s.jsx)(n.code,{children:'"LinePatternNoLine"'}),", Lua: ",(0,s.jsx)(n.code,{children:"__StdMaterial_LinePatternNoLine"})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"DoubleDashed"}),(0,s.jsx)(n.td,{children:"0x00010F0F"}),(0,s.jsxs)(n.td,{children:["Symbols - C: ",(0,s.jsx)(n.code,{children:'"LinePatternDoubleDashed"'}),", Lua: ",(0,s.jsx)(n.code,{children:"__StdMaterial_LinePatternDoubleDashed"})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"DashedLine"}),(0,s.jsx)(n.td,{children:"0x000100FF"}),(0,s.jsxs)(n.td,{children:["Symbols - C: ",(0,s.jsx)(n.code,{children:'"LinePatternDashedLine"'}),", Lua: ",(0,s.jsx)(n.code,{children:"__StdMaterial_LinePatternDashedLine"})]})]})]})]}),"\n",(0,s.jsx)(n.p,{children:"Values for Idx_LinePattern."}),"\n",(0,s.jsx)(n.h3,{id:"enum-texturechannels",children:"enum TextureChannels"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Enumerator"}),(0,s.jsx)(n.th,{children:"Value"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"TextureChannel_Red"}),(0,s.jsx)(n.td,{children:"0"}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"TextureChannel_Green"}),(0,s.jsx)(n.td,{children:"1"}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"TextureChannel_Blue"}),(0,s.jsx)(n.td,{children:"2"}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"TextureChannel_Alpha"}),(0,s.jsx)(n.td,{children:"3"}),(0,s.jsx)(n.td,{})]})]})]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var d=t(96540);const s={},i=d.createContext(s);function r(e){const n=d.useContext(i);return d.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),d.createElement(i.Provider,{value:n},e.children)}}}]);
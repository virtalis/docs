"use strict";(self.webpackChunkvirtalis_docs=self.webpackChunkvirtalis_docs||[]).push([[7606],{93012:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>x,frontMatter:()=>i,metadata:()=>n,toc:()=>o});const n=JSON.parse('{"id":"visionary-render-programming/reference/c-api/classes/metanodes/meta-net-player-texture","title":"Meta_NetPlayerTexture","description":"Module: Metanodes / Definitions","source":"@site/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-net-player-texture.mdx","sourceDirName":"visionary-render-programming/reference/c-api/classes/metanodes","slug":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-net-player-texture","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-net-player-texture","draft":false,"unlisted":false,"editUrl":"https://github.com/virtalis/docs/tree/master/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-net-player-texture.mdx","tags":[],"version":"current","frontMatter":{"title":"Meta_NetPlayerTexture","summary":"A NetPlayerTexture is video streaming player from a remote Visionary Render application."},"sidebar":"visionaryRenderProgrammingSidebar","previous":{"title":"Meta_Movie","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-movie"},"next":{"title":"Meta_NodeSelector","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-node-selector"}}');var s=r(74848),d=r(28453);const i={title:"Meta_NetPlayerTexture",summary:"A NetPlayerTexture is video streaming player from a remote Visionary Render application."},a="Meta_NetPlayerTexture",c={},o=[{value:"Public Types",id:"public-types",level:2},{value:"Public Types Documentation",id:"public-types-documentation",level:2},{value:"enum IDX",id:"enum-idx",level:3},{value:"enum State",id:"enum-state",level:3}];function l(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,d.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"meta_netplayertexture",children:"Meta_NetPlayerTexture"})}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Module:"})," ",(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/",children:"Metanodes"})})," ",(0,s.jsx)(t.strong,{children:"/"})," ",(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/definitions",children:"Definitions"})})]}),"\n",(0,s.jsx)(t.p,{children:"A NetPlayerTexture is video streaming player from a remote Visionary Render application."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.code,{children:"#include <meta_netplayertexture.hpp>"})}),"\n",(0,s.jsx)(t.h2,{id:"public-types",children:"Public Types"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Type"}),(0,s.jsx)(t.th,{children:"Name"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"enum"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"#enum-idx",children:"IDX"})})," { Idx_Enabled, Idx_State, Idx_Host, Idx_Port, Idx_Password, Idx_RemoteControl, Idx_LastErrorMessage, Idx_UserInput }",(0,s.jsx)("br",{}),"Property index."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"enum"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"#enum-state",children:"State"})})," { State_Disconnected, State_Connecting, State_Connected, State_Error }",(0,s.jsx)("br",{}),"Values for Idx_State."]})]})]})]}),"\n",(0,s.jsx)(t.h2,{id:"public-types-documentation",children:"Public Types Documentation"}),"\n",(0,s.jsx)(t.h3,{id:"enum-idx",children:"enum IDX"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Enumerator"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Idx_Enabled"}),(0,s.jsx)(t.td,{}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Idx_State"}),(0,s.jsx)(t.td,{}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Idx_Host"}),(0,s.jsx)(t.td,{}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Idx_Port"}),(0,s.jsx)(t.td,{}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Idx_Password"}),(0,s.jsx)(t.td,{}),(0,s.jsx)(t.td,{children:"Hashed and base64 encoded password."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Idx_RemoteControl"}),(0,s.jsx)(t.td,{}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Idx_LastErrorMessage"}),(0,s.jsx)(t.td,{}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Idx_UserInput"}),(0,s.jsx)(t.td,{}),(0,s.jsx)(t.td,{children:"UserInput is a specially formatted string, on seeing the change the actor will decifer it and send the equivalent input to the server.  In that fashion the UserInput can be used to drive the NetPlayer from scripts and, crucially, allow a keyboard to be implemented within visren. Currently it only support keyboard inputs and the strings returned by sysKeyboard::stringToCode()."})]})]})]}),"\n",(0,s.jsx)(t.p,{children:"Property index."}),"\n",(0,s.jsx)(t.h3,{id:"enum-state",children:"enum State"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Enumerator"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"State_Disconnected"}),(0,s.jsx)(t.td,{}),(0,s.jsx)(t.td,{children:"The client is not connected."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"State_Connecting"}),(0,s.jsx)(t.td,{}),(0,s.jsx)(t.td,{children:"The client is in the process of connecting."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"State_Connected"}),(0,s.jsx)(t.td,{}),(0,s.jsx)(t.td,{children:"The client is connected and working correctly."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"State_Error"}),(0,s.jsx)(t.td,{}),(0,s.jsx)(t.td,{children:"An error has occured - more details are in LastErrorMessage."})]})]})]}),"\n",(0,s.jsx)(t.p,{children:"Values for Idx_State."})]})}function x(e={}){const{wrapper:t}={...(0,d.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},28453:(e,t,r)=>{r.d(t,{R:()=>i,x:()=>a});var n=r(96540);const s={},d=n.createContext(s);function i(e){const t=n.useContext(d);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),n.createElement(d.Provider,{value:t},e.children)}}}]);
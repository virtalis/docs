"use strict";(self.webpackChunkvirtalis_docs=self.webpackChunkvirtalis_docs||[]).push([[852],{25906:(e,s,i)=>{i.r(s),i.d(s,{assets:()=>o,contentTitle:()=>l,default:()=>a,frontMatter:()=>t,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"visionary-render-programming/reference/c-api/classes/metanodes/meta-collision","title":"Meta_Collision","description":"Module: Metanodes / Definitions","source":"@site/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-collision.mdx","sourceDirName":"visionary-render-programming/reference/c-api/classes/metanodes","slug":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-collision","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-collision","draft":false,"unlisted":false,"editUrl":"https://github.com/virtalis/docs/tree/master/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-collision.mdx","tags":[],"version":"current","lastUpdatedAt":1730820727000,"frontMatter":{"title":"Meta_Collision","summary":"A Collision node adds greater control over object collisions in the scene and allows the dispatching of script events in response to collisions."},"sidebar":"visionaryRenderProgrammingSidebar","previous":{"title":"Meta_CollisionGuard","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-collision-guard"},"next":{"title":"Meta_ColouredButtonStyle","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-coloured-button-style"}}');var r=i(74848),d=i(28453);const t={title:"Meta_Collision",summary:"A Collision node adds greater control over object collisions in the scene and allows the dispatching of script events in response to collisions."},l="Meta_Collision",o={},c=[{value:"Public Types",id:"public-types",level:2},{value:"Public Attributes",id:"public-attributes",level:2},{value:"Public Types Documentation",id:"public-types-documentation",level:2},{value:"enum CollideReport",id:"enum-collidereport",level:3},{value:"enum CollideType",id:"enum-collidetype",level:3},{value:"enum IDX",id:"enum-idx",level:3},{value:"enum ShapeMode",id:"enum-shapemode",level:3},{value:"Public Attributes Documentation",id:"public-attributes-documentation",level:2},{value:"GROUP_CAMERA",id:"group_camera",level:3},{value:"GROUP_DEFAULT",id:"group_default",level:3},{value:"GROUP_HELPERS",id:"group_helpers",level:3},{value:"GROUP_PICKABLE",id:"group_pickable",level:3},{value:"GROUP_PICKING",id:"group_picking",level:3},{value:"GROUP_SYSTEM",id:"group_system",level:3},{value:"GROUP_VISUAL",id:"group_visual",level:3}];function h(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,d.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"meta_collision",children:"Meta_Collision"})}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Module:"})," ",(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/",children:"Metanodes"})})," ",(0,r.jsx)(s.strong,{children:"/"})," ",(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/definitions",children:"Definitions"})})]}),"\n",(0,r.jsx)(s.p,{children:"A Collision node adds greater control over object collisions in the scene and allows the dispatching of script events in response to collisions."}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.code,{children:"#include <meta_importables.hpp>"})}),"\n",(0,r.jsx)(s.h2,{id:"public-types",children:"Public Types"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Type"}),(0,r.jsx)(s.th,{children:"Name"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"enum"}),(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.a,{href:"#enum-collidereport",children:"CollideReport"})})," { REPORT_QUIET = 1, REPORT_INVQUIET = 2, REPORT_NORMAL = (REPORT_QUIET"]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"enum"}),(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.a,{href:"#enum-collidetype",children:"CollideType"})})," { TYPE_DEFAULT = GROUP_DEFAULT"]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"enum"}),(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.a,{href:"#enum-idx",children:"IDX"})})," { Idx_State, Idx_Mode, Idx_Geometry, Idx_Sphere, Idx_BBox, Idx_Ray, Idx_RayLength, Idx_CollisionResponse, Idx_Report, Idx_Type, Idx_Visible, Idx_CollideCount, Idx_Mass, Idx_Restitution, Idx_Friction, Idx_PrivateShape, Idx_CylindricalShape, Idx_Offset }",(0,r.jsx)("br",{}),"Property index."]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"enum"}),(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.a,{href:"#enum-shapemode",children:"ShapeMode"})})," { MODE_GEOMETRY_BBOX, MODE_BBOX, MODE_SPHERE, MODE_VISUAL, MODE_RAY, MODE_RAY_PENETRATING, MODE_GEOMETRY_CONVEX_DECOMPOSITION, MODE_CYLINDER, MODE_CAPSULE, MODE_CONE }",(0,r.jsx)("br",{}),"Values for Idx_Mode."]})]})]})]}),"\n",(0,r.jsx)(s.h2,{id:"public-attributes",children:"Public Attributes"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Type"}),(0,r.jsx)(s.th,{children:"Name"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"const int"}),(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.a,{href:"#group_camera",children:"GROUP_CAMERA"})})," ",(0,r.jsx)("br",{}),"defines a collision group for cameras"]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"const int"}),(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.a,{href:"#group_default",children:"GROUP_DEFAULT"})})," ",(0,r.jsx)("br",{}),"defines a standard collision group; DEFAULT objects collide with everything other than PICKING and PICKABLE objects"]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"const int"}),(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.a,{href:"#group_helpers",children:"GROUP_HELPERS"})})," ",(0,r.jsx)("br",{}),"defines a collision group for immersive helpers that require collision with the avatar but with not the picking rays"]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"const int"}),(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.a,{href:"#group_pickable",children:"GROUP_PICKABLE"})})," ",(0,r.jsx)("br",{}),"defines a Mockup compatible collide group; PICKABLE objects only collide with PICKING objects"]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"const int"}),(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.a,{href:"#group_picking",children:"GROUP_PICKING"})})," ",(0,r.jsx)("br",{}),"defines a Mockup compatible collide group; PICKING objects only collide with PICKABLE objects"]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"const int"}),(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.a,{href:"#group_system",children:"GROUP_SYSTEM"})})," ",(0,r.jsx)("br",{}),"defines a collide group for the systems always on picking - Skinnies without a Fat sibling"]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"const int"}),(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.a,{href:"#group_visual",children:"GROUP_VISUAL"})})," ",(0,r.jsx)("br",{}),"defines a collision group for Skinny bodies that have a Fat sibling - always the visual mesh"]})]})]})]}),"\n",(0,r.jsx)(s.h2,{id:"public-types-documentation",children:"Public Types Documentation"}),"\n",(0,r.jsx)(s.h3,{id:"enum-collidereport",children:"enum CollideReport"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Enumerator"}),(0,r.jsx)(s.th,{children:"Value"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"REPORT_QUIET"}),(0,r.jsx)(s.td,{children:"1"}),(0,r.jsxs)(s.td,{children:["Report the collision to the other object and not this (Symbols - C: ",(0,r.jsx)(s.code,{children:'"ReportQuiet"'}),", Lua: ",(0,r.jsx)(s.code,{children:"__Collision_ReportQuiet"}),")"]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"REPORT_INVQUIET"}),(0,r.jsx)(s.td,{children:"2"}),(0,r.jsxs)(s.td,{children:["Report the collision to this and not the other object (Symbols - C: ",(0,r.jsx)(s.code,{children:'"ReportInvQuiet"'}),", Lua: ",(0,r.jsx)(s.code,{children:"__Collision_ReportInvQuiet"}),")"]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"REPORT_NORMAL"}),(0,r.jsx)(s.td,{children:"(REPORT_QUIET | REPORT_INVQUIET)"}),(0,r.jsxs)(s.td,{children:["Reports the collision to both objects (Symbols - C: ",(0,r.jsx)(s.code,{children:'"ReportNormal"'}),", Lua: ",(0,r.jsx)(s.code,{children:"__Collision_ReportNormal"}),")"]})]})]})]}),"\n",(0,r.jsx)(s.p,{children:"Values for Idx_Report."}),"\n",(0,r.jsx)(s.h3,{id:"enum-collidetype",children:"enum CollideType"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Enumerator"}),(0,r.jsx)(s.th,{children:"Value"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"TYPE_DEFAULT"}),(0,r.jsx)(s.td,{children:"GROUP_DEFAULT   | ((0xffff & ~(GROUP_PICKING | GROUP_PICKABLE | GROUP_CAMERA)) << 16)"}),(0,r.jsxs)(s.td,{children:["(Symbols - C: ",(0,r.jsx)(s.code,{children:'"TypeDefault"'}),", Lua: ",(0,r.jsx)(s.code,{children:"__Collision_TypeDefault"}),")"]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"TYPE_PICKING"}),(0,r.jsx)(s.td,{children:"GROUP_PICKING   | (GROUP_PICKABLE << 16)"}),(0,r.jsxs)(s.td,{children:["(Symbols - C: ",(0,r.jsx)(s.code,{children:'"TypePicking"'}),", Lua: ",(0,r.jsx)(s.code,{children:"__Collision_TypePicking"}),")"]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"TYPE_PICKABLE"}),(0,r.jsx)(s.td,{children:"GROUP_PICKABLE  | (GROUP_PICKING << 16)"}),(0,r.jsxs)(s.td,{children:["(Symbols - C: ",(0,r.jsx)(s.code,{children:'"TypePickable"'}),", Lua: ",(0,r.jsx)(s.code,{children:"__Collision_TypePickable"}),")"]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"TYPE_CAMERA"}),(0,r.jsx)(s.td,{children:"GROUP_CAMERA    | ((0xffff & ~(GROUP_PICKING | GROUP_PICKABLE | GROUP_CAMERA)) << 16)"}),(0,r.jsxs)(s.td,{children:["(Symbols - C: ",(0,r.jsx)(s.code,{children:'"Camera"'}),", Lua: ",(0,r.jsx)(s.code,{children:"__Collision_Camera"}),")"]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"TYPE_ALL"}),(0,r.jsx)(s.td,{children:"~0"}),(0,r.jsxs)(s.td,{children:["(Symbols - C: ",(0,r.jsx)(s.code,{children:'"TypeAll"'}),", Lua: ",(0,r.jsx)(s.code,{children:"__Collision_TypeAll"}),")"]})]})]})]}),"\n",(0,r.jsx)(s.p,{children:"Values for Idx_Type."}),"\n",(0,r.jsx)(s.p,{children:"The values of this enum are for convenience, any 32bit value is usable so complex groups and mask are supported."}),"\n",(0,r.jsx)(s.h3,{id:"enum-idx",children:"enum IDX"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Enumerator"}),(0,r.jsx)(s.th,{children:"Value"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Idx_State"}),(0,r.jsx)(s.td,{}),(0,r.jsx)(s.td,{children:"bool - The enabled state of this collision body"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Idx_Mode"}),(0,r.jsx)(s.td,{}),(0,r.jsx)(s.td,{children:"ShapeMode (int) - Determines the Shape for the collision body"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Idx_Geometry"}),(0,r.jsx)(s.td,{}),(0,r.jsx)(s.td,{children:"For GeometryBBox or ConvexDecomposition modes, link to the model to use as the collision body."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Idx_Sphere"}),(0,r.jsx)(s.td,{}),(0,r.jsx)(s.td,{children:"vec4w - For Sphere mode, describes the relative centre point and radius (xyz, w = radius) of the collision body sphere"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Idx_BBox"}),(0,r.jsx)(s.td,{}),(0,r.jsx)(s.td,{children:"floatw[6] - For BBox mode, describes the relative min/max extents (0,1,2 = min xyz, 3,4,5 = max xyz) of the collision body bounding box"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Idx_Ray"}),(0,r.jsx)(s.td,{}),(0,r.jsx)(s.td,{children:"vec3w - For Ray/PenetratingRay modes, describes the relative direction of the ray (normalized vector)"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Idx_RayLength"}),(0,r.jsx)(s.td,{}),(0,r.jsx)(s.td,{children:"floatw - For Ray/PenetratingRay modes, specifies the length of the ray"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Idx_CollisionResponse"}),(0,r.jsx)(s.td,{}),(0,r.jsx)(s.td,{children:"bool - When enabled, collisions are reported and events dispatched"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Idx_Report"}),(0,r.jsx)(s.td,{}),(0,r.jsxs)(s.td,{children:["CollideReport](#enum-collidereport) (int) - Determines how a collision is reported between this object and one the collides with it ",(0,r.jsx)(s.a,{href:"#enum-collidetype",children:"CollideType"})," (int) - Determines what the object can collide with. The value stored as the 'Type' property is the concatenation of a 16bit collideGroup and a 16bit collideMask. When a collision is detected the collideGroup of the first object is AND'd against the collideMask of the other object if the result is not 0 then a collision pair is generated."]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Idx_Type"}),(0,r.jsx)(s.td,{}),(0,r.jsx)(s.td,{})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Idx_Visible"}),(0,r.jsx)(s.td,{}),(0,r.jsx)(s.td,{children:"bool - Enables debug drawing of simple wireframe collision shapes. Requires Collision/DebugDraw setting to be enabled."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Idx_CollideCount"}),(0,r.jsx)(s.td,{}),(0,r.jsx)(s.td,{children:"Internal."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Idx_Mass"}),(0,r.jsx)(s.td,{}),(0,r.jsx)(s.td,{children:"Reserved for future use."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Idx_Restitution"}),(0,r.jsx)(s.td,{}),(0,r.jsx)(s.td,{children:"Reserved for future use."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Idx_Friction"}),(0,r.jsx)(s.td,{}),(0,r.jsx)(s.td,{children:"Reserved for future use."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Idx_PrivateShape"}),(0,r.jsx)(s.td,{}),(0,r.jsx)(s.td,{children:"Internal."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Idx_CylindricalShape"}),(0,r.jsx)(s.td,{}),(0,r.jsx)(s.td,{children:"floatw[2] - For Cylinder/Capsule/Cone mode, describes the radius and height of the shape"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Idx_Offset"}),(0,r.jsx)(s.td,{}),(0,r.jsx)(s.td,{children:"positional offset for physics shapes"})]})]})]}),"\n",(0,r.jsx)(s.p,{children:"Property index."}),"\n",(0,r.jsx)(s.h3,{id:"enum-shapemode",children:"enum ShapeMode"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Enumerator"}),(0,r.jsx)(s.th,{children:"Value"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"MODE_GEOMETRY_BBOX"}),(0,r.jsx)(s.td,{}),(0,r.jsxs)(s.td,{children:["use the BBox property of the Geometry (Symbols - C: ",(0,r.jsx)(s.code,{children:'"ModeGeometryBBox"'}),", Lua: ",(0,r.jsx)(s.code,{children:"__Collision_ModeGeometryBBox"}),")"]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"MODE_BBOX"}),(0,r.jsx)(s.td,{}),(0,r.jsxs)(s.td,{children:["use the BBox property for the min/max bounds of a Box shape (Symbols - C: ",(0,r.jsx)(s.code,{children:'"ModeBBox"'}),", Lua: ",(0,r.jsx)(s.code,{children:"__Collision_ModeBBox"}),")"]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"MODE_SPHERE"}),(0,r.jsx)(s.td,{}),(0,r.jsxs)(s.td,{children:["Use the Sphere property for the position and radius of a sphere shape (Symbols - C: ",(0,r.jsx)(s.code,{children:'"ModeSphere"'}),", Lua: ",(0,r.jsx)(s.code,{children:"__Collision_ModeSphere"}),")"]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"MODE_VISUAL"}),(0,r.jsx)(s.td,{}),(0,r.jsxs)(s.td,{children:["uses the first sibling visual for the collision shape (Symbols - C: ",(0,r.jsx)(s.code,{children:'"ModeVisual"'}),", Lua: ",(0,r.jsx)(s.code,{children:"__Collision_ModeVisual"}),")"]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"MODE_RAY"}),(0,r.jsx)(s.td,{}),(0,r.jsxs)(s.td,{children:["Uses the Ray properties to define an axis and length for a ray, This ray stops at the first collision. (Symbols - C: ",(0,r.jsx)(s.code,{children:'"ModeRay"'}),", Lua: ",(0,r.jsx)(s.code,{children:"__Collision_ModeRay"}),")"]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"MODE_RAY_PENETRATING"}),(0,r.jsx)(s.td,{}),(0,r.jsxs)(s.td,{children:["Uses the Ray properties to define an axis and length for a ray, This ray goes on to its end. (Symbols - C: ",(0,r.jsx)(s.code,{children:'"ModePenetratingRay"'}),", Lua: ",(0,r.jsx)(s.code,{children:"__Collision_ModePenetratingRay"}),")"]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"MODE_GEOMETRY_CONVEX_DECOMPOSITION"}),(0,r.jsx)(s.td,{}),(0,r.jsxs)(s.td,{children:["Uses the Geometry property and constructs a convex hull decomposition from it (Symbols - C: ",(0,r.jsx)(s.code,{children:'"ModeGeometryConvexDecomposition"'}),", Lua: ",(0,r.jsx)(s.code,{children:"__Collision_ModeGeometryConvexDecomposition"}),")"]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"MODE_CYLINDER"}),(0,r.jsx)(s.td,{}),(0,r.jsx)(s.td,{})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"MODE_CAPSULE"}),(0,r.jsx)(s.td,{}),(0,r.jsx)(s.td,{})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"MODE_CONE"}),(0,r.jsx)(s.td,{}),(0,r.jsx)(s.td,{})]})]})]}),"\n",(0,r.jsx)(s.p,{children:"Values for Idx_Mode."}),"\n",(0,r.jsx)(s.h2,{id:"public-attributes-documentation",children:"Public Attributes Documentation"}),"\n",(0,r.jsx)(s.h3,{id:"group_camera",children:"GROUP_CAMERA"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-cpp",children:"static const int GROUP_CAMERA = VTBIT(13);\n"})}),"\n",(0,r.jsx)(s.p,{children:"defines a collision group for cameras"}),"\n",(0,r.jsx)(s.h3,{id:"group_default",children:"GROUP_DEFAULT"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-cpp",children:"static const int GROUP_DEFAULT = VTBIT(2);\n"})}),"\n",(0,r.jsx)(s.p,{children:"defines a standard collision group; DEFAULT objects collide with everything other than PICKING and PICKABLE objects"}),"\n",(0,r.jsx)(s.h3,{id:"group_helpers",children:"GROUP_HELPERS"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-cpp",children:"static const int GROUP_HELPERS = VTBIT(12);\n"})}),"\n",(0,r.jsx)(s.p,{children:"defines a collision group for immersive helpers that require collision with the avatar but with not the picking rays"}),"\n",(0,r.jsx)(s.h3,{id:"group_pickable",children:"GROUP_PICKABLE"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-cpp",children:"static const int GROUP_PICKABLE = VTBIT(1);\n"})}),"\n",(0,r.jsx)(s.p,{children:"defines a Mockup compatible collide group; PICKABLE objects only collide with PICKING objects"}),"\n",(0,r.jsx)(s.h3,{id:"group_picking",children:"GROUP_PICKING"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-cpp",children:"static const int GROUP_PICKING = VTBIT(0);\n"})}),"\n",(0,r.jsx)(s.p,{children:"defines a Mockup compatible collide group; PICKING objects only collide with PICKABLE objects"}),"\n",(0,r.jsx)(s.h3,{id:"group_system",children:"GROUP_SYSTEM"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-cpp",children:"static const int GROUP_SYSTEM = VTBIT(15);\n"})}),"\n",(0,r.jsx)(s.p,{children:"defines a collide group for the systems always on picking - Skinnies without a Fat sibling"}),"\n",(0,r.jsx)(s.h3,{id:"group_visual",children:"GROUP_VISUAL"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-cpp",children:"static const int GROUP_VISUAL = VTBIT(14);\n"})}),"\n",(0,r.jsx)(s.p,{children:"defines a collision group for Skinny bodies that have a Fat sibling - always the visual mesh"})]})}function a(e={}){const{wrapper:s}={...(0,d.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},28453:(e,s,i)=>{i.d(s,{R:()=>t,x:()=>l});var n=i(96540);const r={},d=n.createContext(r);function t(e){const s=n.useContext(d);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),n.createElement(d.Provider,{value:s},e.children)}}}]);
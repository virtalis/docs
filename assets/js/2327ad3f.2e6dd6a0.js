"use strict";(self.webpackChunkvirtalis_docs=self.webpackChunkvirtalis_docs||[]).push([[25615],{14407:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>d,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"visionary-render-programming/reference/c-api/definitions/flags","title":"Flags","description":"Flags that can be applied to some API operations.","source":"@site/docs/visionary-render-programming/reference/c-api/definitions/flags.mdx","sourceDirName":"visionary-render-programming/reference/c-api/definitions","slug":"/visionary-render-programming/reference/c-api/definitions/flags","permalink":"/visionary-render-programming/reference/c-api/definitions/flags","draft":false,"unlisted":false,"editUrl":"https://github.com/virtalis/docs/tree/master/docs/visionary-render-programming/reference/c-api/definitions/flags.mdx","tags":[],"version":"current","lastUpdatedAt":1730817102000,"frontMatter":{"title":"Flags","summary":"Flags that can be applied to some API operations."},"sidebar":"visionaryRenderProgrammingSidebar","previous":{"title":"Error Codes","permalink":"/visionary-render-programming/reference/c-api/definitions/error-codes"},"next":{"title":"Function Prototypes","permalink":"/visionary-render-programming/reference/c-api/definitions/function-prototypes"}}');var s=t(74848),r=t(28453);const d={title:"Flags",summary:"Flags that can be applied to some API operations."},a="Flags",o={},c=[{value:"Attributes",id:"attributes",level:2},{value:"Attributes Documentation",id:"attributes-documentation",level:2},{value:"FLAG_VALUE_BY_POST",id:"flag-value-by-post",level:3},{value:"METANODE_ADMIN",id:"metanode-admin",level:3},{value:"METANODE_CHILD_MAP",id:"metanode-child-map",level:3},{value:"METANODE_DEVELOPER_NO_SAVE",id:"metanode-developer-no-save",level:3},{value:"METANODE_NO_CLONE",id:"metanode-no-clone",level:3},{value:"METANODE_NO_GUI",id:"metanode-no-gui",level:3},{value:"METANODE_NO_HISTORY",id:"metanode-no-history",level:3},{value:"METANODE_NO_SAVE",id:"metanode-no-save",level:3},{value:"METANODE_NODE_SPY",id:"metanode-node-spy",level:3},{value:"METANODE_PROTECTED",id:"metanode-protected",level:3},{value:"METANODE_TRANSIENT",id:"metanode-transient",level:3},{value:"PROPERTY_INVALID_INDEX",id:"property-invalid-index",level:3}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"flags",children:"Flags"})}),"\n",(0,s.jsx)(n.p,{children:"Flags that can be applied to some API operations."}),"\n",(0,s.jsx)(n.h2,{id:"attributes",children:"Attributes"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Name"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"const uint32_t"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#flag-value-by-post",children:"FLAG_VALUE_BY_POST"})})," ",(0,s.jsx)("br",{}),"Specifies that the value being set should not be applied to the node until the next frame update. This is useful when trying to set properties in response to observer functions which would otherwise violate the observer pattern."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"const uint32_t"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#metanode-admin",children:"METANODE_ADMIN"})})," ",(0,s.jsx)("br",{}),"Indicates that the metanode should only be represented in the 2D drawing system when in developer admin mode."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"const uint32_t"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#metanode-child-map",children:"METANODE_CHILD_MAP"})})," ",(0,s.jsx)("br",{}),"Specifies that a metanode or specific node instance should use a map for its children (performance optimization for nodes with large numbers of children)"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"const uint32_t"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#metanode-developer-no-save",children:"METANODE_DEVELOPER_NO_SAVE"})})," ",(0,s.jsx)("br",{}),"Specifies that a metanode or specific node instance should not be saved anywhere, including special system-save operations."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"const uint32_t"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#metanode-no-clone",children:"METANODE_NO_CLONE"})})," ",(0,s.jsx)("br",{}),"Specifies that a metanode or specific node instance should not be copy-able by the application."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"const uint32_t"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#metanode-no-gui",children:"METANODE_NO_GUI"})})," ",(0,s.jsx)("br",{}),"Indicates that an application should not attempt to represent this node in whatever 2D drawing system it is using."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"const uint32_t"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#metanode-no-history",children:"METANODE_NO_HISTORY"})})," ",(0,s.jsx)("br",{}),"Specifies that a metanode or specific node instance should not be inserted into the undo/redo history."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"const uint32_t"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#metanode-no-save",children:"METANODE_NO_SAVE"})})," ",(0,s.jsx)("br",{}),"Specifies that a metanode or specific node instance should not be saved into a scene."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"const uint32_t"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#metanode-node-spy",children:"METANODE_NODE_SPY"})})," ",(0,s.jsx)("br",{}),"Specifies that a metanode or specific node instance should be treated as node-spy, which triggers its dirty flags when any of its descendants are modified."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"const uint32_t"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#metanode-protected",children:"METANODE_PROTECTED"})})," ",(0,s.jsx)("br",{}),"Specifies that a metanode or specific node instance is protected from all user and script operations that would affect its position in the tree (deleting, parenting, etc)"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"const uint32_t"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#metanode-transient",children:"METANODE_TRANSIENT"})})," ",(0,s.jsx)("br",{}),"Used for event MetaNodes and similar. Nodes of this MetaNode can be expected to be deleted shortly after their creation."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"const uint32_t"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#property-invalid-index",children:"PROPERTY_INVALID_INDEX"})})," ",(0,s.jsx)("br",{}),"Identifier of an invalid property index."]})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"attributes-documentation",children:"Attributes Documentation"}),"\n",(0,s.jsx)(n.h3,{id:"flag-value-by-post",children:"FLAG_VALUE_BY_POST"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"const uint32_t FLAG_VALUE_BY_POST = 1;\n"})}),"\n",(0,s.jsx)(n.p,{children:"Specifies that the value being set should not be applied to the node until the next frame update. This is useful when trying to set properties in response to observer functions which would otherwise violate the observer pattern."}),"\n",(0,s.jsx)(n.h3,{id:"metanode-admin",children:"METANODE_ADMIN"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"const uint32_t METANODE_ADMIN = (1 << 12);\n"})}),"\n",(0,s.jsx)(n.p,{children:"Indicates that the metanode should only be represented in the 2D drawing system when in developer admin mode."}),"\n",(0,s.jsx)(n.h3,{id:"metanode-child-map",children:"METANODE_CHILD_MAP"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"const uint32_t METANODE_CHILD_MAP = (1 << 11);\n"})}),"\n",(0,s.jsx)(n.p,{children:"Specifies that a metanode or specific node instance should use a map for its children (performance optimization for nodes with large numbers of children)"}),"\n",(0,s.jsx)(n.h3,{id:"metanode-developer-no-save",children:"METANODE_DEVELOPER_NO_SAVE"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"const uint32_t METANODE_DEVELOPER_NO_SAVE = (1 << 2);\n"})}),"\n",(0,s.jsx)(n.p,{children:"Specifies that a metanode or specific node instance should not be saved anywhere, including special system-save operations."}),"\n",(0,s.jsx)(n.h3,{id:"metanode-no-clone",children:"METANODE_NO_CLONE"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"const uint32_t METANODE_NO_CLONE = (1 << 0);\n"})}),"\n",(0,s.jsx)(n.p,{children:"Specifies that a metanode or specific node instance should not be copy-able by the application."}),"\n",(0,s.jsx)(n.h3,{id:"metanode-no-gui",children:"METANODE_NO_GUI"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"const uint32_t METANODE_NO_GUI = (1 << 10);\n"})}),"\n",(0,s.jsx)(n.p,{children:"Indicates that an application should not attempt to represent this node in whatever 2D drawing system it is using."}),"\n",(0,s.jsx)(n.h3,{id:"metanode-no-history",children:"METANODE_NO_HISTORY"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"const uint32_t METANODE_NO_HISTORY = (1 << 5);\n"})}),"\n",(0,s.jsx)(n.p,{children:"Specifies that a metanode or specific node instance should not be inserted into the undo/redo history."}),"\n",(0,s.jsx)(n.h3,{id:"metanode-no-save",children:"METANODE_NO_SAVE"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"const uint32_t METANODE_NO_SAVE = (1 << 1);\n"})}),"\n",(0,s.jsx)(n.p,{children:"Specifies that a metanode or specific node instance should not be saved into a scene."}),"\n",(0,s.jsx)(n.h3,{id:"metanode-node-spy",children:"METANODE_NODE_SPY"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"const uint32_t METANODE_NODE_SPY = (1 << 3);\n"})}),"\n",(0,s.jsx)(n.p,{children:"Specifies that a metanode or specific node instance should be treated as node-spy, which triggers its dirty flags when any of its descendants are modified."}),"\n",(0,s.jsx)(n.h3,{id:"metanode-protected",children:"METANODE_PROTECTED"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"const uint32_t METANODE_PROTECTED = (1 << 4);\n"})}),"\n",(0,s.jsx)(n.p,{children:"Specifies that a metanode or specific node instance is protected from all user and script operations that would affect its position in the tree (deleting, parenting, etc)"}),"\n",(0,s.jsx)(n.h3,{id:"metanode-transient",children:"METANODE_TRANSIENT"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"const uint32_t METANODE_TRANSIENT = (1 << 6);\n"})}),"\n",(0,s.jsx)(n.p,{children:"Used for event MetaNodes and similar. Nodes of this MetaNode can be expected to be deleted shortly after their creation."}),"\n",(0,s.jsx)(n.h3,{id:"property-invalid-index",children:"PROPERTY_INVALID_INDEX"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"const uint32_t PROPERTY_INVALID_INDEX = 0xFFFFFFFF;\n"})}),"\n",(0,s.jsx)(n.p,{children:"Identifier of an invalid property index."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>a});var i=t(96540);const s={},r=i.createContext(s);function d(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);
"use strict";(self.webpackChunkvirtalis_docs=self.webpackChunkvirtalis_docs||[]).push([[991],{28306:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>o,frontMatter:()=>t,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"visionary-render-programming/reference/c-api/modules/ffi","title":"Foreign Function Interface","description":"Functions for interacting with the scripting engine inside VRTree.","source":"@site/docs/visionary-render-programming/reference/c-api/modules/ffi.mdx","sourceDirName":"visionary-render-programming/reference/c-api/modules","slug":"/visionary-render-programming/reference/c-api/modules/ffi","permalink":"/visionary-render-programming/reference/c-api/modules/ffi","draft":false,"unlisted":false,"editUrl":"https://github.com/virtalis/docs/tree/master/docs/visionary-render-programming/reference/c-api/modules/ffi.mdx","tags":[],"version":"current","lastUpdatedAt":1730817102000,"frontMatter":{"title":"Foreign Function Interface","summary":"Functions for interacting with the scripting engine inside VRTree."},"sidebar":"visionaryRenderProgrammingSidebar","previous":{"title":"Core","permalink":"/visionary-render-programming/reference/c-api/modules/core"},"next":{"title":"Settings","permalink":"/visionary-render-programming/reference/c-api/modules/settings"}}');var s=r(74848),a=r(28453);const t={title:"Foreign Function Interface",summary:"Functions for interacting with the scripting engine inside VRTree."},l="Foreign Function Interface",d={},c=[{value:"Functions",id:"functions",level:2},{value:"Functions Documentation",id:"functions-documentation",level:2},{value:"VRFFIFree",id:"vrffifree",level:3},{value:"VRFFIGetAABB",id:"vrffigetaabb",level:3},{value:"VRFFIGetBool",id:"vrffigetbool",level:3},{value:"VRFFIGetDouble",id:"vrffigetdouble",level:3},{value:"VRFFIGetEventRegister",id:"vrffigeteventregister",level:3},{value:"VRFFIGetInt",id:"vrffigetint",level:3},{value:"VRFFIGetMat3",id:"vrffigetmat3",level:3},{value:"VRFFIGetMat4",id:"vrffigetmat4",level:3},{value:"VRFFIGetNode",id:"vrffigetnode",level:3},{value:"VRFFIGetPlane",id:"vrffigetplane",level:3},{value:"VRFFIGetQuat",id:"vrffigetquat",level:3},{value:"VRFFIGetRay",id:"vrffigetray",level:3},{value:"VRFFIGetSphere",id:"vrffigetsphere",level:3},{value:"VRFFIGetString",id:"vrffigetstring",level:3},{value:"VRFFIGetType",id:"vrffigettype",level:3},{value:"VRFFIGetVec2",id:"vrffigetvec2",level:3},{value:"VRFFIGetVec3",id:"vrffigetvec3",level:3},{value:"VRFFIGetVec4",id:"vrffigetvec4",level:3},{value:"VRFFIInvoke",id:"vrffiinvoke",level:3},{value:"VRFFIMakeAABB",id:"vrffimakeaabb",level:3},{value:"VRFFIMakeBool",id:"vrffimakebool",level:3},{value:"VRFFIMakeDouble",id:"vrffimakedouble",level:3},{value:"VRFFIMakeInt",id:"vrffimakeint",level:3},{value:"VRFFIMakeMat3",id:"vrffimakemat3",level:3},{value:"VRFFIMakeMat4",id:"vrffimakemat4",level:3},{value:"VRFFIMakeNode",id:"vrffimakenode",level:3},{value:"VRFFIMakePlane",id:"vrffimakeplane",level:3},{value:"VRFFIMakeQuat",id:"vrffimakequat",level:3},{value:"VRFFIMakeRay",id:"vrffimakeray",level:3},{value:"VRFFIMakeSphere",id:"vrffimakesphere",level:3},{value:"VRFFIMakeString",id:"vrffimakestring",level:3},{value:"VRFFIMakeVec2",id:"vrffimakevec2",level:3},{value:"VRFFIMakeVec3",id:"vrffimakevec3",level:3},{value:"VRFFIMakeVec4",id:"vrffimakevec4",level:3},{value:"VRFFIRegister",id:"vrffiregister",level:3},{value:"VRFFIUnregister",id:"vrffiunregister",level:3},{value:"VRRegisterEventFunction",id:"vrregistereventfunction",level:3},{value:"VRUnregisterEventFunction",id:"vrunregistereventfunction",level:3}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"foreign-function-interface",children:"Foreign Function Interface"})}),"\n",(0,s.jsx)(n.p,{children:"Functions for interacting with the scripting engine inside VRTree."}),"\n",(0,s.jsx)(n.h2,{id:"functions",children:"Functions"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Name"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"void"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#vrffifree",children:"VRFFIFree"})}),"(",(0,s.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hffivar",children:"HFFIVar"})," var)",(0,s.jsx)("br",{}),"Deletes the memory allocated for this FFI variable and closes the handle."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"const double *"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#vrffigetaabb",children:"VRFFIGetAABB"})}),"(",(0,s.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hffivar",children:"HFFIVar"})," var)",(0,s.jsx)("br",{}),"Reads the AABB contained in the FFI variable and returns it."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"char"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#vrffigetbool",children:"VRFFIGetBool"})}),"(",(0,s.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hffivar",children:"HFFIVar"})," var)",(0,s.jsx)("br",{}),"Reads the boolean value contained in the FFI variable and returns it."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"double"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#vrffigetdouble",children:"VRFFIGetDouble"})}),"(",(0,s.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hffivar",children:"HFFIVar"})," var)",(0,s.jsx)("br",{}),"Reads the double value contained in the FFI variable and returns it."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hffivar",children:"HFFIVar"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#vrffigeteventregister",children:"VRFFIGetEventRegister"})}),"(const char * registerName)",(0,s.jsx)("br",{}),"Reads the value from an event register during a call to a registered event function. These are the equivalent to the values provided to an event script such as __Self and __Other."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"int"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#vrffigetint",children:"VRFFIGetInt"})}),"(",(0,s.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hffivar",children:"HFFIVar"})," var)",(0,s.jsx)("br",{}),"Reads the integer value contained in the FFI variable and returns it."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"const double *"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#vrffigetmat3",children:"VRFFIGetMat3"})}),"(",(0,s.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hffivar",children:"HFFIVar"})," var)",(0,s.jsx)("br",{}),"Reads the mat3 contained in the FFI variable and returns it."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"const double *"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#vrffigetmat4",children:"VRFFIGetMat4"})}),"(",(0,s.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hffivar",children:"HFFIVar"})," var)",(0,s.jsx)("br",{}),"Reads the mat4 contained in the FFI variable and returns it."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#vrffigetnode",children:"VRFFIGetNode"})}),"(",(0,s.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hffivar",children:"HFFIVar"})," var)",(0,s.jsx)("br",{}),"Reads the node contained in the FFI variable and returns a new handle to it."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"const double *"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#vrffigetplane",children:"VRFFIGetPlane"})}),"(",(0,s.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hffivar",children:"HFFIVar"})," var)",(0,s.jsx)("br",{}),"Reads the plane contained in the FFI variable and returns it."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"const double *"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#vrffigetquat",children:"VRFFIGetQuat"})}),"(",(0,s.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hffivar",children:"HFFIVar"})," var)",(0,s.jsx)("br",{}),"Reads the quaternion contained in the FFI variable and returns it."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"const double *"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#vrffigetray",children:"VRFFIGetRay"})}),"(",(0,s.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hffivar",children:"HFFIVar"})," var)",(0,s.jsx)("br",{}),"Reads the ray contained in the FFI variable and returns it."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"const double *"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#vrffigetsphere",children:"VRFFIGetSphere"})}),"(",(0,s.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hffivar",children:"HFFIVar"})," var)",(0,s.jsx)("br",{}),"Reads the sphere contained in the FFI variable and returns it."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"const char *"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#vrffigetstring",children:"VRFFIGetString"})}),"(",(0,s.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hffivar",children:"HFFIVar"})," var)",(0,s.jsx)("br",{}),"Reads the string value contained in the FFI variable and returns it."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"int"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#vrffigettype",children:"VRFFIGetType"})}),"(",(0,s.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hffivar",children:"HFFIVar"})," var)",(0,s.jsx)("br",{}),"Identifies the type of variable."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"const double *"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#vrffigetvec2",children:"VRFFIGetVec2"})}),"(",(0,s.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hffivar",children:"HFFIVar"})," var)",(0,s.jsx)("br",{}),"Reads the vec2 contained in the FFI variable and returns it."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"const double *"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#vrffigetvec3",children:"VRFFIGetVec3"})}),"(",(0,s.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hffivar",children:"HFFIVar"})," var)",(0,s.jsx)("br",{}),"Reads the vec3 contained in the FFI variable and returns it."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"const double *"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#vrffigetvec4",children:"VRFFIGetVec4"})}),"(",(0,s.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hffivar",children:"HFFIVar"})," var)",(0,s.jsx)("br",{}),"Reads the vec4 contained in the FFI variable and returns it."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hffivar",children:"HFFIVar"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#vrffiinvoke",children:"VRFFIInvoke"})}),"(const char * func, ",(0,s.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hffivar",children:"HFFIVar"})," * args, int nArgs)",(0,s.jsx)("br",{}),"Calls a named function in the scripting environment."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hffivar",children:"HFFIVar"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#vrffimakeaabb",children:"VRFFIMakeAABB"})}),"(const double * values)",(0,s.jsx)("br",{}),"Creates an AABB (6 doubles in an array)"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hffivar",children:"HFFIVar"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#vrffimakebool",children:"VRFFIMakeBool"})}),"(char value)",(0,s.jsx)("br",{}),"Creates a boolean FFI variable and returns it."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hffivar",children:"HFFIVar"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#vrffimakedouble",children:"VRFFIMakeDouble"})}),"(double value)",(0,s.jsx)("br",{}),"Creates a number FFI variable and returns it."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hffivar",children:"HFFIVar"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#vrffimakeint",children:"VRFFIMakeInt"})}),"(int value)",(0,s.jsx)("br",{}),"Creates a number FFI variable and returns it."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hffivar",children:"HFFIVar"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#vrffimakemat3",children:"VRFFIMakeMat3"})}),"(const double * values)",(0,s.jsx)("br",{}),"Creates a mat3 (9 doubles in an array)"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hffivar",children:"HFFIVar"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#vrffimakemat4",children:"VRFFIMakeMat4"})}),"(const double * values)",(0,s.jsx)("br",{}),"Creates a mat4 (16 doubles in an array)"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hffivar",children:"HFFIVar"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#vrffimakenode",children:"VRFFIMakeNode"})}),"(",(0,s.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})," handle)",(0,s.jsx)("br",{}),"Wraps a node handle in an FFI variable."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hffivar",children:"HFFIVar"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#vrffimakeplane",children:"VRFFIMakePlane"})}),"(const double * values)",(0,s.jsx)("br",{}),"Creates a plane (4 doubles in an array)"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hffivar",children:"HFFIVar"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#vrffimakequat",children:"VRFFIMakeQuat"})}),"(const double * values)",(0,s.jsx)("br",{}),"Creates a quaternion (4 doubles in an array)"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hffivar",children:"HFFIVar"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#vrffimakeray",children:"VRFFIMakeRay"})}),"(const double * values)",(0,s.jsx)("br",{}),"Creates a ray (6 doubles in an array)"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hffivar",children:"HFFIVar"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#vrffimakesphere",children:"VRFFIMakeSphere"})}),"(const double * values)",(0,s.jsx)("br",{}),"Creates a sphere (4 doubles in an array)"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hffivar",children:"HFFIVar"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#vrffimakestring",children:"VRFFIMakeString"})}),"(const char * value)",(0,s.jsx)("br",{}),"Creates a string FFI variable and returns it."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hffivar",children:"HFFIVar"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#vrffimakevec2",children:"VRFFIMakeVec2"})}),"(const double * values)",(0,s.jsx)("br",{}),"Creates a vec2 (2 doubles in an array)"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hffivar",children:"HFFIVar"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#vrffimakevec3",children:"VRFFIMakeVec3"})}),"(const double * values)",(0,s.jsx)("br",{}),"Creates a vec3 (3 doubles in an array)"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hffivar",children:"HFFIVar"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#vrffimakevec4",children:"VRFFIMakeVec4"})}),"(const double * values)",(0,s.jsx)("br",{}),"Creates a vec4 (4 doubles in an array)"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"int"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#vrffiregister",children:"VRFFIRegister"})}),"(const char * funcName, ",(0,s.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/function-prototypes#typedef-ffifunc",children:"FFIFunc"})," func, int minArgc, void * userData)",(0,s.jsx)("br",{}),"Registers a function as a global Lua function in the main script environment. This function becomes a first-class Lua function callable by any Lua code in events or other plugins."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"int"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#vrffiunregister",children:"VRFFIUnregister"})}),"(const char * funcName, ",(0,s.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/function-prototypes#typedef-ffifunc",children:"FFIFunc"})," func)",(0,s.jsx)("br",{}),"Unregisters a previously registered FFIFunc."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"void"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#vrregistereventfunction",children:"VRRegisterEventFunction"})}),"(const char * name, ",(0,s.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/function-prototypes#typedef-scripteventfunc",children:"ScriptEventFunc"})," func, void * userData)",(0,s.jsx)("br",{}),"Registers a C function with a name which can then be used to call the function in direct response to an Event (e.g. Create, Activate, Timestep, etc)"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"void"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#vrunregistereventfunction",children:"VRUnregisterEventFunction"})}),"(const char * name)",(0,s.jsx)("br",{}),"Unregisters a previously registered event function."]})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"functions-documentation",children:"Functions Documentation"}),"\n",(0,s.jsx)(n.h3,{id:"vrffifree",children:"VRFFIFree"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"void VRFFIFree(\r\n    HFFIVar var\r\n)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Deletes the memory allocated for this FFI variable and closes the handle."}),"\n",(0,s.jsx)(n.h3,{id:"vrffigetaabb",children:"VRFFIGetAABB"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"const double * VRFFIGetAABB(\r\n    HFFIVar var\r\n)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Reads the AABB contained in the FFI variable and returns it."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"var"})," FFI variant handle, must be of type AABB"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Return"}),": pointer to array of 6 doubles containing the values (min xyz, max xyz)"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Warning"}),": the return value is only valid until the next call to ",(0,s.jsx)(n.a,{href:"#vrffigetaabb",children:"VRFFIGetAABB"})," with ANY HFFIVar."]}),"\n",(0,s.jsx)(n.h3,{id:"vrffigetbool",children:"VRFFIGetBool"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"char VRFFIGetBool(\r\n    HFFIVar var\r\n)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Reads the boolean value contained in the FFI variable and returns it."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"var"})," FFI variant handle, must be of type Bool"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Return"}),": 0 if false, 1 if true"]}),"\n",(0,s.jsx)(n.h3,{id:"vrffigetdouble",children:"VRFFIGetDouble"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"double VRFFIGetDouble(\r\n    HFFIVar var\r\n)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Reads the double value contained in the FFI variable and returns it."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"var"})," FFI variant handle, must be of type Double"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Return"}),": double value"]}),"\n",(0,s.jsx)(n.h3,{id:"vrffigeteventregister",children:"VRFFIGetEventRegister"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"HFFIVar VRFFIGetEventRegister(\r\n    const char * registerName\r\n)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Reads the value from an event register during a call to a registered event function. These are the equivalent to the values provided to an event script such as __Self and __Other."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"registerName"})," the register to get the value from"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Return"}),": a new FFI variant handle representing the value"]}),"\n",(0,s.jsx)(n.h3,{id:"vrffigetint",children:"VRFFIGetInt"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"int VRFFIGetInt(\r\n    HFFIVar var\r\n)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Reads the integer value contained in the FFI variable and returns it."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"var"})," FFI variant handle, must be of type Int"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Return"}),": integer value"]}),"\n",(0,s.jsx)(n.h3,{id:"vrffigetmat3",children:"VRFFIGetMat3"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"const double * VRFFIGetMat3(\r\n    HFFIVar var\r\n)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Reads the mat3 contained in the FFI variable and returns it."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"var"})," FFI variant handle, must be of type Mat3"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Return"}),": pointer to array of 9 doubles containing the values."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Warning"}),": the return value is only valid until the next call to ",(0,s.jsx)(n.a,{href:"#vrffigetmat3",children:"VRFFIGetMat3"})," with ANY HFFIVar."]}),"\n",(0,s.jsx)(n.h3,{id:"vrffigetmat4",children:"VRFFIGetMat4"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"const double * VRFFIGetMat4(\r\n    HFFIVar var\r\n)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Reads the mat4 contained in the FFI variable and returns it."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"var"})," FFI variant handle, must be of type Mat4"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Return"}),": pointer to array of 16 doubles containing the values."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Warning"}),": the return value is only valid until the next call to ",(0,s.jsx)(n.a,{href:"#vrffigetmat4",children:"VRFFIGetMat4"})," with ANY HFFIVar."]}),"\n",(0,s.jsx)(n.h3,{id:"vrffigetnode",children:"VRFFIGetNode"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"HNode VRFFIGetNode(\r\n    HFFIVar var\r\n)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Reads the node contained in the FFI variable and returns a new handle to it."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"var"})," FFI variant handle, must be of type Node"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"See"}),": ",(0,s.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/modules/core#vrclosenodehandle",children:"VRCloseNodeHandle"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Return"}),": new node handle to the node contained in the var"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Note"}),": the FFI var need not remain valid in order for the returned node handle to remain open."]}),"\n",(0,s.jsx)(n.h3,{id:"vrffigetplane",children:"VRFFIGetPlane"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"const double * VRFFIGetPlane(\r\n    HFFIVar var\r\n)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Reads the plane contained in the FFI variable and returns it."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"var"})," FFI variant handle, must be of type Plane"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Return"}),": pointer to array of 4 doubles containing the values (normal xyz, distance)"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Warning"}),": the return value is only valid until the next call to ",(0,s.jsx)(n.a,{href:"#vrffigetplane",children:"VRFFIGetPlane"})," with ANY HFFIVar."]}),"\n",(0,s.jsx)(n.h3,{id:"vrffigetquat",children:"VRFFIGetQuat"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"const double * VRFFIGetQuat(\r\n    HFFIVar var\r\n)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Reads the quaternion contained in the FFI variable and returns it."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"var"})," FFI variant handle, must be of type Quat"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Return"}),": pointer to array of 4 doubles containing the values (vector xyz, angle)"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Warning"}),": the return value is only valid until the next call to ",(0,s.jsx)(n.a,{href:"#vrffigetquat",children:"VRFFIGetQuat"})," with ANY HFFIVar."]}),"\n",(0,s.jsx)(n.h3,{id:"vrffigetray",children:"VRFFIGetRay"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"const double * VRFFIGetRay(\r\n    HFFIVar var\r\n)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Reads the ray contained in the FFI variable and returns it."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"var"})," FFI variant handle, must be of type Ray"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Return"}),": pointer to array of 6 doubles containing the values (origin xyz, direction xyz)"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Warning"}),": the return value is only valid until the next call to ",(0,s.jsx)(n.a,{href:"#vrffigetray",children:"VRFFIGetRay"})," with ANY HFFIVar."]}),"\n",(0,s.jsx)(n.h3,{id:"vrffigetsphere",children:"VRFFIGetSphere"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"const double * VRFFIGetSphere(\r\n    HFFIVar var\r\n)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Reads the sphere contained in the FFI variable and returns it."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"var"})," FFI variant handle, must be of type Sphere"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Return"}),": pointer to array of 4 doubles containing the values (centre xyz, radius)"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Warning"}),": the return value is only valid until the next call to ",(0,s.jsx)(n.a,{href:"#vrffigetsphere",children:"VRFFIGetSphere"})," with ANY HFFIVar."]}),"\n",(0,s.jsx)(n.h3,{id:"vrffigetstring",children:"VRFFIGetString"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"const char * VRFFIGetString(\r\n    HFFIVar var\r\n)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Reads the string value contained in the FFI variable and returns it."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"var"})," FFI variant handle, must be of type String"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Return"}),": null terminated string, may be UTF-8 encoded."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Warning"}),": the return value is only valid for the lifetime of the FFI variant. Using this string pointer after calling ",(0,s.jsx)(n.a,{href:"#vrffifree",children:"VRFFIFree"})," on this var, without first copying it, will result in undefined behaviour."]}),"\n",(0,s.jsx)(n.h3,{id:"vrffigettype",children:"VRFFIGetType"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"int VRFFIGetType(\r\n    HFFIVar var\r\n)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Identifies the type of variable."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"var"})," FFI variant handle"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Return"}),": the type of the variable (direct enum conversion)"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Note"}),": due to the return value being based on an enum, the representation may change between API versions. Thus, it is recommended to only use this compare types against other variants."]}),"\n",(0,s.jsx)(n.h3,{id:"vrffigetvec2",children:"VRFFIGetVec2"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"const double * VRFFIGetVec2(\r\n    HFFIVar var\r\n)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Reads the vec2 contained in the FFI variable and returns it."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"var"})," FFI variant handle, must be of type Vec2"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Return"}),": pointer to array of 2 doubles containing the values."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Warning"}),": the return value is only valid until the next call to ",(0,s.jsx)(n.a,{href:"#vrffigetvec2",children:"VRFFIGetVec2"})," with ANY HFFIVar."]}),"\n",(0,s.jsx)(n.h3,{id:"vrffigetvec3",children:"VRFFIGetVec3"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"const double * VRFFIGetVec3(\r\n    HFFIVar var\r\n)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Reads the vec3 contained in the FFI variable and returns it."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"var"})," FFI variant handle, must be of type Vec3"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Return"}),": pointer to array of 3 doubles containing the values."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Warning"}),": the return value is only valid until the next call to ",(0,s.jsx)(n.a,{href:"#vrffigetvec3",children:"VRFFIGetVec3"})," with ANY HFFIVar."]}),"\n",(0,s.jsx)(n.h3,{id:"vrffigetvec4",children:"VRFFIGetVec4"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"const double * VRFFIGetVec4(\r\n    HFFIVar var\r\n)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Reads the vec4 contained in the FFI variable and returns it."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"var"})," FFI variant handle, must be of type Vec4"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Return"}),": pointer to array of 4 doubles containing the values."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Warning"}),": the return value is only valid until the next call to ",(0,s.jsx)(n.a,{href:"#vrffigetvec4",children:"VRFFIGetVec4"})," with ANY HFFIVar."]}),"\n",(0,s.jsx)(n.h3,{id:"vrffiinvoke",children:"VRFFIInvoke"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"HFFIVar VRFFIInvoke(\r\n    const char * func,\r\n    HFFIVar * args,\r\n    int nArgs\r\n)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Calls a named function in the scripting environment."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"func"})," The name of the method to call"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"args"})," Array of HFFIVar handles representing the function parameters (pushed in array order). The array may contain null entries, in which case a nil variant will be substituted for the call."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"nArgs"})," number of arguments in the args array"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Return"}),": a new variant handle containing the return value from the function. This will need to be ",(0,s.jsx)(n.a,{href:"#vrffifree",children:"VRFFIFree"}),"'d after use."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Note"}),": this function, being C, is limited to returning only one value, so calling a FFI function that returns multiple values will only return the first value returned by the FFI function. The rest of the return values are currently discarded."]}),"\n",(0,s.jsx)(n.h3,{id:"vrffimakeaabb",children:"VRFFIMakeAABB"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"HFFIVar VRFFIMakeAABB(\r\n    const double * values\r\n)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Creates an AABB (6 doubles in an array)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"values"})," to wrap in the variant. expects an array of 6 doubles (min xyz, max xyz)"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"See"}),": ",(0,s.jsx)(n.a,{href:"#vrffifree",children:"VRFFIFree(HFFIVar)"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Return"}),": a new FFI variant handle representing the value"]}),"\n",(0,s.jsx)(n.h3,{id:"vrffimakebool",children:"VRFFIMakeBool"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"HFFIVar VRFFIMakeBool(\r\n    char value\r\n)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Creates a boolean FFI variable and returns it."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"value"})," the value to wrap in the variant. any value other than zero results in a true boolean value."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"See"}),": ",(0,s.jsx)(n.a,{href:"#vrffifree",children:"VRFFIFree(HFFIVar)"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Return"}),": a new FFI variant handle representing the value"]}),"\n",(0,s.jsx)(n.h3,{id:"vrffimakedouble",children:"VRFFIMakeDouble"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"HFFIVar VRFFIMakeDouble(\r\n    double value\r\n)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Creates a number FFI variable and returns it."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"value"})," the value to wrap in the variant."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"See"}),": ",(0,s.jsx)(n.a,{href:"#vrffifree",children:"VRFFIFree(HFFIVar)"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Return"}),": a new FFI variant handle representing the value"]}),"\n",(0,s.jsx)(n.h3,{id:"vrffimakeint",children:"VRFFIMakeInt"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"HFFIVar VRFFIMakeInt(\r\n    int value\r\n)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Creates a number FFI variable and returns it."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"value"})," the value to wrap in the variant."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"See"}),": ",(0,s.jsx)(n.a,{href:"#vrffifree",children:"VRFFIFree(HFFIVar)"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Return"}),": a new FFI variant handle representing the value"]}),"\n",(0,s.jsx)(n.h3,{id:"vrffimakemat3",children:"VRFFIMakeMat3"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"HFFIVar VRFFIMakeMat3(\r\n    const double * values\r\n)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Creates a mat3 (9 doubles in an array)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"values"})," to wrap in the variant. expects an array of 9 doubles."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"See"}),": ",(0,s.jsx)(n.a,{href:"#vrffifree",children:"VRFFIFree(HFFIVar)"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Return"}),": a new FFI variant handle representing the value"]}),"\n",(0,s.jsx)(n.h3,{id:"vrffimakemat4",children:"VRFFIMakeMat4"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"HFFIVar VRFFIMakeMat4(\r\n    const double * values\r\n)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Creates a mat4 (16 doubles in an array)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"values"})," to wrap in the variant. expects an array of 16 doubles."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"See"}),": ",(0,s.jsx)(n.a,{href:"#vrffifree",children:"VRFFIFree(HFFIVar)"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Return"}),": a new FFI variant handle representing the value"]}),"\n",(0,s.jsx)(n.h3,{id:"vrffimakenode",children:"VRFFIMakeNode"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"HFFIVar VRFFIMakeNode(\r\n    HNode handle\r\n)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Wraps a node handle in an FFI variable."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"handle"})," valid node handle"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"See"}),": ",(0,s.jsx)(n.a,{href:"#vrffifree",children:"VRFFIFree(HFFIVar)"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Return"}),": a new FFI variant handle representing the node"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Note"}),": The node handle need not remain open in order for the returned var to remain valid."]}),"\n",(0,s.jsx)(n.h3,{id:"vrffimakeplane",children:"VRFFIMakePlane"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"HFFIVar VRFFIMakePlane(\r\n    const double * values\r\n)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Creates a plane (4 doubles in an array)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"values"})," to wrap in the variant. expects an array of 4 doubles (normal xyz, distance)"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"See"}),": ",(0,s.jsx)(n.a,{href:"#vrffifree",children:"VRFFIFree(HFFIVar)"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Return"}),": a new FFI variant handle representing the value"]}),"\n",(0,s.jsx)(n.h3,{id:"vrffimakequat",children:"VRFFIMakeQuat"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"HFFIVar VRFFIMakeQuat(\r\n    const double * values\r\n)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Creates a quaternion (4 doubles in an array)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"values"})," to wrap in the variant. expects an array of 4 doubles (vector xyz, angle)"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"See"}),": ",(0,s.jsx)(n.a,{href:"#vrffifree",children:"VRFFIFree(HFFIVar)"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Return"}),": a new FFI variant handle representing the value"]}),"\n",(0,s.jsx)(n.h3,{id:"vrffimakeray",children:"VRFFIMakeRay"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"HFFIVar VRFFIMakeRay(\r\n    const double * values\r\n)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Creates a ray (6 doubles in an array)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"values"})," to wrap in the variant. expects an array of 6 doubles (origin xyz, direction xyz)"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"See"}),": ",(0,s.jsx)(n.a,{href:"#vrffifree",children:"VRFFIFree(HFFIVar)"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Return"}),": a new FFI variant handle representing the value"]}),"\n",(0,s.jsx)(n.h3,{id:"vrffimakesphere",children:"VRFFIMakeSphere"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"HFFIVar VRFFIMakeSphere(\r\n    const double * values\r\n)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Creates a sphere (4 doubles in an array)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"values"})," to wrap in the variant. expects an array of 4 doubles (centre xyz, radius)"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"See"}),": ",(0,s.jsx)(n.a,{href:"#vrffifree",children:"VRFFIFree(HFFIVar)"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Return"}),": a new FFI variant handle representing the value"]}),"\n",(0,s.jsx)(n.h3,{id:"vrffimakestring",children:"VRFFIMakeString"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"HFFIVar VRFFIMakeString(\r\n    const char * value\r\n)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Creates a string FFI variable and returns it."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"value"})," the value to wrap in the variant."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"See"}),": ",(0,s.jsx)(n.a,{href:"#vrffifree",children:"VRFFIFree(HFFIVar)"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Return"}),": a new FFI variant handle representing the value"]}),"\n",(0,s.jsx)(n.h3,{id:"vrffimakevec2",children:"VRFFIMakeVec2"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"HFFIVar VRFFIMakeVec2(\r\n    const double * values\r\n)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Creates a vec2 (2 doubles in an array)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"values"})," to wrap in the variant. expects an array of 2 doubles."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"See"}),": ",(0,s.jsx)(n.a,{href:"#vrffifree",children:"VRFFIFree(HFFIVar)"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Return"}),": a new FFI variant handle representing the value"]}),"\n",(0,s.jsx)(n.h3,{id:"vrffimakevec3",children:"VRFFIMakeVec3"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"HFFIVar VRFFIMakeVec3(\r\n    const double * values\r\n)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Creates a vec3 (3 doubles in an array)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"values"})," to wrap in the variant. expects an array of 3 doubles."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"See"}),": ",(0,s.jsx)(n.a,{href:"#vrffifree",children:"VRFFIFree(HFFIVar)"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Return"}),": a new FFI variant handle representing the value"]}),"\n",(0,s.jsx)(n.h3,{id:"vrffimakevec4",children:"VRFFIMakeVec4"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"HFFIVar VRFFIMakeVec4(\r\n    const double * values\r\n)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Creates a vec4 (4 doubles in an array)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"values"})," to wrap in the variant. expects an array of 4 doubles."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"See"}),": ",(0,s.jsx)(n.a,{href:"#vrffifree",children:"VRFFIFree(HFFIVar)"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Return"}),": a new FFI variant handle representing the value"]}),"\n",(0,s.jsx)(n.h3,{id:"vrffiregister",children:"VRFFIRegister"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"int VRFFIRegister(\r\n    const char * funcName,\r\n    FFIFunc func,\r\n    int minArgc,\r\n    void * userData\r\n)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Registers a function as a global Lua function in the main script environment. This function becomes a first-class Lua function callable by any Lua code in events or other plugins."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"funcName"})," The name of the function as it should appear in the Lua state"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"func"})," The function to call when invoked from the Lua state"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"minArgc"})," minimuim number of arguments expected"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"userData"})," Userdata which is passed back to func when it is invoked."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Return"}),": 0 if successful, non-zero if a function with this name already exists."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Note"}),": currently you can only register functions in the global scope, and only if they don't already exist."]}),"\n",(0,s.jsx)(n.h3,{id:"vrffiunregister",children:"VRFFIUnregister"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"int VRFFIUnregister(\r\n    const char * funcName,\r\n    FFIFunc func\r\n)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Unregisters a previously registered FFIFunc."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Return"}),": 0 if successful"]}),"\n",(0,s.jsx)(n.h3,{id:"vrregistereventfunction",children:"VRRegisterEventFunction"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"void VRRegisterEventFunction(\r\n    const char * name,\r\n    ScriptEventFunc func,\r\n    void * userData\r\n)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Registers a C function with a name which can then be used to call the function in direct response to an Event (e.g. Create, Activate, Timestep, etc)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"name"})," The name with which to register the function."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"func"})," The function to register"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"userData"})," arbitrary data to pass to the callback"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"See"}),": ",(0,s.jsx)(n.a,{href:"#vrunregistereventfunction",children:"VRUnregisterEventFunction(const char*)"})]}),"\n",(0,s.jsx)(n.h3,{id:"vrunregistereventfunction",children:"VRUnregisterEventFunction"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"void VRUnregisterEventFunction(\r\n    const char * name\r\n)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Unregisters a previously registered event function."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"name"})," the name of the function to unregister (as it was registered)."]}),"\n"]})]})}function o(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>l});var i=r(96540);const s={},a=i.createContext(s);function t(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);
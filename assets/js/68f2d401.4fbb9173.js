"use strict";(self.webpackChunkvirtalis_docs=self.webpackChunkvirtalis_docs||[]).push([[50452],{89666:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>t,metadata:()=>s,toc:()=>h});const s=JSON.parse('{"id":"visionary-render-programming/reference/c-api/modules/nodes/tree","title":"Tree","description":"Module: Nodes","source":"@site/docs/visionary-render-programming/reference/c-api/modules/nodes/tree.mdx","sourceDirName":"visionary-render-programming/reference/c-api/modules/nodes","slug":"/visionary-render-programming/reference/c-api/modules/nodes/tree","permalink":"/visionary-render-programming/reference/c-api/modules/nodes/tree","draft":false,"unlisted":false,"editUrl":"https://github.com/virtalis/docs/tree/master/docs/visionary-render-programming/reference/c-api/modules/nodes/tree.mdx","tags":[],"version":"current","lastUpdatedAt":1730817102000,"frontMatter":{"title":"Tree","summary":"Functions for operating on the node structure of the VR Tree."},"sidebar":"visionaryRenderProgrammingSidebar","previous":{"title":"Properties","permalink":"/visionary-render-programming/reference/c-api/modules/nodes/properties"},"next":{"title":"Plugins","permalink":"/visionary-render-programming/reference/c-api/modules/plugins/"}}');var d=r(74848),i=r(28453);const t={title:"Tree",summary:"Functions for operating on the node structure of the VR Tree."},o="Tree",l={},h=[{value:"Functions",id:"functions",level:2},{value:"Functions Documentation",id:"functions-documentation",level:2},{value:"VRCloneNode",id:"vrclonenode",level:3},{value:"VRCompareNode",id:"vrcomparenode",level:3},{value:"VRCreateNode",id:"vrcreatenode",level:3},{value:"VRCreateNodeEx",id:"vrcreatenodeex",level:3},{value:"VRDeleteNode",id:"vrdeletenode",level:3},{value:"VRFind",id:"vrfind",level:3},{value:"VRFindChild",id:"vrfindchild",level:3},{value:"VRFindChildPooled",id:"vrfindchildpooled",level:3},{value:"VRFindOrCreateChild",id:"vrfindorcreatechild",level:3},{value:"VRFindOrCreateChildEx",id:"vrfindorcreatechildex",level:3},{value:"VRGetChild",id:"vrgetchild",level:3},{value:"VRGetChildOfType",id:"vrgetchildoftype",level:3},{value:"VRGetLibrariesNode",id:"vrgetlibrariesnode",level:3},{value:"VRGetMetaNode",id:"vrgetmetanode",level:3},{value:"VRGetNext",id:"vrgetnext",level:3},{value:"VRGetNextOfType",id:"vrgetnextoftype",level:3},{value:"VRGetNodeName",id:"vrgetnodename",level:3},{value:"VRGetNodeNameLength",id:"vrgetnodenamelength",level:3},{value:"VRGetNodePath",id:"vrgetnodepath",level:3},{value:"VRGetNodePathLength",id:"vrgetnodepathlength",level:3},{value:"VRGetNodeUserData",id:"vrgetnodeuserdata",level:3},{value:"VRGetParent",id:"vrgetparent",level:3},{value:"VRGetPrev",id:"vrgetprev",level:3},{value:"VRGetPrevOfType",id:"vrgetprevoftype",level:3},{value:"VRGetRootNode",id:"vrgetrootnode",level:3},{value:"VRGetScenesNode",id:"vrgetscenesnode",level:3},{value:"VRGetSystemLibraryNode",id:"vrgetsystemlibrarynode",level:3},{value:"VRGetThisUser",id:"vrgetthisuser",level:3},{value:"VRGetType",id:"vrgettype",level:3},{value:"VRGetTypeLength",id:"vrgettypelength",level:3},{value:"VRGetUsersNode",id:"vrgetusersnode",level:3},{value:"VRIsAncestor",id:"vrisancestor",level:3},{value:"VRIsDirty",id:"vrisdirty",level:3},{value:"VRIsDirtyEx",id:"vrisdirtyex",level:3},{value:"VRIsNodeName",id:"vrisnodename",level:3},{value:"VRIsSameNode",id:"vrissamenode",level:3},{value:"VRIsType",id:"vristype",level:3},{value:"VRLoadTree",id:"vrloadtree",level:3},{value:"VRLoadTreeEx",id:"vrloadtreeex",level:3},{value:"VRSaveTree",id:"vrsavetree",level:3},{value:"VRSaveTreeEx",id:"vrsavetreeex",level:3},{value:"VRSetNodeName",id:"vrsetnodename",level:3},{value:"VRSetNodeUserData",id:"vrsetnodeuserdata",level:3},{value:"VRSetParent",id:"vrsetparent",level:3},{value:"VRSetParentEx",id:"vrsetparentex",level:3}];function a(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(n.header,{children:(0,d.jsx)(n.h1,{id:"tree",children:"Tree"})}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Module:"})," ",(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/modules/nodes/",children:"Nodes"})})]}),"\n",(0,d.jsx)(n.p,{children:"Functions for operating on the node structure of the VR Tree."}),"\n",(0,d.jsx)(n.h2,{id:"functions",children:"Functions"}),"\n",(0,d.jsxs)(n.table,{children:[(0,d.jsx)(n.thead,{children:(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.th,{children:"Type"}),(0,d.jsx)(n.th,{children:"Name"})]})}),(0,d.jsxs)(n.tbody,{children:[(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})}),(0,d.jsxs)(n.td,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.a,{href:"#vrclonenode",children:"VRCloneNode"})}),"(",(0,d.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})," parentNode, ",(0,d.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})," nodeToClone, int recursive)",(0,d.jsx)("br",{}),"Clones an existing node."]})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"int"}),(0,d.jsxs)(n.td,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.a,{href:"#vrcomparenode",children:"VRCompareNode"})}),"(",(0,d.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})," lhs, ",(0,d.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})," rhs, int checkNameMatches)",(0,d.jsx)("br",{}),"Compares all the properties on both nodes to make sure they are equal."]})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})}),(0,d.jsxs)(n.td,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.a,{href:"#vrcreatenode",children:"VRCreateNode"})}),"(",(0,d.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})," parentNode, const char * metaName, const char * nodeName)",(0,d.jsx)("br",{}),"Creates a node."]})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})}),(0,d.jsxs)(n.td,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.a,{href:"#vrcreatenodeex",children:"VRCreateNodeEx"})}),"(",(0,d.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})," parentNode, const char * metaName, const char * nodeName, uint64_t flags, uint64_t idLO, uint64_t idHI, int userChange)",(0,d.jsx)("br",{}),"Creates a node."]})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"int"}),(0,d.jsxs)(n.td,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.a,{href:"#vrdeletenode",children:"VRDeleteNode"})}),"(",(0,d.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})," node)",(0,d.jsx)("br",{}),"Deletes a node and all its children."]})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})}),(0,d.jsxs)(n.td,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.a,{href:"#vrfind",children:"VRFind"})}),"(",(0,d.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})," startNode, const char * path)",(0,d.jsx)("br",{}),"Finds a descendant of startNode using its path."]})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})}),(0,d.jsxs)(n.td,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.a,{href:"#vrfindchild",children:"VRFindChild"})}),"(",(0,d.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})," startNode, const char * childName, uint32_t index)",(0,d.jsx)("br",{}),"Finds a direct child of startNode. Index is used to specify n'th child if multiple children have the same name."]})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})}),(0,d.jsxs)(n.td,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.a,{href:"#vrfindchildpooled",children:"VRFindChildPooled"})}),"(",(0,d.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})," startNode, const char * metaNode, const char * childName)",(0,d.jsx)("br",{}),"Finds a direct child of startNode by specifying name and type."]})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})}),(0,d.jsxs)(n.td,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.a,{href:"#vrfindorcreatechild",children:"VRFindOrCreateChild"})}),"(",(0,d.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})," parentNode, const char * metaName, const char * nodeName)",(0,d.jsx)("br",{}),"Gets or creates a node matching metanode and name."]})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})}),(0,d.jsxs)(n.td,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.a,{href:"#vrfindorcreatechildex",children:"VRFindOrCreateChildEx"})}),"(",(0,d.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})," parentNode, const char * metaName, const char * nodeName, uint64_t flags, uint64_t idLO, uint64_t idHI, int userChange)",(0,d.jsx)("br",{}),"Gets or creates a node matching metanode and name."]})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})}),(0,d.jsxs)(n.td,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.a,{href:"#vrgetchild",children:"VRGetChild"})}),"(",(0,d.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})," node)",(0,d.jsx)("br",{}),"Gets the first child of node."]})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})}),(0,d.jsxs)(n.td,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.a,{href:"#vrgetchildoftype",children:"VRGetChildOfType"})}),"(",(0,d.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})," node, const char * childMetaNode)",(0,d.jsx)("br",{}),"Gets the first child of a specific type."]})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})}),(0,d.jsxs)(n.td,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.a,{href:"#vrgetlibrariesnode",children:"VRGetLibrariesNode"})}),"(void )",(0,d.jsx)("br",{}),"Gets the VRTree libraries node."]})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})}),(0,d.jsxs)(n.td,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.a,{href:"#vrgetmetanode",children:"VRGetMetaNode"})}),"(",(0,d.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})," node)",(0,d.jsx)("br",{}),"Gets the metanode of a node."]})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})}),(0,d.jsxs)(n.td,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.a,{href:"#vrgetnext",children:"VRGetNext"})}),"(",(0,d.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})," node)",(0,d.jsx)("br",{}),"Gets the next sibling of a node."]})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})}),(0,d.jsxs)(n.td,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.a,{href:"#vrgetnextoftype",children:"VRGetNextOfType"})}),"(",(0,d.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})," node, const char * nextMetaNode)",(0,d.jsx)("br",{}),"Gets the next sibling of a specific type."]})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"size_t"}),(0,d.jsxs)(n.td,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.a,{href:"#vrgetnodename",children:"VRGetNodeName"})}),"(",(0,d.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})," node, char * buffer, size_t bufferLength)",(0,d.jsx)("br",{}),"Gets the name of a node."]})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"size_t"}),(0,d.jsxs)(n.td,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.a,{href:"#vrgetnodenamelength",children:"VRGetNodeNameLength"})}),"(",(0,d.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})," node)",(0,d.jsx)("br",{}),"Gets the length of a node's name, plus 1 for the trailing null terminator."]})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"size_t"}),(0,d.jsxs)(n.td,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.a,{href:"#vrgetnodepath",children:"VRGetNodePath"})}),"(",(0,d.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})," node, char * buffer, size_t bufferLength)",(0,d.jsx)("br",{}),"Gets the path of a node."]})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"size_t"}),(0,d.jsxs)(n.td,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.a,{href:"#vrgetnodepathlength",children:"VRGetNodePathLength"})}),"(",(0,d.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})," node)",(0,d.jsx)("br",{}),"Gets the length of a node's path."]})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"void *"}),(0,d.jsxs)(n.td,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.a,{href:"#vrgetnodeuserdata",children:"VRGetNodeUserData"})}),"(",(0,d.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})," node, ",(0,d.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-huserslot",children:"HUserSlot"})," slot)",(0,d.jsx)("br",{}),"Stores a pointer on the node."]})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})}),(0,d.jsxs)(n.td,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.a,{href:"#vrgetparent",children:"VRGetParent"})}),"(",(0,d.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})," node)",(0,d.jsx)("br",{}),"Gets the parent of a node."]})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})}),(0,d.jsxs)(n.td,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.a,{href:"#vrgetprev",children:"VRGetPrev"})}),"(",(0,d.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})," node)",(0,d.jsx)("br",{}),"Gets the previous sibling of a node."]})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})}),(0,d.jsxs)(n.td,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.a,{href:"#vrgetprevoftype",children:"VRGetPrevOfType"})}),"(",(0,d.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})," node, const char * prevMetaNode)",(0,d.jsx)("br",{}),"Gets the previous sibling of a specific type."]})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})}),(0,d.jsxs)(n.td,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.a,{href:"#vrgetrootnode",children:"VRGetRootNode"})}),"(void )",(0,d.jsx)("br",{}),"Gets the VRTree root node."]})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})}),(0,d.jsxs)(n.td,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.a,{href:"#vrgetscenesnode",children:"VRGetScenesNode"})}),"(void )",(0,d.jsx)("br",{}),"Gets the VRTree scenes node."]})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})}),(0,d.jsxs)(n.td,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.a,{href:"#vrgetsystemlibrarynode",children:"VRGetSystemLibraryNode"})}),"(void )",(0,d.jsx)("br",{}),"Gets the VRTree system library node."]})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})}),(0,d.jsxs)(n.td,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.a,{href:"#vrgetthisuser",children:"VRGetThisUser"})}),"(void )",(0,d.jsx)("br",{}),"Gets the VRTree user node."]})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"size_t"}),(0,d.jsxs)(n.td,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.a,{href:"#vrgettype",children:"VRGetType"})}),"(",(0,d.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})," node, char * buffer, size_t bufferLength)",(0,d.jsx)("br",{}),"Gets the type of a node."]})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"size_t"}),(0,d.jsxs)(n.td,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.a,{href:"#vrgettypelength",children:"VRGetTypeLength"})}),"(",(0,d.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})," node)",(0,d.jsx)("br",{}),"Gets the length of the type name of a node."]})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})}),(0,d.jsxs)(n.td,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.a,{href:"#vrgetusersnode",children:"VRGetUsersNode"})}),"(void )",(0,d.jsx)("br",{}),"Gets the VRTree users node."]})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"int"}),(0,d.jsxs)(n.td,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.a,{href:"#vrisancestor",children:"VRIsAncestor"})}),"(",(0,d.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})," a, ",(0,d.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})," b)",(0,d.jsx)("br",{}),"Checks if node a is an ancestor of node b."]})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"int"}),(0,d.jsxs)(n.td,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.a,{href:"#vrisdirty",children:"VRIsDirty"})}),"(",(0,d.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})," node, const char * propName)",(0,d.jsx)("br",{}),"Determines if a node value has been changed/dirtied."]})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"int"}),(0,d.jsxs)(n.td,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.a,{href:"#vrisdirtyex",children:"VRIsDirtyEx"})}),"(",(0,d.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})," node, uint32_t prop)",(0,d.jsx)("br",{}),"Determines if a node value has been changed/dirtied."]})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"int"}),(0,d.jsxs)(n.td,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.a,{href:"#vrisnodename",children:"VRIsNodeName"})}),"(",(0,d.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})," node, const char * name)",(0,d.jsx)("br",{}),"Checks if the name of the node is equal to parameter."]})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"int"}),(0,d.jsxs)(n.td,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.a,{href:"#vrissamenode",children:"VRIsSameNode"})}),"(",(0,d.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})," a, ",(0,d.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})," b)",(0,d.jsx)("br",{}),"Checks if two node handles are pointing at the same node."]})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"int"}),(0,d.jsxs)(n.td,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.a,{href:"#vristype",children:"VRIsType"})}),"(",(0,d.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})," node, const char * metaName)",(0,d.jsx)("br",{}),"Determines if a node is of a particular type."]})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})}),(0,d.jsxs)(n.td,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.a,{href:"#vrloadtree",children:"VRLoadTree"})}),"(",(0,d.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})," targetNode, const char * fileName)",(0,d.jsx)("br",{}),"Loads a VRText or VRNative format file from disk."]})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})}),(0,d.jsxs)(n.td,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.a,{href:"#vrloadtreeex",children:"VRLoadTreeEx"})}),"(",(0,d.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})," targetNode, const char * fileName, uint64_t ioFlags, uint32_t builderFlags, uint32_t builderMetaFlags)",(0,d.jsx)("br",{}),"Loads a VRText or VRNative format file from disk."]})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"int"}),(0,d.jsxs)(n.td,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.a,{href:"#vrsavetree",children:"VRSaveTree"})}),"(",(0,d.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})," rootNode, const char * fileName)",(0,d.jsx)("br",{}),"Saves the tree to a VRText or VRNative format file on disk."]})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"int"}),(0,d.jsxs)(n.td,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.a,{href:"#vrsavetreeex",children:"VRSaveTreeEx"})}),"(",(0,d.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})," rootNode, const char * fileName, uint64_t ioFlags)",(0,d.jsx)("br",{}),"Saves the tree to a VRText or VRNative format file on disk."]})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"int"}),(0,d.jsxs)(n.td,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.a,{href:"#vrsetnodename",children:"VRSetNodeName"})}),"(",(0,d.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})," node, const char * name)",(0,d.jsx)("br",{}),"Sets the name of a node."]})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"void *"}),(0,d.jsxs)(n.td,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.a,{href:"#vrsetnodeuserdata",children:"VRSetNodeUserData"})}),"(",(0,d.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})," node, ",(0,d.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-huserslot",children:"HUserSlot"})," slot, void * data)",(0,d.jsx)("br",{}),"Stores a pointer on the node."]})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"int"}),(0,d.jsxs)(n.td,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.a,{href:"#vrsetparent",children:"VRSetParent"})}),"(",(0,d.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})," node, ",(0,d.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})," parent)",(0,d.jsx)("br",{}),"Sets the parent of a node, adding it as the last child."]})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"int"}),(0,d.jsxs)(n.td,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.a,{href:"#vrsetparentex",children:"VRSetParentEx"})}),"(",(0,d.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})," node, ",(0,d.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})," parent, ",(0,d.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})," afterSibling)",(0,d.jsx)("br",{}),"Sets the parent of a node, specifying a sibling to insert after."]})]})]})]}),"\n",(0,d.jsx)(n.h2,{id:"functions-documentation",children:"Functions Documentation"}),"\n",(0,d.jsx)(n.h3,{id:"vrclonenode",children:"VRCloneNode"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-cpp",children:"HNode VRCloneNode(\r\n    HNode parentNode,\r\n    HNode nodeToClone,\r\n    int recursive\r\n)\n"})}),"\n",(0,d.jsx)(n.p,{children:"Clones an existing node."}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"parentNode"})," Handle to the parent of the new node"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"nodeToClone"})," the node to copy"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"recursive"})," if not 0, also copies descendants"]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Return"}),": the copy of nodeToClone"]}),"\n",(0,d.jsx)(n.h3,{id:"vrcomparenode",children:"VRCompareNode"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-cpp",children:"int VRCompareNode(\r\n    HNode lhs,\r\n    HNode rhs,\r\n    int checkNameMatches\r\n)\n"})}),"\n",(0,d.jsx)(n.p,{children:"Compares all the properties on both nodes to make sure they are equal."}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"lhs"})," first node to compare"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"rhs"})," second node to compare"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"checkNameMatches"})," whether to compare the node name as well as the properties (non-zero to enable)"]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Return"}),": 1 if the nodes are the same, 0 if they are not"]}),"\n",(0,d.jsx)(n.h3,{id:"vrcreatenode",children:"VRCreateNode"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-cpp",children:"HNode VRCreateNode(\r\n    HNode parentNode,\r\n    const char * metaName,\r\n    const char * nodeName\r\n)\n"})}),"\n",(0,d.jsx)(n.p,{children:"Creates a node."}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"parentNode"})," Handle to the parent of the new node"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"metaName"})," type of node to create"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"nodeName"})," name of the new node"]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Return"}),": node handle"]}),"\n",(0,d.jsx)(n.h3,{id:"vrcreatenodeex",children:"VRCreateNodeEx"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-cpp",children:"HNode VRCreateNodeEx(\r\n    HNode parentNode,\r\n    const char * metaName,\r\n    const char * nodeName,\r\n    uint64_t flags,\r\n    uint64_t idLO,\r\n    uint64_t idHI,\r\n    int userChange\r\n)\n"})}),"\n",(0,d.jsx)(n.p,{children:"Creates a node."}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"parentNode"})," Handle to the parent of the new node"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"metaName"})," type of node to create"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"nodeName"})," name of the new node"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"flags"})," creation flags (bits) to provide to the new node"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"idLO"})," low 64bits of a unique id (or 0 for auto ID)"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"idHI"})," high 64bits of a unique id (or 0 for auto ID)"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"userChange"})," whether the change is a response to a user action"]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Note"}),": Flags larger than 16bits will be truncated."]}),"\n",(0,d.jsx)(n.h3,{id:"vrdeletenode",children:"VRDeleteNode"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-cpp",children:"int VRDeleteNode(\r\n    HNode node\r\n)\n"})}),"\n",(0,d.jsx)(n.p,{children:"Deletes a node and all its children."}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"node"})," the node to delete"]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Return"}),": 0 if deletion successful"]}),"\n",(0,d.jsx)(n.h3,{id:"vrfind",children:"VRFind"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-cpp",children:"HNode VRFind(\r\n    HNode startNode,\r\n    const char * path\r\n)\n"})}),"\n",(0,d.jsx)(n.p,{children:"Finds a descendant of startNode using its path."}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"startNode"})," node to search from"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"path"})," path from start node to requested node"]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Return"}),": handle to requested node or NULL if not found"]}),"\n",(0,d.jsx)(n.h3,{id:"vrfindchild",children:"VRFindChild"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-cpp",children:"HNode VRFindChild(\r\n    HNode startNode,\r\n    const char * childName,\r\n    uint32_t index\r\n)\n"})}),"\n",(0,d.jsx)(n.p,{children:"Finds a direct child of startNode. Index is used to specify n'th child if multiple children have the same name."}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"startNode"})," node to get the child from"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"childName"})," name of the child"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"index"})," index of child with non-unique name"]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Return"}),": handle to requested node or NULL if not found"]}),"\n",(0,d.jsx)(n.h3,{id:"vrfindchildpooled",children:"VRFindChildPooled"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-cpp",children:"HNode VRFindChildPooled(\r\n    HNode startNode,\r\n    const char * metaNode,\r\n    const char * childName\r\n)\n"})}),"\n",(0,d.jsx)(n.p,{children:"Finds a direct child of startNode by specifying name and type."}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"startNode"})," node to get child from"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"metaNode"})," type of child node to get"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"childName"})," name of the child node to return"]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Return"}),": handle to found node or NULL if not found"]}),"\n",(0,d.jsx)(n.h3,{id:"vrfindorcreatechild",children:"VRFindOrCreateChild"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-cpp",children:"HNode VRFindOrCreateChild(\r\n    HNode parentNode,\r\n    const char * metaName,\r\n    const char * nodeName\r\n)\n"})}),"\n",(0,d.jsx)(n.p,{children:"Gets or creates a node matching metanode and name."}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"parentNode"})," Handle to the parent of the node"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"metaName"})," type of node to create"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"nodeName"})," name of the new node"]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Return"}),": node handle"]}),"\n",(0,d.jsx)(n.h3,{id:"vrfindorcreatechildex",children:"VRFindOrCreateChildEx"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-cpp",children:"HNode VRFindOrCreateChildEx(\r\n    HNode parentNode,\r\n    const char * metaName,\r\n    const char * nodeName,\r\n    uint64_t flags,\r\n    uint64_t idLO,\r\n    uint64_t idHI,\r\n    int userChange\r\n)\n"})}),"\n",(0,d.jsx)(n.p,{children:"Gets or creates a node matching metanode and name."}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"parentNode"})," Handle to the parent of the node"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"metaName"})," type of node to create"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"nodeName"})," name of the new node"]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Return"}),": node handle"]}),"\n",(0,d.jsx)(n.h3,{id:"vrgetchild",children:"VRGetChild"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-cpp",children:"HNode VRGetChild(\r\n    HNode node\r\n)\n"})}),"\n",(0,d.jsx)(n.p,{children:"Gets the first child of node."}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Return"}),": first child or NULL if no children"]}),"\n",(0,d.jsx)(n.h3,{id:"vrgetchildoftype",children:"VRGetChildOfType"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-cpp",children:"HNode VRGetChildOfType(\r\n    HNode node,\r\n    const char * childMetaNode\r\n)\n"})}),"\n",(0,d.jsx)(n.p,{children:"Gets the first child of a specific type."}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"childMetaNode"})," the type of child to get"]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Return"}),": first child of requested type, or NULL if no children/no children of this type"]}),"\n",(0,d.jsx)(n.h3,{id:"vrgetlibrariesnode",children:"VRGetLibrariesNode"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-cpp",children:"HNode VRGetLibrariesNode(\r\n    void \r\n)\n"})}),"\n",(0,d.jsx)(n.p,{children:"Gets the VRTree libraries node."}),"\n",(0,d.jsx)(n.h3,{id:"vrgetmetanode",children:"VRGetMetaNode"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-cpp",children:"HMeta VRGetMetaNode(\r\n    HNode node\r\n)\n"})}),"\n",(0,d.jsx)(n.p,{children:"Gets the metanode of a node."}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Return"}),": metanode or NULL if no metanode"]}),"\n",(0,d.jsx)(n.h3,{id:"vrgetnext",children:"VRGetNext"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-cpp",children:"HNode VRGetNext(\r\n    HNode node\r\n)\n"})}),"\n",(0,d.jsx)(n.p,{children:"Gets the next sibling of a node."}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Return"}),": sibling or NULL if no siblings"]}),"\n",(0,d.jsx)(n.h3,{id:"vrgetnextoftype",children:"VRGetNextOfType"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-cpp",children:"HNode VRGetNextOfType(\r\n    HNode node,\r\n    const char * nextMetaNode\r\n)\n"})}),"\n",(0,d.jsx)(n.p,{children:"Gets the next sibling of a specific type."}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"nextMetaNode"})," the type of sibling to get"]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Return"}),": next sibling of requested type, or NULL if no siblings/no siblings of this type"]}),"\n",(0,d.jsx)(n.h3,{id:"vrgetnodename",children:"VRGetNodeName"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-cpp",children:"size_t VRGetNodeName(\r\n    HNode node,\r\n    char * buffer,\r\n    size_t bufferLength\r\n)\n"})}),"\n",(0,d.jsx)(n.p,{children:"Gets the name of a node."}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"node"})," handle to the node"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"buffer"})," a buffer to receive the node name as a null terminated string"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"size"})," size of the buffer"]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Return"}),": the number of characters written to the buffer (including trailing null)"]}),"\n",(0,d.jsx)(n.h3,{id:"vrgetnodenamelength",children:"VRGetNodeNameLength"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-cpp",children:"size_t VRGetNodeNameLength(\r\n    HNode node\r\n)\n"})}),"\n",(0,d.jsx)(n.p,{children:"Gets the length of a node's name, plus 1 for the trailing null terminator."}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"node"})," handle to the node"]}),"\n"]}),"\n",(0,d.jsx)(n.h3,{id:"vrgetnodepath",children:"VRGetNodePath"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-cpp",children:"size_t VRGetNodePath(\r\n    HNode node,\r\n    char * buffer,\r\n    size_t bufferLength\r\n)\n"})}),"\n",(0,d.jsx)(n.p,{children:"Gets the path of a node."}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"node"})," handle to the node"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"buffer"})," a buffer to recieve the node path as a null terminated string"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"size"})," size of the buffer"]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Return"}),": the number of characters written to the buffer (including trailing null)"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Note"}),": if buffer is null, function returns the required size of the buffer"]}),"\n",(0,d.jsx)(n.h3,{id:"vrgetnodepathlength",children:"VRGetNodePathLength"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-cpp",children:"size_t VRGetNodePathLength(\r\n    HNode node\r\n)\n"})}),"\n",(0,d.jsx)(n.p,{children:"Gets the length of a node's path."}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"node"})," handle to the node"]}),"\n"]}),"\n",(0,d.jsx)(n.h3,{id:"vrgetnodeuserdata",children:"VRGetNodeUserData"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-cpp",children:"void * VRGetNodeUserData(\r\n    HNode node,\r\n    HUserSlot slot\r\n)\n"})}),"\n",(0,d.jsx)(n.p,{children:"Stores a pointer on the node."}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"node"})," handle to the node"]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Return"}),": user data bound to slot"]}),"\n",(0,d.jsx)(n.h3,{id:"vrgetparent",children:"VRGetParent"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-cpp",children:"HNode VRGetParent(\r\n    HNode node\r\n)\n"})}),"\n",(0,d.jsx)(n.p,{children:"Gets the parent of a node."}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Return"}),": parent node or NULL if no parent (root node)"]}),"\n",(0,d.jsx)(n.h3,{id:"vrgetprev",children:"VRGetPrev"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-cpp",children:"HNode VRGetPrev(\r\n    HNode node\r\n)\n"})}),"\n",(0,d.jsx)(n.p,{children:"Gets the previous sibling of a node."}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Return"}),": sibling or NULL if no siblings"]}),"\n",(0,d.jsx)(n.h3,{id:"vrgetprevoftype",children:"VRGetPrevOfType"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-cpp",children:"HNode VRGetPrevOfType(\r\n    HNode node,\r\n    const char * prevMetaNode\r\n)\n"})}),"\n",(0,d.jsx)(n.p,{children:"Gets the previous sibling of a specific type."}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"prevMetaNode"})," the type of sibling to get"]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Return"}),": previous sibling of requested type, or NULL if no siblings/no siblings of this type"]}),"\n",(0,d.jsx)(n.h3,{id:"vrgetrootnode",children:"VRGetRootNode"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-cpp",children:"HNode VRGetRootNode(\r\n    void \r\n)\n"})}),"\n",(0,d.jsx)(n.p,{children:"Gets the VRTree root node."}),"\n",(0,d.jsx)(n.h3,{id:"vrgetscenesnode",children:"VRGetScenesNode"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-cpp",children:"HNode VRGetScenesNode(\r\n    void \r\n)\n"})}),"\n",(0,d.jsx)(n.p,{children:"Gets the VRTree scenes node."}),"\n",(0,d.jsx)(n.h3,{id:"vrgetsystemlibrarynode",children:"VRGetSystemLibraryNode"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-cpp",children:"HNode VRGetSystemLibraryNode(\r\n    void \r\n)\n"})}),"\n",(0,d.jsx)(n.p,{children:"Gets the VRTree system library node."}),"\n",(0,d.jsx)(n.h3,{id:"vrgetthisuser",children:"VRGetThisUser"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-cpp",children:"HNode VRGetThisUser(\r\n    void \r\n)\n"})}),"\n",(0,d.jsx)(n.p,{children:"Gets the VRTree user node."}),"\n",(0,d.jsx)(n.h3,{id:"vrgettype",children:"VRGetType"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-cpp",children:"size_t VRGetType(\r\n    HNode node,\r\n    char * buffer,\r\n    size_t bufferLength\r\n)\n"})}),"\n",(0,d.jsx)(n.p,{children:"Gets the type of a node."}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"node"})," handle to the node"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"buffer"})," a buffer to recieve the node type name as a null terminated string"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"size"})," size of the buffer"]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Return"}),": the number of characters written to the buffer (including trailing null)"]}),"\n",(0,d.jsx)(n.h3,{id:"vrgettypelength",children:"VRGetTypeLength"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-cpp",children:"size_t VRGetTypeLength(\r\n    HNode node\r\n)\n"})}),"\n",(0,d.jsx)(n.p,{children:"Gets the length of the type name of a node."}),"\n",(0,d.jsx)(n.h3,{id:"vrgetusersnode",children:"VRGetUsersNode"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-cpp",children:"HNode VRGetUsersNode(\r\n    void \r\n)\n"})}),"\n",(0,d.jsx)(n.p,{children:"Gets the VRTree users node."}),"\n",(0,d.jsx)(n.h3,{id:"vrisancestor",children:"VRIsAncestor"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-cpp",children:"int VRIsAncestor(\r\n    HNode a,\r\n    HNode b\r\n)\n"})}),"\n",(0,d.jsx)(n.p,{children:"Checks if node a is an ancestor of node b."}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"a"})," first node"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"b"})," second node"]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Return"}),": 1 if a is an ancestor of b"]}),"\n",(0,d.jsx)(n.h3,{id:"vrisdirty",children:"VRIsDirty"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-cpp",children:"int VRIsDirty(\r\n    HNode node,\r\n    const char * propName\r\n)\n"})}),"\n",(0,d.jsx)(n.p,{children:"Determines if a node value has been changed/dirtied."}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"node"})," handle to the node"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"propName"})," name of the property on this node"]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Return"}),": 1 if node property is dirty, 0 if it is not"]}),"\n",(0,d.jsx)(n.h3,{id:"vrisdirtyex",children:"VRIsDirtyEx"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-cpp",children:"int VRIsDirtyEx(\r\n    HNode node,\r\n    uint32_t prop\r\n)\n"})}),"\n",(0,d.jsx)(n.p,{children:"Determines if a node value has been changed/dirtied."}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"node"})," handle to the node"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"prop"})," the index of the property to set"]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Return"}),": 1 if node property is dirty, 0 if it is not"]}),"\n",(0,d.jsx)(n.h3,{id:"vrisnodename",children:"VRIsNodeName"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-cpp",children:"int VRIsNodeName(\r\n    HNode node,\r\n    const char * name\r\n)\n"})}),"\n",(0,d.jsx)(n.p,{children:"Checks if the name of the node is equal to parameter."}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"node"})," handle to the node"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"name"})," to check against"]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Return"}),": 1 if name is equal -1 if node invalid 0 if not equal"]}),"\n",(0,d.jsx)(n.h3,{id:"vrissamenode",children:"VRIsSameNode"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-cpp",children:"int VRIsSameNode(\r\n    HNode a,\r\n    HNode b\r\n)\n"})}),"\n",(0,d.jsx)(n.p,{children:"Checks if two node handles are pointing at the same node."}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"a"})," first node"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"b"})," second node"]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Return"}),": 1 if the nodes are the same"]}),"\n",(0,d.jsx)(n.h3,{id:"vristype",children:"VRIsType"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-cpp",children:"int VRIsType(\r\n    HNode node,\r\n    const char * metaName\r\n)\n"})}),"\n",(0,d.jsx)(n.p,{children:"Determines if a node is of a particular type."}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"node"})," handle to the node"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"metaName"})," name of the node type to match"]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Return"}),": 1 if node is of type metaName, 0 if it is not"]}),"\n",(0,d.jsx)(n.h3,{id:"vrloadtree",children:"VRLoadTree"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-cpp",children:"HNode VRLoadTree(\r\n    HNode targetNode,\r\n    const char * fileName\r\n)\n"})}),"\n",(0,d.jsx)(n.p,{children:"Loads a VRText or VRNative format file from disk."}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"targetNode"})," the node to load the file onto (usually root)"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"fileName"})," the full path to the file to load"]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Return"}),": The first new child of targetNode, or NULL if load failed"]}),"\n",(0,d.jsx)(n.h3,{id:"vrloadtreeex",children:"VRLoadTreeEx"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-cpp",children:"HNode VRLoadTreeEx(\r\n    HNode targetNode,\r\n    const char * fileName,\r\n    uint64_t ioFlags,\r\n    uint32_t builderFlags,\r\n    uint32_t builderMetaFlags\r\n)\n"})}),"\n",(0,d.jsx)(n.p,{children:"Loads a VRText or VRNative format file from disk."}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"targetNode"})," the node to load the file onto (usually root)"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"fileName"})," the full path to the file to load"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"ioFlags"})," Input flags to apply while loading the tree"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"builderFlags"})," flags which adjust the behaviour of the builder"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"builderMetaFlags"})," additional MetaNode flags applied to nodes created by the tree builder"]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Return"}),": The first new child of targetNode, or NULL if load failed"]}),"\n",(0,d.jsx)(n.h3,{id:"vrsavetree",children:"VRSaveTree"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-cpp",children:"int VRSaveTree(\r\n    HNode rootNode,\r\n    const char * fileName\r\n)\n"})}),"\n",(0,d.jsx)(n.p,{children:"Saves the tree to a VRText or VRNative format file on disk."}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"rootNode"})," the node to start saving from (usually root)"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"fileName"})," the full path to the file to save to"]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Return"}),": 0 if the save was successful"]}),"\n",(0,d.jsx)(n.h3,{id:"vrsavetreeex",children:"VRSaveTreeEx"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-cpp",children:"int VRSaveTreeEx(\r\n    HNode rootNode,\r\n    const char * fileName,\r\n    uint64_t ioFlags\r\n)\n"})}),"\n",(0,d.jsx)(n.p,{children:"Saves the tree to a VRText or VRNative format file on disk."}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"rootNode"})," the node to start saving from (usually root)."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"fileName"})," the full path to the file to save to."]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Return"}),": 0 if the save was successful."]}),"\n",(0,d.jsx)(n.h3,{id:"vrsetnodename",children:"VRSetNodeName"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-cpp",children:"int VRSetNodeName(\r\n    HNode node,\r\n    const char * name\r\n)\n"})}),"\n",(0,d.jsx)(n.p,{children:"Sets the name of a node."}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"node"})," handle to the node"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"name"})," the new node name"]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Return"}),": 0 on success"]}),"\n",(0,d.jsx)(n.h3,{id:"vrsetnodeuserdata",children:"VRSetNodeUserData"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-cpp",children:"void * VRSetNodeUserData(\r\n    HNode node,\r\n    HUserSlot slot,\r\n    void * data\r\n)\n"})}),"\n",(0,d.jsx)(n.p,{children:"Stores a pointer on the node."}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"node"})," handle to the node"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"data"})," which you wish to store in slot, can be null to remove data"]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Return"}),": previously bound data, if any"]}),"\n",(0,d.jsx)(n.h3,{id:"vrsetparent",children:"VRSetParent"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-cpp",children:"int VRSetParent(\r\n    HNode node,\r\n    HNode parent\r\n)\n"})}),"\n",(0,d.jsx)(n.p,{children:"Sets the parent of a node, adding it as the last child."}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Return"}),": 0 on success"]}),"\n",(0,d.jsx)(n.h3,{id:"vrsetparentex",children:"VRSetParentEx"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-cpp",children:"int VRSetParentEx(\r\n    HNode node,\r\n    HNode parent,\r\n    HNode afterSibling\r\n)\n"})}),"\n",(0,d.jsx)(n.p,{children:"Sets the parent of a node, specifying a sibling to insert after."}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"afterSibling"})," the node after which to insert this node. If null, inserts as first child of parent"]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Return"}),": 0 on success"]})]})}function c(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(a,{...e})}):a(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>o});var s=r(96540);const d={},i=s.createContext(d);function t(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:t(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);
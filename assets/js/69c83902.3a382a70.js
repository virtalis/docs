"use strict";(self.webpackChunkvirtalis_docs=self.webpackChunkvirtalis_docs||[]).push([[40059],{88043:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>n,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"importers-and-exporters/importers/format-specifics/fbx-importer","title":"FBX Importer","description":"The FBX Importer GUI has some additional options added to the standard importer GUI. The additional options permit you to select or override some of the variables within the FBX file. This is necessary because FBXs from some source programs may set properties in a different manner to those from another source program. The FBX Importer does detect known differences internally using the identity of the source program to make decisions about how some data should be used. However, this only covers files from 3DS Max, Maya, Revit and Blender.","source":"@site/docs/importers-and-exporters/importers/format-specifics/fbx-importer.mdx","sourceDirName":"importers-and-exporters/importers/format-specifics","slug":"/importers-and-exporters/importers/format-specifics/fbx-importer","permalink":"/importers-and-exporters/importers/format-specifics/fbx-importer","draft":false,"unlisted":false,"editUrl":"https://github.com/virtalis/docs/tree/master/docs/importers-and-exporters/importers/format-specifics/fbx-importer.mdx","tags":[],"version":"current","lastUpdatedAt":1730817102000,"frontMatter":{},"sidebar":"importersAndExportersSidebar","previous":{"title":"Drawing Importer","permalink":"/importers-and-exporters/importers/format-specifics/drawing-importer"},"next":{"title":"Open JT Importer","permalink":"/importers-and-exporters/importers/format-specifics/openjt-importer"}}');var i=r(74848),s=r(28453);const n={},o="FBX Importer",l={},d=[{value:"Settings",id:"settings",level:2},{value:"Basic",id:"basic",level:3},{value:"Entity Filters",id:"entity-filters",level:3},{value:"Preparation",id:"preparation",level:3},{value:"Materials",id:"materials",level:3},{value:"Material XML File",id:"material-xml-file",level:2},{value:"Default Colour",id:"default-colour",level:3},{value:"Metadata Map",id:"metadata-map",level:3},{value:"Geometry Map",id:"geometry-map",level:3},{value:"Material List",id:"material-list",level:3},{value:"Export",id:"export",level:2},{value:"Known Issues",id:"known-issues",level:3},{value:"Blender",id:"blender",level:4},{value:"Revit",id:"revit",level:4}];function h(e){const t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"fbx-importer",children:"FBX Importer"})}),"\n",(0,i.jsx)(t.p,{children:"The FBX Importer GUI has some additional options added to the standard importer GUI. The additional options permit you to select or override some of the variables within the FBX file. This is necessary because FBXs from some source programs may set properties in a different manner to those from another source program. The FBX Importer does detect known differences internally using the identity of the source program to make decisions about how some data should be used. However, this only covers files from 3DS Max, Maya, Revit and Blender."}),"\n",(0,i.jsx)(t.h2,{id:"settings",children:"Settings"}),"\n",(0,i.jsx)(t.p,{children:"The FBX Importer includes various format-specific settings."}),"\n",(0,i.jsx)(t.h3,{id:"basic",children:"Basic"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Setting"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsx)(t.tbody,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Unit"}),(0,i.jsxs)(t.td,{children:["The unit to apply to the import, such as millimetres, feet, miles, etc. If this is set to \u201cauto\u201d then the file will decide which unit to apply. ",(0,i.jsx)(t.em,{children:"[default: auto]"})]})]})})]}),"\n",(0,i.jsx)(t.h3,{id:"entity-filters",children:"Entity Filters"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Setting"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Import Lines"}),(0,i.jsxs)(t.td,{children:["Import lines from files. ",(0,i.jsx)(t.em,{children:"[default: true]"})]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Import Lights"}),(0,i.jsxs)(t.td,{children:["Import lights from files. ",(0,i.jsx)(t.em,{children:"[default: true]"})]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Import Animations"}),(0,i.jsxs)(t.td,{children:["Import animations from files. ",(0,i.jsx)(t.em,{children:"[default: true]"})]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Import Deformable Objects"}),(0,i.jsxs)(t.td,{children:["Import skins and morphs from files. ",(0,i.jsx)(t.em,{children:"[default: true]"})]})]})]})]}),"\n",(0,i.jsx)(t.h3,{id:"preparation",children:"Preparation"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Setting"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Flip Winding Order"}),(0,i.jsxs)(t.td,{children:["Flip the winding order of triangles in meshes. There are 3 options:",(0,i.jsxs)("ul",{children:[(0,i.jsxs)("li",{children:[(0,i.jsx)(t.strong,{children:"Auto"})," \u2013 flip winding order if the mesh has negative scale. ",(0,i.jsx)(t.em,{children:"[default]"})]}),(0,i.jsxs)("li",{children:[(0,i.jsx)(t.strong,{children:"Never"})," \u2013 don\u2019t flip winding order."]}),(0,i.jsxs)("li",{children:[(0,i.jsx)(t.strong,{children:"Always"})," \u2013 flip winding order."]})]})]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Generate Normals"}),(0,i.jsxs)(t.td,{children:["Generate new normal. ",(0,i.jsx)(t.em,{children:"[default: true]"})]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Generate Tangents"}),(0,i.jsxs)(t.td,{children:["Generate new tangents. ",(0,i.jsx)(t.em,{children:"[default: false]"})]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Duplication Check"}),(0,i.jsxs)(t.td,{children:["Check for and remove any duplicate materials from the file. ",(0,i.jsx)(t.em,{children:"[default: true]"})]})]})]})]}),"\n",(0,i.jsx)(t.h3,{id:"materials",children:"Materials"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Setting"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Transparency Enabled"}),(0,i.jsxs)(t.td,{children:["Attempt to use material transparency values. ",(0,i.jsx)(t.em,{children:"[default: true]"})]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Transparency Value"}),(0,i.jsx)(t.td,{children:"How to interpret transparency values. Transparency can be set quite differently by FBX exporters from different exporter programs. For 3ds Max, Revit and Maya exports the selector can be left on Auto. The way that transparency is treated by these packages is understood. For FBX files from other sources some experimentation may be needed. Basically there is a transparency value and a three colour vector. The vector and the value can be used in a variety of different ways and each FBX exporter seems to set them differently, probably based upon the method used in the exporting package.  The options in the list are the most likely formats. The names in brackets are the packages which use this method. So, if there are odd effects occurring with transparency then it is possible to try other options. The NONE option can be used to remove transparency completely if a useful option cannot be found. The Transparency could then be reapplied after import, if required."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Transparency Colour"}),(0,i.jsxs)(t.td,{children:["How to interpret transparency colours. There are 3 options:",(0,i.jsxs)("ul",{children:[(0,i.jsxs)("li",{children:["Auto ",(0,i.jsx)(t.em,{children:"[default]"})]}),(0,i.jsx)("li",{children:"Inverted"}),(0,i.jsx)("li",{children:"Normal"})]})]})]})]})]}),"\n",(0,i.jsx)(t.h2,{id:"material-xml-file",children:"Material XML File"}),"\n",(0,i.jsx)(t.p,{children:"The material xml file allows you to associate materials with objects in several different ways. The material xml file is placed in the same directory as the FBX file with the same name, but with the extension .xml rather than .fbx."}),"\n",(0,i.jsx)(t.h3,{id:"default-colour",children:"Default Colour"}),"\n",(0,i.jsx)(t.p,{children:"The simplest way of all is to simply set a default colour for the entire scene."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-xml",children:'<variable default_colour = "1.0, 0.0, 0.5"/>\n'})}),"\n",(0,i.jsx)(t.p,{children:"This default colour will be used when an object has no other material assigned to it."}),"\n",(0,i.jsx)(t.h3,{id:"metadata-map",children:"Metadata Map"}),"\n",(0,i.jsx)(t.p,{children:"The metadata map allows you to either use metadata directly from the FBX file or associate the metadata with colours in the material xml file."}),"\n",(0,i.jsx)(t.p,{children:"There are 3 methods:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Direct Colour (type = \u201ccolour\u201d)"})," - The metadata value is 3 floating point numbers (red, green, blue), with a range of 0 to 1, which is used as a colour. E.g. A door with a colorMat value of 0.8, 0.0, 0.0 would be red."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:'Direct Material Name (type = "direct")'})," - The string value of the metadata corresponds to a material name in the material xml. E.g. using the directMat example below - the value of the directMat metadata on a girder could be \u201cgrey\u201d."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Pair Mappings"})," - This is a list which associates values of a particular metadata name with materials in the material xml file. In the example below a box with the value of \u201c2\u201d in the metadata \u201cstage\u201d would be have the \u201cblue\u201d xml material."]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"The following xml fragment shows three types in use."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-xml",children:'<metadata_map>\r\n    <metadata name="colorMat" type = "colour" /> \x3c!--value is rgb vector--\x3e\r\n    <metadata name="directmat" type = "direct" />\x3c!-- value is a material--\x3e\r\n    \x3c!-- example of table to match metadata values to materials in the material file --\x3e\r\n    <metadata name="stage" >  \r\n        <pair value="1" material="red"/>\r\n        <pair value="2" material="blue"/>\r\n        <pair value="3" material="green"/>\r\n        <pair value="4" material="orange"/>\r\n    </metadata>\r\n</metadata_map>\n'})}),"\n",(0,i.jsx)(t.h3,{id:"geometry-map",children:"Geometry Map"}),"\n",(0,i.jsx)(t.p,{children:"You can assign materials using the name or part of the name using a geometry map."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-xml",children:'<geometry_map>\r\n    <pair geometry="teapot001" material="red"/>\r\n    <pair geometry="teapot002" material="green"/>\r\n    <pair geometry="teapot" material="grey"/>  \x3c!-- part name--\x3e\r\n    <pair geometry="teapot003" material="blue"/>\r\n    <pair geometry="teapot004" material="orange"/>\r\n</geometry_map>\n'})}),"\n",(0,i.jsxs)(t.p,{children:["In the above example objects there are five objects teapot001 to teapot005 and one object named teapot.  Objects ",(0,i.jsx)(t.code,{children:"teapot001"})," to ",(0,i.jsx)(t.code,{children:"teapot004"})," would be assigned the colours as shown in the list while ",(0,i.jsx)(t.code,{children:"Teapot005"})," and teapot would be grey, matched on the partial name. Full name matches are made first and then a search for part matches on unmatched objects. So the order of the list is unimportant. This method is particularly useful when you have are given a file with no means of asking for additions or changes to it."]}),"\n",(0,i.jsx)(t.h3,{id:"material-list",children:"Material List"}),"\n",(0,i.jsx)(t.p,{children:"The materials in the material list can be defined as simple three colour values or as a value and, if required, a texture mapping for each material property."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-xml",children:'<material_list>\r\n    <material name="red" colour = "1 0 0" two_sided_lighting = "0"/>\r\n        <material name="green" colour = "0 1 0"/>\r\n        <material name="blue" colour = "0 0 1"/>\r\n        <material name="white" colour = "1 1 1"/>\r\n        <material name="grey" colour = "0.3 0.3 0.3"/>\r\n        <material name="orange" >\r\n        <property name = "ambient" colour ="1.0 0.5 0.2" factor = "0.7" texture=""/> \r\n        <property name = "diffuse" colour ="1.0 0.5 0.2" factor = "0.7" texture=""/> \r\n        <property name = "specular" colour ="1.0 1.0 1.0" factor = "0.7" texture=""/> \r\n        <property name = "emissive" colour ="0.0 0.0 0.0" factor = "0.7" texture=""/> \r\n        <property name = "opacity" factor = "0.7" />\r\n        <property name = "shininess" factor = "1.0" /> \r\n        <property name = "reflectivity" colour ="0.0 0.0 0.0" factor = "1.0" texture=""/>\r\n        <property name = "bump" factor = "1.0" texture=""/>       \r\n        <property name = "normal" factor = "1.0" texture=""/>         \r\n        <property name = "gloss" texture=""/>                     \r\n    </material>\r\n</material_list>\n'})}),"\n",(0,i.jsx)(t.h2,{id:"export",children:"Export"}),"\n",(0,i.jsx)(t.p,{children:"This FBX Exporter Menu is used in 3DS Max and Maya. FBX export has no menu in Revit. The settings in the image below are recommended."}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{src:r(98058).A+"",width:"964",height:"864"})}),"\n",(0,i.jsx)(t.p,{children:"In particular note that:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Embed Media is ticked \u2013 the default is clear (in Include)."}),"\n",(0,i.jsx)(t.li,{children:"Up Axis is Y-up (in Advanced Options/Axis Conversion)."}),"\n",(0,i.jsx)(t.li,{children:"FBX File Format version is FBX 2014 (in Advanced Options/FBX File Format)."}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"Setting units to meters is preferable but any units can be used. FBX File Format type set to binary is advisable for portability. All other options have been tested at default."}),"\n",(0,i.jsx)(t.h3,{id:"known-issues",children:"Known Issues"}),"\n",(0,i.jsx)(t.h4,{id:"blender",children:"Blender"}),"\n",(0,i.jsxs)(t.p,{children:["If a material channel is not explicitly set in Blender then the default Autodesk value is not used. Instead a value from within Blender is used. Unfortunately, some of these values are not useful (such as emissive being set to 1).  When you are exporting Blender materials to FBX always set the material channels even if you have not changed the value from default. This fault was still true of a 2014 download (version 2.71).  Older files may not exhibit this fault.  The incorrect material channels can be disabled (see ",(0,i.jsx)(t.a,{href:"#materials",children:"Materials"}),")."]}),"\n",(0,i.jsx)(t.h4,{id:"revit",children:"Revit"}),"\n",(0,i.jsx)(t.p,{children:"Revit (since Revit 2011) exports the materials in \u201cAutodesk material\u201d format. This is a binary blob within the FBX file which can only be read by other Autodesk products such as 3DS Max. Autodesk has no intention of providing support through FBX for this type of material. For this reason, a material XML has been created which will allow you to assign materials defined within the XML to objects within the exported scene. This file can, of course, be used to add/change materials in any FBX file, not just those exported from Revit."})]})}function c(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},98058:(e,t,r)=>{r.d(t,{A:()=>a});const a=r.p+"assets/images/fbx-export-af3caf6023d3b4f5fa85b43f0adabf0a.png"},28453:(e,t,r)=>{r.d(t,{R:()=>n,x:()=>o});var a=r(96540);const i={},s=a.createContext(i);function n(e){const t=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:n(e.components),a.createElement(s.Provider,{value:t},e.children)}}}]);
"use strict";(self.webpackChunkvirtalis_docs=self.webpackChunkvirtalis_docs||[]).push([[52660],{42841:(e,s,i)=>{i.r(s),i.d(s,{assets:()=>l,contentTitle:()=>d,default:()=>m,frontMatter:()=>o,metadata:()=>n,toc:()=>a});const n=JSON.parse('{"id":"visionary-render-programming/reference/c-api/classes/metanodes/meta-system-collision","title":"Meta_SystemCollision","description":"Module: Metanodes / Definitions","source":"@site/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-system-collision.mdx","sourceDirName":"visionary-render-programming/reference/c-api/classes/metanodes","slug":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-system-collision","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-system-collision","draft":false,"unlisted":false,"editUrl":"https://github.com/virtalis/docs/tree/master/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-system-collision.mdx","tags":[],"version":"current","lastUpdatedAt":1730817102000,"frontMatter":{"title":"Meta_SystemCollision","summary":"A SystemCollision node is used to override Meta_Visual system collision."},"sidebar":"visionaryRenderProgrammingSidebar","previous":{"title":"Meta_SurfaceShaderInstance","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-surface-shader-instance"},"next":{"title":"Meta_System","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-system"}}');var r=i(74848),t=i(28453);const o={title:"Meta_SystemCollision",summary:"A SystemCollision node is used to override Meta_Visual system collision."},d="Meta_SystemCollision",l={},a=[{value:"Public Types",id:"public-types",level:2},{value:"Detailed Description",id:"detailed-description",level:2},{value:"Public Types Documentation",id:"public-types-documentation",level:2},{value:"enum IDX",id:"enum-idx",level:3}];function c(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"meta_systemcollision",children:"Meta_SystemCollision"})}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Module:"})," ",(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/",children:"Metanodes"})})," ",(0,r.jsx)(s.strong,{children:"/"})," ",(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/definitions",children:"Definitions"})})]}),"\n",(0,r.jsxs)(s.p,{children:["A SystemCollision node is used to override Meta_Visual system collision.  ",(0,r.jsx)(s.a,{href:"#detailed-description",children:"More..."})]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.code,{children:"#include <meta_importables.hpp>"})}),"\n",(0,r.jsx)(s.h2,{id:"public-types",children:"Public Types"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Type"}),(0,r.jsx)(s.th,{children:"Name"})]})}),(0,r.jsx)(s.tbody,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"enum"}),(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.a,{href:"#enum-idx",children:"IDX"})})," { Idx_Enabled, Idx_Collider }",(0,r.jsx)("br",{}),"Property index."]})]})})]}),"\n",(0,r.jsx)(s.h2,{id:"detailed-description",children:"Detailed Description"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-cpp",children:"struct Meta_SystemCollision;\n"})}),"\n",(0,r.jsx)(s.p,{children:"A SystemCollision node is used to override Meta_Visual system collision."}),"\n",(0,r.jsxs)(s.p,{children:["Should be a child of a ",(0,r.jsx)(s.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-visual",children:"Meta_Visual"}),"."]}),"\n",(0,r.jsx)(s.h2,{id:"public-types-documentation",children:"Public Types Documentation"}),"\n",(0,r.jsx)(s.h3,{id:"enum-idx",children:"enum IDX"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Enumerator"}),(0,r.jsx)(s.th,{children:"Value"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Idx_Enabled"}),(0,r.jsx)(s.td,{}),(0,r.jsx)(s.td,{children:"If false, the parent Visual's system collision is disabled and it is not pickable by the cursor."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Idx_Collider"}),(0,r.jsx)(s.td,{}),(0,r.jsx)(s.td,{children:"If true, forces the body to act as a concave collider."})]})]})]}),"\n",(0,r.jsx)(s.p,{children:"Property index."})]})}function m(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,s,i)=>{i.d(s,{R:()=>o,x:()=>d});var n=i(96540);const r={},t=n.createContext(r);function o(e){const s=n.useContext(t);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function d(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),n.createElement(t.Provider,{value:s},e.children)}}}]);
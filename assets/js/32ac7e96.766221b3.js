"use strict";(self.webpackChunkvirtalis_docs=self.webpackChunkvirtalis_docs||[]).push([[8421],{36159:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"visionary-render-programming/plugins/advanced/lua-coroutines","title":"Coroutines in Lua Plugins","description":"A number of actions in Visionary Render involve work being done over multiple frames, or seconds. Examples of these are loading and saving files, or responding to property changes.","source":"@site/docs/visionary-render-programming/plugins/advanced/lua-coroutines.mdx","sourceDirName":"visionary-render-programming/plugins/advanced","slug":"/visionary-render-programming/plugins/advanced/lua-coroutines","permalink":"/visionary-render-programming/plugins/advanced/lua-coroutines","draft":false,"unlisted":false,"editUrl":"https://github.com/virtalis/docs/tree/master/docs/visionary-render-programming/plugins/advanced/lua-coroutines.mdx","tags":[],"version":"current","lastUpdatedAt":1730817102000,"frontMatter":{},"sidebar":"visionaryRenderProgrammingSidebar","previous":{"title":"Dynamic Loading","permalink":"/visionary-render-programming/plugins/advanced/dynamic-loading"},"next":{"title":"Metanode Versioning","permalink":"/visionary-render-programming/plugins/advanced/metanode-versioning"}}');var i=r(74848),t=r(28453);const a={},s="Coroutines in Lua Plugins",l={},c=[{value:"Life without coroutines",id:"life-without-coroutines",level:2},{value:"The Coroutine Way",id:"the-coroutine-way",level:2},{value:"Resuming",id:"resuming",level:3},{value:"Time Based yield",id:"time-based-yield",level:3},{value:"Running a function as a coroutine",id:"running-a-function-as-a-coroutine",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"coroutines-in-lua-plugins",children:"Coroutines in Lua Plugins"})}),"\n",(0,i.jsx)(n.p,{children:"A number of actions in Visionary Render involve work being done over multiple frames, or seconds. Examples of these are loading and saving files, or responding to property changes."}),"\n",(0,i.jsx)(n.p,{children:"While it is possible to write Lua code to take this into account, it is often cleaner to keep a sequential list of actions sequential in the code."}),"\n",(0,i.jsx)(n.h2,{id:"life-without-coroutines",children:"Life without coroutines"}),"\n",(0,i.jsx)(n.p,{children:"Consider this example of loading a file and doing something with it:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'local function onFileLoaded(file)\r\n  --when the file is loaded, print the name of the first node in the scene\r\n  print(vrTreeRoot().Scenes:child():getName())\r\nend\r\n\r\nlocal function loadFile()\r\n  --register our function to be called when the document is loaded\r\n  __registerCallback("onDocumentLoaded", onFileLoaded)\r\n  --request that the document be loaded\r\n  vrPostCommand("visren_open_document", "path/to/file")\r\nend\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In this example, ",(0,i.jsx)(n.code,{children:"vrPostCommand"})," may not execute immediately. When it does execute, opening a document can take some time so this Lua script can't wait for the file to load and continue where it left off. It has to make use of a callback function to do the work after the file loading operation."]}),"\n",(0,i.jsx)(n.p,{children:"For this contrived example it's not particularly beneficial to introduce coroutines, but what about something like this?"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'local function timestep(delta)\r\n  -- do something to count the time delta and trigger the screenshot tool when necessary\r\n  if myCount > 0.1 then\r\n    vrLocalUserNode().Toolbox.ScreenCaptureTool.Enabled = true\r\n  end\r\nend\r\n\r\nlocal function onPropertyChange(node, value)\r\n  if not value then\r\n    -- screen capture tool has finished, trigger a fly to the next node in some list\r\n    vrBodyFlyTo(someOtherNode, 0.1)\r\n  end\r\nend\r\n\r\nlocal function myTasks()\r\n  -- rather confusing way to achieve the following steps:\r\n  -- vrBodyFlyTo(someNode, 0.1)\r\n  -- vrLocalUserNode().Toolbox.ScreenCaptureTool.Enabled = true\r\n  -- vrBodyFlyTo(someOtherNode, 0.1)\r\n  -- vrLocalUserNode().Toolbox.ScreenCaptureTool.Enabled = true\r\n  \r\n  __registerCallback("onTimestepEvent", timestep)\r\n  vrAddPropertyObserver("myObserver", onPropertyChange, "ScreenCaptureTool", "Enabled")\r\n  vrBodyFlyTo(someNode, 0.1)\r\n  --timestep triggers capture tool\r\n  --then onPropertyChange triggers the next fly to\r\n  --then timestep triggers the capture tool again\r\nend\n'})}),"\n",(0,i.jsx)(n.p,{children:"This script is very confusing. The way to achieve the simple list of steps is very complicated."}),"\n",(0,i.jsx)(n.p,{children:"Wouldn't it be better if the entire code sample could look like this?"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"local function myTasks()\r\n  vrBodyFlyTo(someNode, 0.1)\r\n  vr_yield(0.1)\r\n  vrLocalUserNode().Toolbox.ScreenCaptureTool.Enabled = true\r\n  vr_yield()\r\n  vrBodyFlyTo(someOtherNode, 0.1)\r\n  vr_yield(0.1)\r\n  vrLocalUserNode().Toolbox.ScreenCaptureTool.Enabled = true\r\nend\n"})}),"\n",(0,i.jsx)(n.h2,{id:"the-coroutine-way",children:"The Coroutine Way"}),"\n",(0,i.jsx)(n.p,{children:"Providing the yield function requires a bit of boilerplate and there are two method implementations required to account for both cases of waiting for time/updates, and waiting for document events."}),"\n",(0,i.jsx)(n.h3,{id:"resuming",children:"Resuming"}),"\n",(0,i.jsxs)(n.p,{children:["Before we write a yield function, we should write a function capable of resuming the coroutine. This function can then be used as the function parameter to ",(0,i.jsx)(n.code,{children:"__registerCallback"})," to automatically resume the Lua execution when the specified event is fired by Visionary Render."]}),"\n",(0,i.jsx)(n.p,{children:"First, define a variable local to your plugin:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"local lu_co\n"})}),"\n",(0,i.jsx)(n.p,{children:"Our resume function uses this to resume the coroutine:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"local function vr_resume()\r\n  -- resume our coroutine\r\n  local ok, err = coroutine.resume(lu_co)\r\n  -- this block will trigger a Lua error if there are errors while running the coroutine.\r\n  -- by default, these errors are not propogated back to the caller unless we do it here.\r\n  if not ok then\r\n    error(err)\r\n  end\r\nend\n"})}),"\n",(0,i.jsx)(n.p,{children:"Now your Lua script can wait for document events. The first example of loading a file now becomes this:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'local function loadFile()\r\n  -- register our function to be called when the document is loaded\r\n  __registerCallback("onDocumentLoaded", vr_resume)\r\n  -- request that the document be loaded\r\n  vrPostCommand("visren_open_document", "path/to/file")\r\n  -- wait for the callback\r\n  coroutine.yield()\r\n  -- when the file is loaded, print the name of the first node in the scene\r\n  print(vrTreeRoot().Scenes:child():getName())\r\nend\n'})}),"\n",(0,i.jsx)(n.h3,{id:"time-based-yield",children:"Time Based yield"}),"\n",(0,i.jsxs)(n.p,{children:["For simpler things like waiting some number of seconds, or just a single frame for property changes, we can write another helper function, ",(0,i.jsx)(n.code,{children:"vr_yield"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"local function vr_yield(time)\r\n  -- we make use of the __deferredCall utility function to call vr_resume\r\n  __deferredCall(vr_resume, time or 0)\r\n  coroutine.yield()\r\nend\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This adds a small wrapper around ",(0,i.jsx)(n.code,{children:"coroutine.yield"})," which uses the global timestep callback to call our resume function some time in the future."]}),"\n",(0,i.jsxs)(n.p,{children:["Calling ",(0,i.jsx)(n.code,{children:"vr_yield()"})," with no parameters will result in the script being resumed in the next frame. Using a time value (e.g. ",(0,i.jsx)(n.code,{children:"vr_yield(0.5)"}),") will resume the script approximately half a second from now. The timing is not completely exact because the timestep event is handed a delta time since the last frame. The lower the framerate, the less accurate this will be."]}),"\n",(0,i.jsx)(n.h3,{id:"running-a-function-as-a-coroutine",children:"Running a function as a coroutine"}),"\n",(0,i.jsx)(n.p,{children:"There is one final step required to allow these helpers to function, and that is to run the main function as a coroutine."}),"\n",(0,i.jsx)(n.p,{children:"Given this small function:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'local function myTasks()\r\n  vrBodyFlyTo(node, 1.0)\r\n  vr_yield(1.0)\r\n  print("finished!")\r\nend\n'})}),"\n",(0,i.jsxs)(n.p,{children:["to allow ",(0,i.jsx)(n.code,{children:"vr_yield"})," to function, it should be enclosed in:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"lu_co = coroutine.create(function() myTasks() end)\r\nvr_resume()\n"})}),"\n",(0,i.jsx)(n.p,{children:"Alternatively, if the function is simple enough, it need not be separate:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'local function myTasks()\r\n  lu_co = coroutine.create(function()\r\n    vrBodyFlyTo(node, 1.0)\r\n    vr_yield(1.0)\r\n    print("finished!")\r\n  end)\r\n  vr_resume()\r\nend\n'})}),"\n",(0,i.jsx)(n.p,{children:"You could even write another helper function:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'local function co_wrap(func)\r\n  lu_co = coroutine.create(function() func() end)\r\n  vr_resume()\r\nend\r\n\r\nlocal function myTasks()\r\n  co_wrap(function()\r\n    vrBodyFlyTo(node, 1.0)\r\n    vr_yield(1.0)\r\n    print("finished!")\r\n  end)\r\nend\n'})})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>s});var o=r(96540);const i={},t=o.createContext(i);function a(e){const n=o.useContext(t);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),o.createElement(t.Provider,{value:n},e.children)}}}]);
"use strict";(self.webpackChunkvirtalis_docs=self.webpackChunkvirtalis_docs||[]).push([[98545],{79357:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>d,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"visionary-render-programming/reference/c-api/classes/metanodes/meta-dimension","title":"Meta_Dimension","description":"Module: Metanodes / Definitions","source":"@site/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-dimension.mdx","sourceDirName":"visionary-render-programming/reference/c-api/classes/metanodes","slug":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-dimension","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-dimension","draft":false,"unlisted":false,"editUrl":"https://github.com/virtalis/docs/tree/master/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-dimension.mdx","tags":[],"version":"current","lastUpdatedAt":1730817102000,"frontMatter":{"title":"Meta_Dimension","summary":"A Dimension references two Meta_MeasuringPoint nodes and calculates the distances between them. It also provides scene visuals depicting the dimensions."},"sidebar":"visionaryRenderProgrammingSidebar","previous":{"title":"Meta_Deformable","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-deformable"},"next":{"title":"Meta_DummyHMDViewport","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-dummy-hmd-viewport"}}');var i=s(74848),r=s(28453);const d={title:"Meta_Dimension",summary:"A Dimension references two Meta_MeasuringPoint nodes and calculates the distances between them. It also provides scene visuals depicting the dimensions."},a="Meta_Dimension",c={},o=[{value:"Public Types",id:"public-types",level:2},{value:"Public Types Documentation",id:"public-types-documentation",level:2},{value:"enum IDX",id:"enum-idx",level:3}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"meta_dimension",children:"Meta_Dimension"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Module:"})," ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/",children:"Metanodes"})})," ",(0,i.jsx)(n.strong,{children:"/"})," ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/definitions",children:"Definitions"})})]}),"\n",(0,i.jsxs)(n.p,{children:["A Dimension references two ",(0,i.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-measuring-point",children:"Meta_MeasuringPoint"})," nodes and calculates the distances between them. It also provides scene visuals depicting the dimensions."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"#include <meta_measure.hpp>"})}),"\n",(0,i.jsx)(n.h2,{id:"public-types",children:"Public Types"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Name"})]})}),(0,i.jsx)(n.tbody,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"enum"}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"#enum-idx",children:"IDX"})})," { Idx_Enabled, Idx_MeasuringPoint1, Idx_MeasuringPoint2, Idx_Length, Idx_MinLength, Idx_MaxLength, Idx_Labels, Idx_Bounds, Idx_Lock, Idx_Display }",(0,i.jsx)("br",{}),"Property index."]})]})})]}),"\n",(0,i.jsx)(n.h2,{id:"public-types-documentation",children:"Public Types Documentation"}),"\n",(0,i.jsx)(n.h3,{id:"enum-idx",children:"enum IDX"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Enumerator"}),(0,i.jsx)(n.th,{children:"Value"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Idx_Enabled"}),(0,i.jsx)(n.td,{}),(0,i.jsx)(n.td,{children:"bool - Enables the dimension display"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Idx_MeasuringPoint1"}),(0,i.jsx)(n.td,{}),(0,i.jsx)(n.td,{children:"link - Link to the first measuring point"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Idx_MeasuringPoint2"}),(0,i.jsx)(n.td,{}),(0,i.jsx)(n.td,{children:"link - Link to the second measuring point"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Idx_Length"}),(0,i.jsx)(n.td,{}),(0,i.jsx)(n.td,{children:"vec4w - The calculated current distance between the two points (XYZ for each axis, W for diagonal, direct distance)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Idx_MinLength"}),(0,i.jsx)(n.td,{}),(0,i.jsx)(n.td,{children:"vec4w - The calculated smallest distance the two points have ever been from each other"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Idx_MaxLength"}),(0,i.jsx)(n.td,{}),(0,i.jsx)(n.td,{children:"vec4w - The calculated largest distance the two points have ever been from each other"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Idx_Labels"}),(0,i.jsx)(n.td,{}),(0,i.jsx)(n.td,{children:"bool - Whether to display text labels showing the measurements in the scene"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Idx_Bounds"}),(0,i.jsx)(n.td,{}),(0,i.jsx)(n.td,{children:"bool - Whether to draw lines depicting the bounds of the dimension"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Idx_Lock"}),(0,i.jsx)(n.td,{}),(0,i.jsx)(n.td,{children:"Internal."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Idx_Display"}),(0,i.jsx)(n.td,{}),(0,i.jsx)(n.td,{children:"Internal."})]})]})]}),"\n",(0,i.jsx)(n.p,{children:"Property index."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>d,x:()=>a});var t=s(96540);const i={},r=t.createContext(i);function d(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);
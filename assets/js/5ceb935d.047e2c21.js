"use strict";(self.webpackChunkvirtalis_docs=self.webpackChunkvirtalis_docs||[]).push([[69029],{91200:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>c,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"visionary-render-programming/reference/c-api/classes/metanodes/meta-haptic-device","title":"Meta_HapticDevice","description":"Module: Metanodes / Definitions","source":"@site/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-haptic-device.mdx","sourceDirName":"visionary-render-programming/reference/c-api/classes/metanodes","slug":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-haptic-device","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-haptic-device","draft":false,"unlisted":false,"editUrl":"https://github.com/virtalis/docs/tree/master/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-haptic-device.mdx","tags":[],"version":"current","lastUpdatedAt":1730817102000,"frontMatter":{"title":"Meta_HapticDevice","summary":"A HapticDevice represents a connection to a device such as a Phantom Omni. Only one instance is required in a scene."},"sidebar":"visionaryRenderProgrammingSidebar","previous":{"title":"Meta_GUI","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-gui"},"next":{"title":"Meta_HapticNode","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-haptic-node"}}');var i=t(74848),r=t(28453);const c={title:"Meta_HapticDevice",summary:"A HapticDevice represents a connection to a device such as a Phantom Omni. Only one instance is required in a scene."},a="Meta_HapticDevice",d={},o=[{value:"Public Types",id:"public-types",level:2},{value:"Detailed Description",id:"detailed-description",level:2},{value:"Public Types Documentation",id:"public-types-documentation",level:2},{value:"enum IDX",id:"enum-idx",level:3},{value:"enum SpaceMode",id:"enum-spacemode",level:3},{value:"enum TouchableFace",id:"enum-touchableface",level:3}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"meta_hapticdevice",children:"Meta_HapticDevice"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Module:"})," ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/",children:"Metanodes"})})," ",(0,i.jsx)(n.strong,{children:"/"})," ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/definitions",children:"Definitions"})})]}),"\n",(0,i.jsxs)(n.p,{children:["A HapticDevice represents a connection to a device such as a Phantom Omni. Only one instance is required in a scene.  ",(0,i.jsx)(n.a,{href:"#detailed-description",children:"More..."})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"#include <meta_haptic.hpp>"})}),"\n",(0,i.jsx)(n.h2,{id:"public-types",children:"Public Types"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Name"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"enum"}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"#enum-idx",children:"IDX"})})," { Idx_Enabled, Idx_Position, Idx_Rotation, Idx_Velocity, Idx_GeometryGrabRadius, Idx_LinkedAssembly, Idx_WorkspaceTranslation, Idx_WorkspaceRotationOffset, Idx_WorkspaceSize, Idx_HapticSpaceMode, Idx_DrawHapticWorkspace, Idx_TouchableFace }",(0,i.jsx)("br",{}),"Property index."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"enum"}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"#enum-spacemode",children:"SpaceMode"})})," { FixedSpace, FixedCameraAlignedSpace, CameraAttachedSpace }",(0,i.jsx)("br",{}),"Values for Idx_HapticSpaceMode."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"enum"}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"#enum-touchableface",children:"TouchableFace"})})," { FrontFace, BackFace, FrontAndBackFace }",(0,i.jsx)("br",{}),"Values for Idx_TouchableFace."]})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"detailed-description",children:"Detailed Description"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"struct Meta_HapticDevice;\n"})}),"\n",(0,i.jsx)(n.p,{children:"A HapticDevice represents a connection to a device such as a Phantom Omni. Only one instance is required in a scene."}),"\n",(0,i.jsxs)(n.p,{children:["The buttons on the device trigger KeyPress and KeyRelease ",(0,i.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-event-handler",children:"Meta_EventHandler"})," nodes that can be added as children of this node."]}),"\n",(0,i.jsxs)(n.p,{children:["The three buttons on the device dispatch ",(0,i.jsx)(n.code,{children:"__KeyCode"})," values of ",(0,i.jsx)(n.code,{children:"1100"}),", ",(0,i.jsx)(n.code,{children:"1101"}),", and ",(0,i.jsx)(n.code,{children:"1102"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"public-types-documentation",children:"Public Types Documentation"}),"\n",(0,i.jsx)(n.h3,{id:"enum-idx",children:"enum IDX"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Enumerator"}),(0,i.jsx)(n.th,{children:"Value"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Idx_Enabled"}),(0,i.jsx)(n.td,{}),(0,i.jsx)(n.td,{children:"bool - Enables haptics using the connected Omni device"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Idx_Position"}),(0,i.jsx)(n.td,{}),(0,i.jsx)(n.td,{children:"vec3w - Contains the current position of the haptic cursor in world space"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Idx_Rotation"}),(0,i.jsx)(n.td,{}),(0,i.jsx)(n.td,{children:"vec3w - Contains the current rotation of the haptic cursor in world space"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Idx_Velocity"}),(0,i.jsx)(n.td,{}),(0,i.jsx)(n.td,{children:"vec3w - Contains the current velocity of the haptic cursor"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Idx_GeometryGrabRadius"}),(0,i.jsx)(n.td,{}),(0,i.jsx)(n.td,{children:"float - Radius to grab geometry around the haptic cursor scaled to workspace size. Performance intensive; Can be reduced for scenes containing complex meshes at the expense of potential missed hits."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Idx_LinkedAssembly"}),(0,i.jsx)(n.td,{}),(0,i.jsx)(n.td,{children:"link - Link to an assembly providing the visual representation of the haptic cursor"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Idx_WorkspaceTranslation"}),(0,i.jsx)(n.td,{}),(0,i.jsx)(n.td,{children:"vec3w - Translation of the haptic workspace relative according to the value of Idx_HapticSpaceMode"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Idx_WorkspaceRotationOffset"}),(0,i.jsx)(n.td,{}),(0,i.jsx)(n.td,{children:"vec3w - Rotation offset of the haptic workspace that can be used to account for alignment of physical device installation"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Idx_WorkspaceSize"}),(0,i.jsx)(n.td,{}),(0,i.jsx)(n.td,{children:"float - The spherical workspace diameter"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Idx_HapticSpaceMode"}),(0,i.jsx)(n.td,{}),(0,i.jsx)(n.td,{children:"SpaceMode - How to position the haptic space (using the WorkspaceTranslation)."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Idx_DrawHapticWorkspace"}),(0,i.jsx)(n.td,{}),(0,i.jsx)(n.td,{children:"bool - Draws a visual representation of the workspace showing the approximate range of movement of the device"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Idx_TouchableFace"}),(0,i.jsx)(n.td,{}),(0,i.jsx)(n.td,{children:"TouchableFace - Specifies which faces of shapes will be touchable"})]})]})]}),"\n",(0,i.jsx)(n.p,{children:"Property index."}),"\n",(0,i.jsx)(n.h3,{id:"enum-spacemode",children:"enum SpaceMode"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Enumerator"}),(0,i.jsx)(n.th,{children:"Value"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"FixedSpace"}),(0,i.jsx)(n.td,{}),(0,i.jsx)(n.td,{children:"Fixed world space. Camera may move freely as the haptic world is not connected to the camera."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"FixedCameraAlignedSpace"}),(0,i.jsx)(n.td,{}),(0,i.jsx)(n.td,{children:"Fixed world space but aligned to camera orientation. Camera must be stationary for haptics to be enabled."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"CameraAttachedSpace"}),(0,i.jsx)(n.td,{}),(0,i.jsx)(n.td,{children:"Attached to camera. Camera must be stationary for haptics to be enabled."})]})]})]}),"\n",(0,i.jsx)(n.p,{children:"Values for Idx_HapticSpaceMode."}),"\n",(0,i.jsx)(n.h3,{id:"enum-touchableface",children:"enum TouchableFace"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Enumerator"}),(0,i.jsx)(n.th,{children:"Value"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"FrontFace"}),(0,i.jsx)(n.td,{}),(0,i.jsx)(n.td,{children:"Haptic collisions use front faces of geometry."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"BackFace"}),(0,i.jsx)(n.td,{}),(0,i.jsx)(n.td,{children:"Haptic collisions use back faces of geometry."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"FrontAndBackFace"}),(0,i.jsx)(n.td,{}),(0,i.jsx)(n.td,{children:"Haptic collisions use both faces of geometry."})]})]})]}),"\n",(0,i.jsx)(n.p,{children:"Values for Idx_TouchableFace."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>a});var s=t(96540);const i={},r=s.createContext(i);function c(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);
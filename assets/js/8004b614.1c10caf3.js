"use strict";(self.webpackChunkvirtalis_docs=self.webpackChunkvirtalis_docs||[]).push([[8320],{97790:(e,t,d)=>{d.r(t),d.d(t,{assets:()=>x,contentTitle:()=>l,default:()=>h,frontMatter:()=>n,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"visionary-render-programming/reference/c-api/classes/metanodes/meta-particle-system","title":"Meta_ParticleSystem","description":"Module: Metanodes / Definitions","source":"@site/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-particle-system.mdx","sourceDirName":"visionary-render-programming/reference/c-api/classes/metanodes","slug":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-particle-system","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-particle-system","draft":false,"unlisted":false,"editUrl":"https://github.com/virtalis/docs/tree/master/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-particle-system.mdx","tags":[],"version":"current","frontMatter":{"title":"Meta_ParticleSystem","summary":"A ParticleSystem emits particles. It gets its transform from a parent Meta_Assembly."},"sidebar":"visionaryRenderProgrammingSidebar","previous":{"title":"Meta_Panel","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-panel"},"next":{"title":"Meta_Permission","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-permission"}}');var i=d(74848),r=d(28453);const n={title:"Meta_ParticleSystem",summary:"A ParticleSystem emits particles. It gets its transform from a parent Meta_Assembly."},l="Meta_ParticleSystem",x={},c=[{value:"Public Types",id:"public-types",level:2},{value:"Public Types Documentation",id:"public-types-documentation",level:2},{value:"enum BillboardMode",id:"enum-billboardmode",level:3},{value:"enum BlendMode",id:"enum-blendmode",level:3},{value:"enum BurstDataTypes",id:"enum-burstdatatypes",level:3},{value:"enum EmitShape",id:"enum-emitshape",level:3},{value:"enum IDX",id:"enum-idx",level:3},{value:"enum ParticleInputType",id:"enum-particleinputtype",level:3},{value:"enum ScaleMode",id:"enum-scalemode",level:3},{value:"enum TilingMode",id:"enum-tilingmode",level:3}];function a(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"meta_particlesystem",children:"Meta_ParticleSystem"})}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Module:"})," ",(0,i.jsx)(t.strong,{children:(0,i.jsx)(t.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/",children:"Metanodes"})})," ",(0,i.jsx)(t.strong,{children:"/"})," ",(0,i.jsx)(t.strong,{children:(0,i.jsx)(t.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/definitions",children:"Definitions"})})]}),"\n",(0,i.jsxs)(t.p,{children:["A ParticleSystem emits particles. It gets its transform from a parent ",(0,i.jsx)(t.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-assembly",children:"Meta_Assembly"}),"."]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.code,{children:"#include <meta_particles.hpp>"})}),"\n",(0,i.jsx)(t.h2,{id:"public-types",children:"Public Types"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Type"}),(0,i.jsx)(t.th,{children:"Name"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"enum"}),(0,i.jsxs)(t.td,{children:[(0,i.jsx)(t.strong,{children:(0,i.jsx)(t.a,{href:"#enum-billboardmode",children:"BillboardMode"})})," { BillboardModeXY, BillboardModeXZ }",(0,i.jsx)("br",{}),"Values for Idx_BillboardMode."]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"enum"}),(0,i.jsxs)(t.td,{children:[(0,i.jsx)(t.strong,{children:(0,i.jsx)(t.a,{href:"#enum-blendmode",children:"BlendMode"})})," { Additive, AlphaBlend }",(0,i.jsx)("br",{}),"Values for Idx_BlendMode."]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"enum"}),(0,i.jsxs)(t.td,{children:[(0,i.jsx)(t.strong,{children:(0,i.jsx)(t.a,{href:"#enum-burstdatatypes",children:"BurstDataTypes"})})," { BurstDataTypes_Time, BurstDataTypes_Min, BurstDataTypes_Max, BurstDataTypes_Cycles, BurstDataTypes_Intervals, BurstDataTypes_Count }"]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"enum"}),(0,i.jsxs)(t.td,{children:[(0,i.jsx)(t.strong,{children:(0,i.jsx)(t.a,{href:"#enum-emitshape",children:"EmitShape"})})," { Sphere, Hemisphere, Cone, Box, Circle, Mesh }",(0,i.jsx)("br",{}),"Values for Idx_EmitShape."]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"enum"}),(0,i.jsxs)(t.td,{children:[(0,i.jsx)(t.strong,{children:(0,i.jsx)(t.a,{href:"#enum-idx",children:"IDX"})})," { Idx_Enabled, Idx_Duration, Idx_Looping, Idx_LifeSpanInputType, Idx_LifeSpanValue, Idx_LifeSpanMinMax, Idx_LifeSpanCurve, Idx_StartSpeedInputType, Idx_StartSpeedValue, Idx_StartSpeedMinMax, Idx_StartSpeedCurve, Idx_StartSizeInputType, Idx_StartSizeValue, Idx_StartSizeMinMax, Idx_StartSizeCurve, Idx_StartRotationInputType, Idx_StartRotationValue, Idx_StartRotationMinMax, Idx_StartRotationCurve, Idx_RotationDirectionRandom, Idx_LifetimeGradient, Idx_MaxParticles, Idx_MainTexture, Idx_BlendMode, Idx_SmoothDist, Idx_TilingMode, Idx_TextureTilesNumber, Idx_AnimationSpeed, Idx_BillboardMode, Idx_OrientU, Idx_OrientV, Idx_FlipU, Idx_FlipV, Idx_WorldSpace, Idx_ScaleMode, Idx_Lit, Idx_AlphaOrderOffset, Idx_EmitRate, Idx_Bursts, Idx_EmitShape, Idx_EmitShapeAngle, Idx_EmitMesh, Idx_EmitShapeSize, Idx_EmitShapeShell, Idx_EmitRandomDirection, Idx_VelocityOverLifetimeEnabled, Idx_VelocityOverLifetime, Idx_VelocityOverLifetimeMultiplier, Idx_VelocityLimitOverLifetimeEnabled, Idx_VelocityLimitOverLifetime, Idx_Damping, Idx_SizeOverLifetimeEnabled, Idx_SizeOverLifetime, Idx_SizeOverVelocityEnabled, Idx_SizeOverVelocity, Idx_SizeOverVelocityRange, Idx_RotationSpeedOverLifetimeEnabled, Idx_RotationSpeedOverLifetime, Idx_Force }",(0,i.jsx)("br",{}),"Property index."]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"enum"}),(0,i.jsxs)(t.td,{children:[(0,i.jsx)(t.strong,{children:(0,i.jsx)(t.a,{href:"#enum-particleinputtype",children:"ParticleInputType"})})," { Value, MinMax, Curve }",(0,i.jsx)("br",{}),"Values for InputType properties."]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"enum"}),(0,i.jsxs)(t.td,{children:[(0,i.jsx)(t.strong,{children:(0,i.jsx)(t.a,{href:"#enum-scalemode",children:"ScaleMode"})})," { ScaleModeNone, ScaleModeShape, ScaleModeFull }",(0,i.jsx)("br",{}),"Values for Idx_ScaleMode."]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"enum"}),(0,i.jsxs)(t.td,{children:[(0,i.jsx)(t.strong,{children:(0,i.jsx)(t.a,{href:"#enum-tilingmode",children:"TilingMode"})})," { TilingModeNone, TilingModeRandom, TilingModeAnimated, TilingModeAnimatedRowRandom }",(0,i.jsx)("br",{}),"Values for Idx_TilingMode."]})]})]})]}),"\n",(0,i.jsx)(t.h2,{id:"public-types-documentation",children:"Public Types Documentation"}),"\n",(0,i.jsx)(t.h3,{id:"enum-billboardmode",children:"enum BillboardMode"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Enumerator"}),(0,i.jsx)(t.th,{children:"Value"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"BillboardModeXY"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"BillboardModeXZ"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{})]})]})]}),"\n",(0,i.jsx)(t.p,{children:"Values for Idx_BillboardMode."}),"\n",(0,i.jsx)(t.h3,{id:"enum-blendmode",children:"enum BlendMode"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Enumerator"}),(0,i.jsx)(t.th,{children:"Value"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Additive"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"AlphaBlend"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{})]})]})]}),"\n",(0,i.jsx)(t.p,{children:"Values for Idx_BlendMode."}),"\n",(0,i.jsx)(t.h3,{id:"enum-burstdatatypes",children:"enum BurstDataTypes"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Enumerator"}),(0,i.jsx)(t.th,{children:"Value"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"BurstDataTypes_Time"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"BurstDataTypes_Min"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"BurstDataTypes_Max"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"BurstDataTypes_Cycles"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"BurstDataTypes_Intervals"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"BurstDataTypes_Count"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{})]})]})]}),"\n",(0,i.jsx)(t.h3,{id:"enum-emitshape",children:"enum EmitShape"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Enumerator"}),(0,i.jsx)(t.th,{children:"Value"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Sphere"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Hemisphere"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Cone"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Box"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Circle"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Mesh"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{})]})]})]}),"\n",(0,i.jsx)(t.p,{children:"Values for Idx_EmitShape."}),"\n",(0,i.jsx)(t.h3,{id:"enum-idx",children:"enum IDX"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Enumerator"}),(0,i.jsx)(t.th,{children:"Value"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Idx_Enabled"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"bool - If false particle system isn't drawn or updated."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Idx_Duration"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"float - Duration of a cycle of the particle system"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Idx_Looping"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"bool - If true, the system restarts at the end of each cycle"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Idx_LifeSpanInputType"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"ParticleInputType (int) - Specifies the method of lifespan input for how long a particle lives, in seconds"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Idx_LifeSpanValue"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"float - data for Value mode"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Idx_LifeSpanMinMax"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"vec2f - data for MinMax mode"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Idx_LifeSpanCurve"}),(0,i.jsx)(t.td,{}),(0,i.jsxs)(t.td,{children:[(0,i.jsx)(t.code,{children:"vector<float>"})," - data for Curve mode"]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Idx_StartSpeedInputType"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"ParticleInputType (int) - Specifies the method of particle start speed input"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Idx_StartSpeedValue"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"float - data for Value mode"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Idx_StartSpeedMinMax"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"vec2f - data for MinMax mode"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Idx_StartSpeedCurve"}),(0,i.jsx)(t.td,{}),(0,i.jsxs)(t.td,{children:[(0,i.jsx)(t.code,{children:"vector<float>"})," - data for Curve mode"]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Idx_StartSizeInputType"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"ParticleInputType (int) - Specifies the method of particle start size input"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Idx_StartSizeValue"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"float - data for Value mode"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Idx_StartSizeMinMax"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"vec2f - data for MinMax mode"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Idx_StartSizeCurve"}),(0,i.jsx)(t.td,{}),(0,i.jsxs)(t.td,{children:[(0,i.jsx)(t.code,{children:"vector<float>"})," - data for Curve mode"]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Idx_StartRotationInputType"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"ParticleInputType (int) - Specifies the method of initial particle rotation input"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Idx_StartRotationValue"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"float - data for Value mode"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Idx_StartRotationMinMax"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"vec2f - data for MinMax mode"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Idx_StartRotationCurve"}),(0,i.jsx)(t.td,{}),(0,i.jsxs)(t.td,{children:[(0,i.jsx)(t.code,{children:"vector<float>"})," - data for Curve mode"]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Idx_RotationDirectionRandom"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"bool - Randomise rotation direction"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Idx_LifetimeGradient"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"link - Specifies a gradient to use to control the lifetime of particles"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Idx_MaxParticles"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"int - Maximum number of particles in flight at once. Special value of zero means no limit to the number of particles."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Idx_MainTexture"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"link - Specifies a texture containing particle sprite data to use for rendering the particles"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Idx_BlendMode"}),(0,i.jsx)(t.td,{}),(0,i.jsxs)(t.td,{children:[(0,i.jsx)(t.a,{href:"#enum-blendmode",children:"BlendMode"})," (int) - Specifies the particle renderer blend mode"]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Idx_SmoothDist"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"float - When part of a particle is within this distance of some background scene geoemtry, it will be faded over this distance to give a smoother appearance at intersections."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Idx_TilingMode"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"TilingMode (int) - Specifies how to use the texture sprite sheet"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Idx_TextureTilesNumber"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"vec2i - for all tiling modes except None, specifies the number of tiles in the sheet (X,Y)"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Idx_AnimationSpeed"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"float - For animated tiling modes, specifies the speed multiplier for texture sheet animation"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Idx_BillboardMode"}),(0,i.jsx)(t.td,{}),(0,i.jsxs)(t.td,{children:[(0,i.jsx)(t.a,{href:"#enum-billboardmode",children:"BillboardMode"})," (int) - Specify how the particles should be aligned"]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Idx_OrientU"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"bool -"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Idx_OrientV"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"bool -"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Idx_FlipU"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"bool -"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Idx_FlipV"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"bool -"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Idx_WorldSpace"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"bool -"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Idx_ScaleMode"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"ScaleMode (int) -"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Idx_Lit"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"bool -"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Idx_AlphaOrderOffset"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"float -"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Idx_EmitRate"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"float - Rate at which particles are emitted, in particles-per-second."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Idx_Bursts"}),(0,i.jsx)(t.td,{}),(0,i.jsxs)(t.td,{children:[(0,i.jsx)(t.code,{children:"vector<float>"})," -"]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Idx_EmitShape"}),(0,i.jsx)(t.td,{}),(0,i.jsxs)(t.td,{children:[(0,i.jsx)(t.a,{href:"#enum-emitshape",children:"EmitShape"})," (int) - Controls the initial position and direction of an emitted particle."]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Idx_EmitShapeAngle"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"float - For Cone and Circle, the angle range of the shape"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Idx_EmitMesh"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"link - For Mesh, link to the mesh to use"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Idx_EmitShapeSize"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"float - Size of shape within which particles are emitted at random positions."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Idx_EmitShapeShell"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"bool - If true, the particles are emitted from the shell of the shape rather than within it."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Idx_EmitRandomDirection"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"bool - If false, the particles are emitted in directions relating to the shape, if true the directions are completely random."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Idx_VelocityOverLifetimeEnabled"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"bool -"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Idx_VelocityOverLifetime"}),(0,i.jsx)(t.td,{}),(0,i.jsxs)(t.td,{children:[(0,i.jsx)(t.code,{children:"vector<float>"})," -"]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Idx_VelocityOverLifetimeMultiplier"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"float -"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Idx_VelocityLimitOverLifetimeEnabled"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"bool -"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Idx_VelocityLimitOverLifetime"}),(0,i.jsx)(t.td,{}),(0,i.jsxs)(t.td,{children:[(0,i.jsx)(t.code,{children:"vector<float>"})," -"]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Idx_Damping"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"float -"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Idx_SizeOverLifetimeEnabled"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"bool -"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Idx_SizeOverLifetime"}),(0,i.jsx)(t.td,{}),(0,i.jsxs)(t.td,{children:[(0,i.jsx)(t.code,{children:"vector<float>"})," -"]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Idx_SizeOverVelocityEnabled"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"bool -"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Idx_SizeOverVelocity"}),(0,i.jsx)(t.td,{}),(0,i.jsxs)(t.td,{children:[(0,i.jsx)(t.code,{children:"vector<float>"})," -"]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Idx_SizeOverVelocityRange"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"vec2f -"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Idx_RotationSpeedOverLifetimeEnabled"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"bool -"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Idx_RotationSpeedOverLifetime"}),(0,i.jsx)(t.td,{}),(0,i.jsxs)(t.td,{children:[(0,i.jsx)(t.code,{children:"vector<float>"})," -"]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Idx_Force"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"vec3f - constant force applied to particles during their lifetime."})]})]})]}),"\n",(0,i.jsx)(t.p,{children:"Property index."}),"\n",(0,i.jsx)(t.h3,{id:"enum-particleinputtype",children:"enum ParticleInputType"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Enumerator"}),(0,i.jsx)(t.th,{children:"Value"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Value"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"float specifies single value"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"MinMax"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"vec2 specifies minimum and maximum values"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Curve"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"Vector specifies points on a catmull-rom spline."})]})]})]}),"\n",(0,i.jsx)(t.p,{children:"Values for InputType properties."}),"\n",(0,i.jsx)(t.h3,{id:"enum-scalemode",children:"enum ScaleMode"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Enumerator"}),(0,i.jsx)(t.th,{children:"Value"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"ScaleModeNone"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"ScaleModeShape"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"ScaleModeFull"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{})]})]})]}),"\n",(0,i.jsx)(t.p,{children:"Values for Idx_ScaleMode."}),"\n",(0,i.jsx)(t.h3,{id:"enum-tilingmode",children:"enum TilingMode"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Enumerator"}),(0,i.jsx)(t.th,{children:"Value"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"TilingModeNone"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"TilingModeRandom"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"TilingModeAnimated"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"TilingModeAnimatedRowRandom"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{})]})]})]}),"\n",(0,i.jsx)(t.p,{children:"Values for Idx_TilingMode."})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},28453:(e,t,d)=>{d.d(t,{R:()=>n,x:()=>l});var s=d(96540);const i={},r=s.createContext(i);function n(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:n(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);
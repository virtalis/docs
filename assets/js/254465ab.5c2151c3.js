"use strict";(self.webpackChunkvirtalis_docs=self.webpackChunkvirtalis_docs||[]).push([[11558],{25793:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>d,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"visionary-render-programming/reference/c-api/classes/metanodes/meta-open-xr-viewport","title":"Meta_OpenXRViewport","description":"Module: Metanodes / Definitions","source":"@site/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-open-xr-viewport.mdx","sourceDirName":"visionary-render-programming/reference/c-api/classes/metanodes","slug":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-open-xr-viewport","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-open-xr-viewport","draft":false,"unlisted":false,"editUrl":"https://github.com/virtalis/docs/tree/master/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-open-xr-viewport.mdx","tags":[],"version":"current","lastUpdatedAt":1730817102000,"frontMatter":{"title":"Meta_OpenXRViewport","summary":"An OpenXRViewport represents a viewport occupying a specified rectangle of a window (range 0 to 1) which renders the 3D scene using the projection and distortion calculated by the OpenXR SDK."},"sidebar":"visionaryRenderProgrammingSidebar","previous":{"title":"Meta_OpenVRViewport","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-open-vr-viewport"},"next":{"title":"Meta_Panel","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-panel"}}');var t=n(74848),s=n(28453);const d={title:"Meta_OpenXRViewport",summary:"An OpenXRViewport represents a viewport occupying a specified rectangle of a window (range 0 to 1) which renders the 3D scene using the projection and distortion calculated by the OpenXR SDK."},o="Meta_OpenXRViewport",a={},c=[{value:"Public Types",id:"public-types",level:2},{value:"Public Types Documentation",id:"public-types-documentation",level:2},{value:"enum IDX",id:"enum-idx",level:3}];function l(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"meta_openxrviewport",children:"Meta_OpenXRViewport"})}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Module:"})," ",(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/",children:"Metanodes"})})," ",(0,t.jsx)(r.strong,{children:"/"})," ",(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/definitions",children:"Definitions"})})]}),"\n",(0,t.jsx)(r.p,{children:"An OpenXRViewport represents a viewport occupying a specified rectangle of a window (range 0 to 1) which renders the 3D scene using the projection and distortion calculated by the OpenXR SDK."}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.code,{children:"#include <meta_view.hpp>"})}),"\n",(0,t.jsx)(r.h2,{id:"public-types",children:"Public Types"}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"Type"}),(0,t.jsx)(r.th,{children:"Name"})]})}),(0,t.jsx)(r.tbody,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"enum"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"#enum-idx",children:"IDX"})})," { Idx_Enabled, Idx_Rectangle, Idx_Camera, Idx_ClipRange, Idx_MirrorFillWindow, Idx_MirrorSplitScreen, Idx_DrawMirror, Idx_UseVisibilityMask }"]})]})})]}),"\n",(0,t.jsx)(r.h2,{id:"public-types-documentation",children:"Public Types Documentation"}),"\n",(0,t.jsx)(r.h3,{id:"enum-idx",children:"enum IDX"}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"Enumerator"}),(0,t.jsx)(r.th,{children:"Value"}),(0,t.jsx)(r.th,{children:"Description"})]})}),(0,t.jsxs)(r.tbody,{children:[(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Idx_Enabled"}),(0,t.jsx)(r.td,{}),(0,t.jsx)(r.td,{children:"bool - When enabled, viewport is drawn to the screen"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Idx_Rectangle"}),(0,t.jsx)(r.td,{}),(0,t.jsxs)(r.td,{children:["vec4f - The viewport bounds, scaled on the screen by the ViewportLayout size. (e.g. layout size ",(0,t.jsx)(r.code,{children:"2.0, 1.0"}),", and child viewport width ",(0,t.jsx)(r.code,{children:"1.0"})," will fill half the screen with the viewport)"]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Idx_Camera"}),(0,t.jsx)(r.td,{}),(0,t.jsx)(r.td,{children:"link - The camera from which the scene is rendered"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Idx_ClipRange"}),(0,t.jsx)(r.td,{}),(0,t.jsx)(r.td,{children:"vec2w - Specifies the default near and far clip planes for this viewport"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Idx_MirrorFillWindow"}),(0,t.jsx)(r.td,{}),(0,t.jsx)(r.td,{children:"bool - if true some of the image seen in the rift will be cropped when displayed in the main window."})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Idx_MirrorSplitScreen"}),(0,t.jsx)(r.td,{}),(0,t.jsx)(r.td,{children:"bool - if true then both eyes will be displayed in a split screen fashion"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Idx_DrawMirror"}),(0,t.jsx)(r.td,{}),(0,t.jsx)(r.td,{children:"bool - whether or not to draw the mirror viewport to the main window"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Idx_UseVisibilityMask"}),(0,t.jsx)(r.td,{}),(0,t.jsx)(r.td,{children:"Whether use the mask provided by the device to avoid drawing to invisible areas of the display."})]})]})]})]})}function h(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},28453:(e,r,n)=>{n.d(r,{R:()=>d,x:()=>o});var i=n(96540);const t={},s=i.createContext(t);function d(e){const r=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),i.createElement(s.Provider,{value:r},e.children)}}}]);
"use strict";(self.webpackChunkvirtalis_docs=self.webpackChunkvirtalis_docs||[]).push([[74221],{67059:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"visionary-render-programming/reference/lua-api/classes/vrplane","title":"vrplane","description":"Module: Maths","source":"@site/docs/visionary-render-programming/reference/lua-api/classes/vrplane.mdx","sourceDirName":"visionary-render-programming/reference/lua-api/classes","slug":"/visionary-render-programming/reference/lua-api/classes/vrplane","permalink":"/visionary-render-programming/reference/lua-api/classes/vrplane","draft":false,"unlisted":false,"editUrl":"https://github.com/virtalis/docs/tree/master/docs/visionary-render-programming/reference/lua-api/classes/vrplane.mdx","tags":[],"version":"current","lastUpdatedAt":1730817102000,"frontMatter":{"title":"vrplane","summary":"A plane."},"sidebar":"visionaryRenderProgrammingSidebar","previous":{"title":"vrnode","permalink":"/visionary-render-programming/reference/lua-api/classes/vrnode"},"next":{"title":"vrquaternion","permalink":"/visionary-render-programming/reference/lua-api/classes/vrquaternion"}}');var s=r(74848),i=r(28453);const a={title:"vrplane",summary:"A plane."},l="vrplane",c={},o=[{value:"Public Functions",id:"public-functions",level:2},{value:"Public Attributes",id:"public-attributes",level:2},{value:"Public Functions Documentation",id:"public-functions-documentation",level:2},{value:"copy",id:"copy",level:3},{value:"getDistance",id:"getdistance",level:3},{value:"lineIntersect",id:"lineintersect",level:3},{value:"operator=",id:"operator",level:3},{value:"rayIntersect",id:"rayintersect",level:3},{value:"transform",id:"transform",level:3},{value:"Public Attributes Documentation",id:"public-attributes-documentation",level:2},{value:"distance",id:"distance",level:3},{value:"normal",id:"normal",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"vrplane",children:"vrplane"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Module:"})," ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/visionary-render-programming/reference/lua-api/modules/maths",children:"Maths"})})]}),"\n",(0,s.jsx)(n.p,{children:"A plane."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"#include <lua_api.h>"})}),"\n",(0,s.jsx)(n.h2,{id:"public-functions",children:"Public Functions"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Name"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Any"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#copy",children:"copy"})}),"()",(0,s.jsx)("br",{}),"(vrCopy) Returns a copy of a Vector, Matrix, Ray, Sphere, AABBox, Quaternion or Plane"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"number"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#getdistance",children:"getDistance"})}),"(vrvec3](../classes/vrvec3.mdx) point)",(0,s.jsx)("br",{}),"(vrPlaneGetPointDistance) Returns the distance a point is from the plane. A negative value means that the point is behind the plane. A positive value means the point is in front. A zero means it is on the plane."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"boolean"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#lineintersect",children:"lineIntersect"})}),"(vrvec3](../classes/vrvec3.mdx) point1, ",(0,s.jsx)(n.a,{href:"/visionary-render-programming/reference/lua-api/classes/vrvec3",children:"vrvec3"})," point2)",(0,s.jsx)("br",{}),"(vrPlaneLineIntersect) Returns whether or not a line made of two points will intersect a plane."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Any"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#operator",children:"operator="})}),"()"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"number"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#rayintersect",children:"rayIntersect"})}),"(vrray](../classes/vrray.mdx) ray)",(0,s.jsx)("br",{}),"(vrPlaneRayIntersect) Returns how far along the ray an intersection point with this plane is."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"/visionary-render-programming/reference/lua-api/classes/vrplane",children:"vrplane"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#transform",children:"transform"})}),"(vrmatrix4](../classes/vrmatrix4.mdx) mat)",(0,s.jsx)("br",{}),"(vrPlaneTransform) Returns a plane transformed by a matrix."]})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"public-attributes",children:"Public Attributes"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Name"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"number"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#distance",children:"distance"})})," ",(0,s.jsx)("br",{}),"Dot product of any point on the plane with its normal."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"/visionary-render-programming/reference/lua-api/classes/vrvec3",children:"vrvec3"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#normal",children:"normal"})})," ",(0,s.jsx)("br",{}),"Normal of the plane."]})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"public-functions-documentation",children:"Public Functions Documentation"}),"\n",(0,s.jsx)(n.h3,{id:"copy",children:"copy"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"Any copy()\n"})}),"\n",(0,s.jsx)(n.p,{children:"(vrCopy) Returns a copy of a Vector, Matrix, Ray, Sphere, AABBox, Quaternion or Plane"}),"\n",(0,s.jsx)(n.h3,{id:"getdistance",children:"getDistance"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"number getDistance(\r\n    vrvec3 point\r\n)\n"})}),"\n",(0,s.jsx)(n.p,{children:"(vrPlaneGetPointDistance) Returns the distance a point is from the plane. A negative value means that the point is behind the plane. A positive value means the point is in front. A zero means it is on the plane."}),"\n",(0,s.jsx)(n.h3,{id:"lineintersect",children:"lineIntersect"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"boolean lineIntersect(\r\n    vrvec3 point1,\r\n    vrvec3 point2\r\n)\n"})}),"\n",(0,s.jsx)(n.p,{children:"(vrPlaneLineIntersect) Returns whether or not a line made of two points will intersect a plane."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Return"}),": true if the line intersects the plane"]}),"\n",(0,s.jsx)(n.h3,{id:"operator",children:"operator="}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"Any operator=()\n"})}),"\n",(0,s.jsx)(n.h3,{id:"rayintersect",children:"rayIntersect"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"number rayIntersect(\r\n    vrray ray\r\n)\n"})}),"\n",(0,s.jsx)(n.p,{children:"(vrPlaneRayIntersect) Returns how far along the ray an intersection point with this plane is."}),"\n",(0,s.jsx)(n.h3,{id:"transform",children:"transform"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"vrplane transform(\r\n    vrmatrix4 mat\r\n)\n"})}),"\n",(0,s.jsx)(n.p,{children:"(vrPlaneTransform) Returns a plane transformed by a matrix."}),"\n",(0,s.jsx)(n.h2,{id:"public-attributes-documentation",children:"Public Attributes Documentation"}),"\n",(0,s.jsx)(n.h3,{id:"distance",children:"distance"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"number distance;\n"})}),"\n",(0,s.jsx)(n.p,{children:"Dot product of any point on the plane with its normal."}),"\n",(0,s.jsx)(n.h3,{id:"normal",children:"normal"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"vrvec3 normal;\n"})}),"\n",(0,s.jsx)(n.p,{children:"Normal of the plane."})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>l});var t=r(96540);const s={},i=t.createContext(s);function a(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);
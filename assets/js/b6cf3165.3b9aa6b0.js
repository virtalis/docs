"use strict";(self.webpackChunkvirtalis_docs=self.webpackChunkvirtalis_docs||[]).push([[69071],{9557:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>l,metadata:()=>n,toc:()=>o});const n=JSON.parse('{"id":"visionary-render-programming/reference/c-api/classes/metanodes/meta-scrolling-stack","title":"Meta_ScrollingStack","description":"Module: Metanodes / Definitions","source":"@site/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-scrolling-stack.mdx","sourceDirName":"visionary-render-programming/reference/c-api/classes/metanodes","slug":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-scrolling-stack","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-scrolling-stack","draft":false,"unlisted":false,"editUrl":"https://github.com/virtalis/docs/tree/master/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-scrolling-stack.mdx","tags":[],"version":"current","lastUpdatedAt":1730817102000,"frontMatter":{"title":"Meta_ScrollingStack","summary":"A ScrollingStack is a stack that adds scrollbars if its contents are larger than its size. It renders its contents to a texture like Meta_BufferedStack."},"sidebar":"visionaryRenderProgrammingSidebar","previous":{"title":"Meta_ScrollingStackStyle","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-scrolling-stack-style"},"next":{"title":"Meta_Separator","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-separator"}}');var i=t(74848),s=t(28453);const l={title:"Meta_ScrollingStack",summary:"A ScrollingStack is a stack that adds scrollbars if its contents are larger than its size. It renders its contents to a texture like Meta_BufferedStack."},d="Meta_ScrollingStack",c={},o=[{value:"Public Types",id:"public-types",level:2},{value:"Public Types Documentation",id:"public-types-documentation",level:2},{value:"enum IDX",id:"enum-idx",level:3},{value:"enum ScrollDirection",id:"enum-scrolldirection",level:3}];function a(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"meta_scrollingstack",children:"Meta_ScrollingStack"})}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Module:"})," ",(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/",children:"Metanodes"})})," ",(0,i.jsx)(r.strong,{children:"/"})," ",(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/definitions",children:"Definitions"})})]}),"\n",(0,i.jsxs)(r.p,{children:["A ScrollingStack is a stack that adds scrollbars if its contents are larger than its size. It renders its contents to a texture like ",(0,i.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-buffered-stack",children:"Meta_BufferedStack"}),"."]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.code,{children:"#include <meta_gui.hpp>"})}),"\n",(0,i.jsx)(r.h2,{id:"public-types",children:"Public Types"}),"\n",(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.th,{children:"Type"}),(0,i.jsx)(r.th,{children:"Name"})]})}),(0,i.jsxs)(r.tbody,{children:[(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"enum"}),(0,i.jsxs)(r.td,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"#enum-idx",children:"IDX"})})," { Idx_Enabled, Idx_Position, Idx_SizingMode, Idx_MinimumSize, Idx_MaximumSize, Idx_Direction, Idx_HAlign, Idx_VAlign, Idx_Gap, Idx_Style, Idx_Resolution, Idx_MipmapEnabled, Idx_ScrollDirection, Idx_Resizable }",(0,i.jsx)("br",{}),"Property index."]})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"enum"}),(0,i.jsxs)(r.td,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"#enum-scrolldirection",children:"ScrollDirection"})})," { NONE = 0, SCROLLDIRECTION_HORIZONTAL = 1, SCROLLDIRECTION_VERTICAL = 2, SCROLLDIRECTION_BOTH = 3 }",(0,i.jsx)("br",{}),"Values for Idx_ScrollDirection."]})]})]})]}),"\n",(0,i.jsx)(r.h2,{id:"public-types-documentation",children:"Public Types Documentation"}),"\n",(0,i.jsx)(r.h3,{id:"enum-idx",children:"enum IDX"}),"\n",(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.th,{children:"Enumerator"}),(0,i.jsx)(r.th,{children:"Value"}),(0,i.jsx)(r.th,{children:"Description"})]})}),(0,i.jsxs)(r.tbody,{children:[(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"Idx_Enabled"}),(0,i.jsx)(r.td,{}),(0,i.jsx)(r.td,{children:"bool - When enabled, draws itself and its children"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"Idx_Position"}),(0,i.jsx)(r.td,{}),(0,i.jsx)(r.td,{children:"vec3f - Position of the panel relative to its parent"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"Idx_SizingMode"}),(0,i.jsx)(r.td,{}),(0,i.jsxs)(r.td,{children:[(0,i.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-panel#enum-sizingmode",children:"SizingMode"})," (int) - How the panel sizes itself in respect to its contents"]})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"Idx_MinimumSize"}),(0,i.jsx)(r.td,{}),(0,i.jsxs)(r.td,{children:["vec2f - Size of the panel, when ",(0,i.jsx)(r.code,{children:"SizingMode==Fixed"})]})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"Idx_MaximumSize"}),(0,i.jsx)(r.td,{}),(0,i.jsx)(r.td,{children:"vec2f - Maximum size when not in 'fixed' sizing mode; zero indicates no limit"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"Idx_Direction"}),(0,i.jsx)(r.td,{}),(0,i.jsx)(r.td,{children:"Direction (int) - The direction to stack the child objects"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"Idx_HAlign"}),(0,i.jsx)(r.td,{}),(0,i.jsx)(r.td,{children:"HAlign (int) - How to align the objects horizontally"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"Idx_VAlign"}),(0,i.jsx)(r.td,{}),(0,i.jsx)(r.td,{children:"VAlign (int) - How to align the objects vertically"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"Idx_Gap"}),(0,i.jsx)(r.td,{}),(0,i.jsx)(r.td,{children:"float - Specifies the gap size between objects (padding)"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"Idx_Style"}),(0,i.jsx)(r.td,{}),(0,i.jsx)(r.td,{children:"link - Style to apply to the stack (Meta_ScrollingStackStyle)"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"Idx_Resolution"}),(0,i.jsx)(r.td,{}),(0,i.jsx)(r.td,{children:"float Specifies the resolution of the frame buffer object used to render this stack"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"Idx_MipmapEnabled"}),(0,i.jsx)(r.td,{}),(0,i.jsx)(r.td,{children:"bool When enabled, generates mipmaps to improve quality when rendering at smaller sizes"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"Idx_ScrollDirection"}),(0,i.jsx)(r.td,{}),(0,i.jsx)(r.td,{children:"ScrollDirection (int) - Which direction(s) to scroll in"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"Idx_Resizable"}),(0,i.jsx)(r.td,{}),(0,i.jsx)(r.td,{children:"bool Whether the stack is resizable using the cursor"})]})]})]}),"\n",(0,i.jsx)(r.p,{children:"Property index."}),"\n",(0,i.jsx)(r.h3,{id:"enum-scrolldirection",children:"enum ScrollDirection"}),"\n",(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.th,{children:"Enumerator"}),(0,i.jsx)(r.th,{children:"Value"}),(0,i.jsx)(r.th,{children:"Description"})]})}),(0,i.jsxs)(r.tbody,{children:[(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"NONE"}),(0,i.jsx)(r.td,{children:"0"}),(0,i.jsxs)(r.td,{children:["No scroll bars (Symbols - C: ",(0,i.jsx)(r.code,{children:'"ScrollNone"'}),", Lua: ",(0,i.jsx)(r.code,{children:"__ScrollingStack_ScrollNone"}),")"]})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"SCROLLDIRECTION_HORIZONTAL"}),(0,i.jsx)(r.td,{children:"1"}),(0,i.jsxs)(r.td,{children:["Horizontal scroll bar (Symbols - C: ",(0,i.jsx)(r.code,{children:'"ScrollHorizontal"'}),", Lua: ",(0,i.jsx)(r.code,{children:"__ScrollingStack_ScrollHorizontal"}),")"]})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"SCROLLDIRECTION_VERTICAL"}),(0,i.jsx)(r.td,{children:"2"}),(0,i.jsxs)(r.td,{children:["Vertical scroll bar (Symbols - C: ",(0,i.jsx)(r.code,{children:'"ScrollVertical"'}),", Lua: ",(0,i.jsx)(r.code,{children:"__ScrollingStack_ScrollVertical"}),")"]})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"SCROLLDIRECTION_BOTH"}),(0,i.jsx)(r.td,{children:"3"}),(0,i.jsxs)(r.td,{children:["Horizontal and Vertical scroll bars (Symbols - C: ",(0,i.jsx)(r.code,{children:'"ScrollBoth"'}),", Lua: ",(0,i.jsx)(r.code,{children:"__ScrollingStack_ScrollBoth"}),")"]})]})]})]}),"\n",(0,i.jsx)(r.p,{children:"Values for Idx_ScrollDirection."})]})}function h(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},28453:(e,r,t)=>{t.d(r,{R:()=>l,x:()=>d});var n=t(96540);const i={},s=n.createContext(i);function l(e){const r=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function d(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),n.createElement(s.Provider,{value:r},e.children)}}}]);
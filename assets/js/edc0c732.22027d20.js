"use strict";(self.webpackChunkvirtalis_docs=self.webpackChunkvirtalis_docs||[]).push([[2212],{66729:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>a,contentTitle:()=>c,default:()=>x,frontMatter:()=>d,metadata:()=>n,toc:()=>o});const n=JSON.parse('{"id":"visionary-render-programming/reference/c-api/classes/metanodes/meta-vertex-attrib","title":"Meta_VertexAttrib","description":"Module: Metanodes / Definitions","source":"@site/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-vertex-attrib.mdx","sourceDirName":"visionary-render-programming/reference/c-api/classes/metanodes","slug":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-vertex-attrib","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-vertex-attrib","draft":false,"unlisted":false,"editUrl":"https://github.com/virtalis/docs/tree/master/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-vertex-attrib.mdx","tags":[],"version":"current","lastUpdatedAt":1730817102000,"frontMatter":{"title":"Meta_VertexAttrib","summary":"A VertexAttrib node contains raw data describing a collection of vertices."},"sidebar":"visionaryRenderProgrammingSidebar","previous":{"title":"Meta_UsersList","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-users-list"},"next":{"title":"Meta_VertexPrim","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-vertex-prim"}}');var s=t(74848),i=t(28453);const d={title:"Meta_VertexAttrib",summary:"A VertexAttrib node contains raw data describing a collection of vertices."},c="Meta_VertexAttrib",a={},o=[{value:"Public Types",id:"public-types",level:2},{value:"Detailed Description",id:"detailed-description",level:2},{value:"Public Types Documentation",id:"public-types-documentation",level:2},{value:"enum IDX",id:"enum-idx",level:3}];function l(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"meta_vertexattrib",children:"Meta_VertexAttrib"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Module:"})," ",(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/",children:"Metanodes"})})," ",(0,s.jsx)(r.strong,{children:"/"})," ",(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/definitions",children:"Definitions"})})]}),"\n",(0,s.jsxs)(r.p,{children:["A VertexAttrib node contains raw data describing a collection of vertices.  ",(0,s.jsx)(r.a,{href:"#detailed-description",children:"More..."})]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.code,{children:"#include <meta_importables.hpp>"})}),"\n",(0,s.jsx)(r.h2,{id:"public-types",children:"Public Types"}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Type"}),(0,s.jsx)(r.th,{children:"Name"})]})}),(0,s.jsx)(r.tbody,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"enum"}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"#enum-idx",children:"IDX"})})," { Idx_Enabled, Idx_Size, Idx_Content }",(0,s.jsx)("br",{}),"Property index."]})]})})]}),"\n",(0,s.jsx)(r.h2,{id:"detailed-description",children:"Detailed Description"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"struct Meta_VertexAttrib;\n"})}),"\n",(0,s.jsx)(r.p,{children:"A VertexAttrib node contains raw data describing a collection of vertices."}),"\n",(0,s.jsx)(r.p,{children:"The name of the node describes its usage:"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"pos"})," - Positions, 3 floats per vertex"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"nrm"})," - Normals, 2 floats per vertex"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"tan"})," - Tangents, 4 floats per vertex (xyz=tangent, w=handedness (+1 or -1)"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"diffuse"})," - Diffuse vertex colour, 4 floats per vertex"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"ambient"})," - Ambient vertex colour, 4 floats per vertex"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"emissive"})," - Emissive vertex colour, 4 floats per vertex"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"tex0"})," - Texture coordinates (sampler 0), 2 floats per vertex"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"tex1"})," - Texture coordinates (sampler 1), 2 floats per vertex"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"tex2"})," - Texture coordinates (sampler 2), 2 floats per vertex"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"tex3"})," - Texture coordinates (sampler 3), 2 floats per vertex"]}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:["The number of vertices specified in each sibling VertexAttrib should be the same (e.g. if there are 100 vertices in ",(0,s.jsx)(r.code,{children:"pos"}),", there should be 100 vertices in any other ",(0,s.jsx)(r.code,{children:"nrm"}),", ",(0,s.jsx)(r.code,{children:"tex0"})," etc)."]}),"\n",(0,s.jsx)(r.h2,{id:"public-types-documentation",children:"Public Types Documentation"}),"\n",(0,s.jsx)(r.h3,{id:"enum-idx",children:"enum IDX"}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Enumerator"}),(0,s.jsx)(r.th,{children:"Value"}),(0,s.jsx)(r.th,{children:"Description"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Idx_Enabled"}),(0,s.jsx)(r.td,{}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.code,{children:"bool"})," - When enabled, these vertices are available to the mesh"]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Idx_Size"}),(0,s.jsx)(r.td,{}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.code,{children:"int"})," - Number of floats per vertex (should be set according to the list of types above)"]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Idx_Content"}),(0,s.jsx)(r.td,{}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.code,{children:"vector<float>"})," - The vertex data (e.g. for positions: ",(0,s.jsx)(r.code,{children:"x0,y0,z0,x1,y1,z1,x2...etc"}),")"]})]})]})]}),"\n",(0,s.jsx)(r.p,{children:"Property index."})]})}function x(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},28453:(e,r,t)=>{t.d(r,{R:()=>d,x:()=>c});var n=t(96540);const s={},i=n.createContext(s);function d(e){const r=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),n.createElement(i.Provider,{value:r},e.children)}}}]);
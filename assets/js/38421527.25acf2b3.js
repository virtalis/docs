"use strict";(self.webpackChunkvirtalis_docs=self.webpackChunkvirtalis_docs||[]).push([[3787],{24148:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"visionary-render-programming/plugins/tutorials/observer","title":"Implement an Observer","description":"Introduction","source":"@site/docs/visionary-render-programming/plugins/tutorials/observer.mdx","sourceDirName":"visionary-render-programming/plugins/tutorials","slug":"/visionary-render-programming/plugins/tutorials/observer","permalink":"/visionary-render-programming/plugins/tutorials/observer","draft":false,"unlisted":false,"editUrl":"https://github.com/virtalis/docs/tree/master/docs/visionary-render-programming/plugins/tutorials/observer.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"visionaryRenderProgrammingSidebar","previous":{"title":"Present a Modal dialog","permalink":"/visionary-render-programming/plugins/tutorials/modal-dialog"},"next":{"title":"Update the Progress Bar","permalink":"/visionary-render-programming/plugins/tutorials/progress-bar"}}');var t=r(74848),s=r(28453);const o={},a="Implement an Observer",d={},l=[{value:"Introduction",id:"introduction",level:2},{value:"Examples",id:"examples",level:2},{value:"Concepts",id:"concepts",level:2},{value:"Versioning",id:"versioning",level:3},{value:"Observer Pattern",id:"observer-pattern",level:3},{value:"Node Handle Copying (OO-specific)",id:"node-handle-copying-oo-specific",level:3}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"implement-an-observer",children:"Implement an Observer"})}),"\n",(0,t.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,t.jsx)(n.p,{children:"An observer is a class that is notified in response to a number of node events. The following observer events are exposed by the API as callbacks:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/function-prototypes#typedef-nodecreatedfunc",children:"NodeCreatedFunc"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/function-prototypes#typedef-nodedestroyingfunc",children:"NodeDestroyingFunc"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/function-prototypes#typedef-nodevalueschangedfunc",children:"NodeValuesChangedFunc"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/function-prototypes#typedef-noderenamedfunc",children:"NodeRenamedFunc"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/function-prototypes#typedef-nodechildaddedfunc",children:"NodeChildAddedFunc"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/function-prototypes#typedef-nodechildremovedfunc",children:"NodeChildRemovedFunc"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/function-prototypes#typedef-nodeparentchangedfunc",children:"NodeParentChangedFunc"})}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Observer callbacks are registered per-event (listed above), against a particular metanode. The same callback function can be registered for multiple metanodes, however the implementation of the callback must make the effort to distinguish the type of node it is given."}),"\n",(0,t.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,t.jsxs)(n.p,{children:["A plugin may wish to implement these functions when it needs to respond to things such as property changes on ",(0,t.jsx)(n.a,{href:"/visionary-render-programming/plugins/tutorials/custom-metanode",children:"metanodes it has defined"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'static void myAssemblyValuesChanged(HNode node, void* userData)\r\n{\r\n  // one or more properties on this node have changed\r\n  \r\n  if (VRIsDirty(node, "Transform")) {\r\n    // this assembly has moved\r\n    double mat4[16];\r\n    VRGetPropertyValue(node, "Transform", mat4, sizeof(mat4));\r\n    \r\n    // mat4 now contains the new local transform matrix of this assembly for us to work with\r\n  }\r\n}\r\n\r\nPLUGIN_ENTRY_POINT int VRTREE_APIENTRY VRPInit()\r\n{\r\n  VRPLUGIN_LOADVRTREE;\r\n  \r\n  char assemblyMetaNodeName[64];\r\n  VRCurrentMetaNodeVersion("Assembly", assemblyMetaNodeName, 64);\r\n  VRAddCallbackNodeValuesChanged(assemblyMetaNodeName, myAssemblyValuesChanged, NULL);\r\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"concepts",children:"Concepts"}),"\n",(0,t.jsx)(n.p,{children:"These examples introduce some new concepts."}),"\n",(0,t.jsx)(n.h3,{id:"versioning",children:"Versioning"}),"\n",(0,t.jsx)(n.p,{children:"First of all, the calls to VRCurrentMetaNodeVersion are best practice for plugins that wish to operate on metanodes that they have not defined themselves (such as Assembly and any other standard node type). This is to give them more cross compatibility between different versions of Visionary Render which may have changed the structure of the metanode (by adding or removing properties)."}),"\n",(0,t.jsxs)(n.p,{children:["This is discussed more fully in ",(0,t.jsx)(n.a,{href:"/visionary-render-programming/plugins/advanced/metanode-versioning",children:"Metanode Versioning"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"observer-pattern",children:"Observer Pattern"}),"\n",(0,t.jsx)(n.p,{children:"When working with observer callbacks it is important to respect the design pattern; specifically that any observer should not directly modify the tree that it is observing."}),"\n",(0,t.jsxs)(n.p,{children:["This means, for example, that a ::NodeValuesChangedFunc can read property values, but it should not set them. Instead it should defer those property write operations until the next VRTree Update using an ",(0,t.jsx)(n.a,{href:"/visionary-render-programming/plugins/tutorials/update-function",children:"Update Callback"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Failure to do this is not fatal, but it may result in strange behaviour where one observer may want to change a property on a node that has multiple observers. The effect of your observer changing this property immediately would be that observers called before yours saw one value, and observers called afterward will see your new value. Depending on the level of interaction between those other observers, this inconsistency may lead to subtle discrepancies in the application."}),"\n",(0,t.jsx)(n.h3,{id:"node-handle-copying-oo-specific",children:"Node Handle Copying (OO-specific)"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.a,{href:"/visionary-render-programming/plugins/best-practices",children:"Best Practices"})," page describes the difference in handle behaviour between those requested and those provided to callback functions."]}),"\n",(0,t.jsx)(n.p,{children:"Simply put, this is done to prevent the chance of our plugin closing the handle given to the callback, in case the API implementation needs to operate on the handle after the call returns."})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>a});var i=r(96540);const t={},s=i.createContext(t);function o(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);
"use strict";(self.webpackChunkvirtalis_docs=self.webpackChunkvirtalis_docs||[]).push([[57607],{78345:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>d,default:()=>a,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"visionary-render-programming/reference/c-api/modules/core","title":"Core","description":"Core API functions.","source":"@site/docs/visionary-render-programming/reference/c-api/modules/core.mdx","sourceDirName":"visionary-render-programming/reference/c-api/modules","slug":"/visionary-render-programming/reference/c-api/modules/core","permalink":"/visionary-render-programming/reference/c-api/modules/core","draft":false,"unlisted":false,"editUrl":"https://github.com/virtalis/docs/tree/master/docs/visionary-render-programming/reference/c-api/modules/core.mdx","tags":[],"version":"current","lastUpdatedAt":1730817102000,"frontMatter":{"title":"Core","summary":"Core API functions."},"sidebar":"visionaryRenderProgrammingSidebar","previous":{"title":"Utilities","permalink":"/visionary-render-programming/reference/c-api/modules/plugins/utilities"},"next":{"title":"Foreign Function Interface","permalink":"/visionary-render-programming/reference/c-api/modules/ffi"}}');var s=n(74848),i=n(28453);const o={title:"Core",summary:"Core API functions."},d="Core",l={},c=[{value:"Functions",id:"functions",level:2},{value:"Functions Documentation",id:"functions-documentation",level:2},{value:"VRBlobToDDSProperty",id:"vrblobtoddsproperty",level:3},{value:"VRBlobToDDSPropertyEx",id:"vrblobtoddspropertyex",level:3},{value:"VRBlobToDDSPropertyV2",id:"vrblobtoddspropertyv2",level:3},{value:"VRBlobToDDSPropertyV2Ex",id:"vrblobtoddspropertyv2ex",level:3},{value:"VRBulkData",id:"vrbulkdata",level:3},{value:"VRClearLastError",id:"vrclearlasterror",level:3},{value:"VRCloseNodeHandle",id:"vrclosenodehandle",level:3},{value:"VRCloseSecurityContext",id:"vrclosesecuritycontext",level:3},{value:"VRCloseUserSlotHandle",id:"vrcloseuserslothandle",level:3},{value:"VRConnect",id:"vrconnect",level:3},{value:"VRCopyNodeHandle",id:"vrcopynodehandle",level:3},{value:"VRCountOpenNodeHandles",id:"vrcountopennodehandles",level:3},{value:"VRFileToDDSProperty",id:"vrfiletoddsproperty",level:3},{value:"VRFileToDDSPropertyEx",id:"vrfiletoddspropertyex",level:3},{value:"VRGetAPIVersionMajor",id:"vrgetapiversionmajor",level:3},{value:"VRGetAPIVersionMinor",id:"vrgetapiversionminor",level:3},{value:"VRGetLastError",id:"vrgetlasterror",level:3},{value:"VRGetLastErrorString",id:"vrgetlasterrorstring",level:3},{value:"VRGetNodeFromUUID",id:"vrgetnodefromuuid",level:3},{value:"VRGetNodeVersion",id:"vrgetnodeversion",level:3},{value:"VRGetTextureFormat",id:"vrgettextureformat",level:3},{value:"VRGetTextureInfo",id:"vrgettextureinfo",level:3},{value:"VRGetUUIDHigh",id:"vrgetuuidhigh",level:3},{value:"VRGetUUIDLow",id:"vrgetuuidlow",level:3},{value:"VRInit",id:"vrinit",level:3},{value:"VRIsNodeHandleValid",id:"vrisnodehandlevalid",level:3},{value:"VRNewUserSlotHandle",id:"vrnewuserslothandle",level:3},{value:"VRRequestSecurityContext",id:"vrrequestsecuritycontext",level:3},{value:"VRSetAPIErrorLevel",id:"vrsetapierrorlevel",level:3},{value:"VRSetImmediateErrorLog",id:"vrsetimmediateerrorlog",level:3},{value:"VRShutdown",id:"vrshutdown",level:3},{value:"VRUpdate",id:"vrupdate",level:3}];function h(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"core",children:"Core"})}),"\n",(0,s.jsx)(r.p,{children:"Core API functions."}),"\n",(0,s.jsx)(r.h2,{id:"functions",children:"Functions"}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Type"}),(0,s.jsx)(r.th,{children:"Name"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"int"}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"#vrblobtoddsproperty",children:"VRBlobToDDSProperty"})}),"(",(0,s.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})," node, const char * propName, const void * data, uint32_t glFormat, uint32_t glType, uint32_t width, uint32_t height, char compress)",(0,s.jsx)("br",{}),"Helper function for converting it to DDS, and storing it in the specified char vector property."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"int"}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"#vrblobtoddspropertyex",children:"VRBlobToDDSPropertyEx"})}),"(",(0,s.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})," node, uint32_t prop, const void * data, uint32_t glFormat, uint32_t glType, uint32_t width, uint32_t height, char compress)",(0,s.jsx)("br",{}),"Helper function for converting it to DDS, and storing it in the specified char vector property."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"int"}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"#vrblobtoddspropertyv2",children:"VRBlobToDDSPropertyV2"})}),"(",(0,s.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})," node, const char * propName, const void * data, uint32_t glFormat, uint32_t glType, uint32_t transparency, uint32_t width, uint32_t height, uint32_t depth, char compress, uint32_t mipLevels)",(0,s.jsx)("br",{}),"Helper function for converting it to DDS, and storing it in the specified char vector property."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"int"}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"#vrblobtoddspropertyv2ex",children:"VRBlobToDDSPropertyV2Ex"})}),"(",(0,s.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})," node, uint32_t prop, const void * data, uint32_t glFormat, uint32_t glType, uint32_t transparency, uint32_t width, uint32_t height, uint32_t depth, char compress, uint32_t mipLevels)",(0,s.jsx)("br",{}),"Helper function for converting it to DDS, and storing it in the specified char vector property."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"int"}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"#vrbulkdata",children:"VRBulkData"})}),"(void )",(0,s.jsx)("br",{}),"Specifies if there a large amount of data pending transfer between vrtree instances."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"void"}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"#vrclearlasterror",children:"VRClearLastError"})}),"(void )",(0,s.jsx)("br",{}),"Manually clear the last error code."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"void"}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"#vrclosenodehandle",children:"VRCloseNodeHandle"})}),"(",(0,s.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})," node)",(0,s.jsx)("br",{}),"Closes a node handle, clearing its connection to VRTree."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"int"}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"#vrclosesecuritycontext",children:"VRCloseSecurityContext"})}),"(",(0,s.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hauth",children:"HAuth"})," context)",(0,s.jsx)("br",{}),"Releases a previously requested security context."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"void"}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"#vrcloseuserslothandle",children:"VRCloseUserSlotHandle"})}),"(",(0,s.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-huserslot",children:"HUserSlot"})," slot)",(0,s.jsx)("br",{}),"Releases a unique userdata slot handle."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"int"}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"#vrconnect",children:"VRConnect"})}),"(const char * addr, int port)",(0,s.jsx)("br",{}),"Connect to another instance of VRTree (e.g. Visionary Render) and synchronise trees."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"#vrcopynodehandle",children:"VRCopyNodeHandle"})}),"(",(0,s.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})," node)",(0,s.jsx)("br",{}),"Creates a new node handle based off the old one."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"size_t"}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"#vrcountopennodehandles",children:"VRCountOpenNodeHandles"})}),"(void )",(0,s.jsx)("br",{}),"Diagnostic function."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"int"}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"#vrfiletoddsproperty",children:"VRFileToDDSProperty"})}),"(",(0,s.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})," node, const char * propName, const char * file, char compress)",(0,s.jsx)("br",{}),"Helper function for loading an image file from disk, converting it to DDS, and storing it in the specified char vector property."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"int"}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"#vrfiletoddspropertyex",children:"VRFileToDDSPropertyEx"})}),"(",(0,s.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})," node, uint32_t prop, const char * file, char compress)",(0,s.jsx)("br",{}),"Helper function for loading an image file from disk, converting it to DDS, and storing it in the specified char vector property."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"int"}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"#vrgetapiversionmajor",children:"VRGetAPIVersionMajor"})}),"(void )",(0,s.jsx)("br",{}),"Gets the VRTree API Major version."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"int"}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"#vrgetapiversionminor",children:"VRGetAPIVersionMinor"})}),"(void )",(0,s.jsx)("br",{}),"Gets the VRTree API Minor version."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"uint32_t"}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"#vrgetlasterror",children:"VRGetLastError"})}),"(void )",(0,s.jsx)("br",{}),"Gets the last error code."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"const char *"}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"#vrgetlasterrorstring",children:"VRGetLastErrorString"})}),"(void )",(0,s.jsx)("br",{}),"Gets the last error string."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"#vrgetnodefromuuid",children:"VRGetNodeFromUUID"})}),"(uint64_t lo, uint64_t hi)",(0,s.jsx)("br",{}),"Gets the node with the specified UUID."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"int"}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"#vrgetnodeversion",children:"VRGetNodeVersion"})}),"(",(0,s.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})," node)",(0,s.jsx)("br",{}),"Gets the metanode version of the specified node."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"uint32_t"}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"#vrgettextureformat",children:"VRGetTextureFormat"})}),"(",(0,s.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})," textureNode)",(0,s.jsx)("br",{}),"Helper function for getting the OpenGL texture format out of a texture node."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"TextureInfo"}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"#vrgettextureinfo",children:"VRGetTextureInfo"})}),"(",(0,s.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})," textureNode)",(0,s.jsx)("br",{}),"Helper function for getting the OpenGL texture information out of a texture node."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"uint64_t"}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"#vrgetuuidhigh",children:"VRGetUUIDHigh"})}),"(",(0,s.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})," node)",(0,s.jsx)("br",{}),"Gets the high 64-bits of a node's unique ID."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"uint64_t"}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"#vrgetuuidlow",children:"VRGetUUIDLow"})}),"(",(0,s.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})," node)",(0,s.jsx)("br",{}),"Gets the low 64-bits of a node's unique ID."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"int"}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"#vrinit",children:"VRInit"})}),"(int port)",(0,s.jsx)("br",{}),"Initialise VRTree."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"int"}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"#vrisnodehandlevalid",children:"VRIsNodeHandleValid"})}),"(",(0,s.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})," node)",(0,s.jsx)("br",{}),"Checks if a node handle is valid."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-huserslot",children:"HUserSlot"})}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"#vrnewuserslothandle",children:"VRNewUserSlotHandle"})}),"(void )",(0,s.jsx)("br",{}),"Requests a unique userdata slot identifier."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hauth",children:"HAuth"})}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"#vrrequestsecuritycontext",children:"VRRequestSecurityContext"})}),"(const char * auth, const char * name)",(0,s.jsx)("br",{}),"Requests a change in the API security context to grant access to API functions by categories specified in the auth string."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"void"}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"#vrsetapierrorlevel",children:"VRSetAPIErrorLevel"})}),"(uint32_t flags)",(0,s.jsx)("br",{}),"Sets the API error level, which controls which types of errors are reported and logged."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"void"}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"#vrsetimmediateerrorlog",children:"VRSetImmediateErrorLog"})}),"(char enabled)",(0,s.jsx)("br",{}),"Specifies that errors tracked by ",(0,s.jsx)(r.a,{href:"#vrsetapierrorlevel",children:"VRSetAPIErrorLevel"})," are also logged the the application log immediately rather than only being stored for ",(0,s.jsx)(r.a,{href:"#vrgetlasterrorstring",children:"VRGetLastErrorString"}),"."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"void"}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"#vrshutdown",children:"VRShutdown"})}),"(void )",(0,s.jsx)("br",{}),"Disconnect from the network and shut down."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"void"}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"#vrupdate",children:"VRUpdate"})}),"(double deltaTime)",(0,s.jsx)("br",{}),"Perform a full update, notifying observers and updating actors."]})]})]})]}),"\n",(0,s.jsx)(r.h2,{id:"functions-documentation",children:"Functions Documentation"}),"\n",(0,s.jsx)(r.h3,{id:"vrblobtoddsproperty",children:"VRBlobToDDSProperty"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"int VRBlobToDDSProperty(\r\n    HNode node,\r\n    const char * propName,\r\n    const void * data,\r\n    uint32_t glFormat,\r\n    uint32_t glType,\r\n    uint32_t width,\r\n    uint32_t height,\r\n    char compress\r\n)\n"})}),"\n",(0,s.jsx)(r.p,{children:"Helper function for converting it to DDS, and storing it in the specified char vector property."}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"node"})," handle to the node to set the property on"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"propName"})," name of the property"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"data"})," buffer containing the image data to convert to DDS"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"glFormat"})," the opengl format of the buffer data"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"glType"})," the opengl type of the buffer data"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"width"})," the pixel width of the buffer data"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"height"})," the pixel height of the buffer data"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"compress"})," whether to compress the texture using DXT1"]}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Return"}),": 0 if property is successfully populated with DDS data"]}),"\n",(0,s.jsx)(r.h3,{id:"vrblobtoddspropertyex",children:"VRBlobToDDSPropertyEx"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"int VRBlobToDDSPropertyEx(\r\n    HNode node,\r\n    uint32_t prop,\r\n    const void * data,\r\n    uint32_t glFormat,\r\n    uint32_t glType,\r\n    uint32_t width,\r\n    uint32_t height,\r\n    char compress\r\n)\n"})}),"\n",(0,s.jsx)(r.p,{children:"Helper function for converting it to DDS, and storing it in the specified char vector property."}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"node"})," handle to the node to set the property on"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"propName"})," name of the property"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"data"})," buffer containing the image data to convert to DDS"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"glFormat"})," the opengl format of the buffer data"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"glType"})," the opengl type of the buffer data"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"width"})," the pixel width of the buffer data"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"height"})," the pixel height of the buffer data"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"compress"})," whether to compress the texture using DXT1"]}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Return"}),": 0 if property is successfully populated with DDS data"]}),"\n",(0,s.jsx)(r.h3,{id:"vrblobtoddspropertyv2",children:"VRBlobToDDSPropertyV2"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"int VRBlobToDDSPropertyV2(\r\n    HNode node,\r\n    const char * propName,\r\n    const void * data,\r\n    uint32_t glFormat,\r\n    uint32_t glType,\r\n    uint32_t transparency,\r\n    uint32_t width,\r\n    uint32_t height,\r\n    uint32_t depth,\r\n    char compress,\r\n    uint32_t mipLevels\r\n)\n"})}),"\n",(0,s.jsx)(r.p,{children:"Helper function for converting it to DDS, and storing it in the specified char vector property."}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"node"})," handle to the node to set the property on"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"propName"})," name of the property"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"data"})," buffer containing the image data to convert to DDS"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"glFormat"})," the opengl format of the buffer data"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"glType"})," the opengl type of the buffer data"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"transparency"})," ( 0 = completely opaque, 1 = transarency mask, 2 = translucent )"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"width"})," the pixel width of the buffer data"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"height"})," the pixel height of the buffer data"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"compress"})," whether to compress the texture using DXT1"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"number"})," of mipMap levels"]}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Return"}),": 0 if property is successfully populated with DDS data"]}),"\n",(0,s.jsx)(r.h3,{id:"vrblobtoddspropertyv2ex",children:"VRBlobToDDSPropertyV2Ex"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"int VRBlobToDDSPropertyV2Ex(\r\n    HNode node,\r\n    uint32_t prop,\r\n    const void * data,\r\n    uint32_t glFormat,\r\n    uint32_t glType,\r\n    uint32_t transparency,\r\n    uint32_t width,\r\n    uint32_t height,\r\n    uint32_t depth,\r\n    char compress,\r\n    uint32_t mipLevels\r\n)\n"})}),"\n",(0,s.jsx)(r.p,{children:"Helper function for converting it to DDS, and storing it in the specified char vector property."}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"node"})," handle to the node to set the property on"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"propName"})," name of the property"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"data"})," buffer containing the image data to convert to DDS"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"glFormat"})," the opengl format of the buffer data"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"glType"})," the opengl type of the buffer data"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"transparency"})," ( 0 = completely opaque, 1 = transarency mask, 2 = translucent )"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"width"})," the pixel width of the buffer data"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"height"})," the pixel height of the buffer data"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"compress"})," whether to compress the texture using DXT1"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"number"})," of mipMap levels"]}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Return"}),": 0 if property is successfully populated with DDS data"]}),"\n",(0,s.jsx)(r.h3,{id:"vrbulkdata",children:"VRBulkData"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"int VRBulkData(\r\n    void \r\n)\n"})}),"\n",(0,s.jsx)(r.p,{children:"Specifies if there a large amount of data pending transfer between vrtree instances."}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Return"}),": 1 on success"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Par"}),": Permission: SC_NETWORK"]}),"\n",(0,s.jsx)(r.h3,{id:"vrclearlasterror",children:"VRClearLastError"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"void VRClearLastError(\r\n    void \r\n)\n"})}),"\n",(0,s.jsx)(r.p,{children:"Manually clear the last error code."}),"\n",(0,s.jsx)(r.h3,{id:"vrclosenodehandle",children:"VRCloseNodeHandle"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"void VRCloseNodeHandle(\r\n    HNode node\r\n)\n"})}),"\n",(0,s.jsx)(r.p,{children:"Closes a node handle, clearing its connection to VRTree."}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"node"})," handle to close. Becomes unusable."]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"vrclosesecuritycontext",children:"VRCloseSecurityContext"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"int VRCloseSecurityContext(\r\n    HAuth context\r\n)\n"})}),"\n",(0,s.jsx)(r.p,{children:"Releases a previously requested security context."}),"\n",(0,s.jsx)(r.h3,{id:"vrcloseuserslothandle",children:"VRCloseUserSlotHandle"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"void VRCloseUserSlotHandle(\r\n    HUserSlot slot\r\n)\n"})}),"\n",(0,s.jsx)(r.p,{children:"Releases a unique userdata slot handle."}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"slot"})," an open slot handle"]}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:"This does not remove userdata stored on nodes using this slot handle. That data must be cleaned up before closing the slot handle to avoid data leaks."}),"\n",(0,s.jsx)(r.h3,{id:"vrconnect",children:"VRConnect"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"int VRConnect(\r\n    const char * addr,\r\n    int port\r\n)\n"})}),"\n",(0,s.jsx)(r.p,{children:"Connect to another instance of VRTree (e.g. Visionary Render) and synchronise trees."}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"addr"})," address of the remote instance"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"port"})," TCP port that the remote instance is listening on"]}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Return"}),": 1 on success"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Par"}),": Permission: SC_NETWORK"]}),"\n",(0,s.jsx)(r.h3,{id:"vrcopynodehandle",children:"VRCopyNodeHandle"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"HNode VRCopyNodeHandle(\r\n    HNode node\r\n)\n"})}),"\n",(0,s.jsx)(r.p,{children:"Creates a new node handle based off the old one."}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"node"})," handle stays open."]}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Return"}),": new node handle, VRCloseNodeHandle when you are done with it"]}),"\n",(0,s.jsx)(r.h3,{id:"vrcountopennodehandles",children:"VRCountOpenNodeHandles"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"size_t VRCountOpenNodeHandles(\r\n    void \r\n)\n"})}),"\n",(0,s.jsx)(r.p,{children:"Diagnostic function."}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Return"}),": the number of open node handles"]}),"\n",(0,s.jsx)(r.h3,{id:"vrfiletoddsproperty",children:"VRFileToDDSProperty"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"int VRFileToDDSProperty(\r\n    HNode node,\r\n    const char * propName,\r\n    const char * file,\r\n    char compress\r\n)\n"})}),"\n",(0,s.jsx)(r.p,{children:"Helper function for loading an image file from disk, converting it to DDS, and storing it in the specified char vector property."}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"node"})," handle to the node to set the property on"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"propName"})," name of the property"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"file"})," path to the file to read, if not found, an error pattern is set instead"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"compress"})," whether to compress the texture using DXT1"]}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Return"}),": 0 if property is successfully populated with data from the file in DDS format"]}),"\n",(0,s.jsx)(r.h3,{id:"vrfiletoddspropertyex",children:"VRFileToDDSPropertyEx"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"int VRFileToDDSPropertyEx(\r\n    HNode node,\r\n    uint32_t prop,\r\n    const char * file,\r\n    char compress\r\n)\n"})}),"\n",(0,s.jsx)(r.p,{children:"Helper function for loading an image file from disk, converting it to DDS, and storing it in the specified char vector property."}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"node"})," handle to the node to set the property on"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"propName"})," name of the property"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"file"})," path to the file to read, if not found, an error pattern is set instead"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"compress"})," whether to compress the texture using DXT1"]}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Return"}),": 0 if property is successfully populated with data from the file in DDS format"]}),"\n",(0,s.jsx)(r.h3,{id:"vrgetapiversionmajor",children:"VRGetAPIVersionMajor"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"int VRGetAPIVersionMajor(\r\n    void \r\n)\n"})}),"\n",(0,s.jsx)(r.p,{children:"Gets the VRTree API Major version."}),"\n",(0,s.jsx)(r.p,{children:"This version represents backward compatibility. It should be checked when loading the library, against an expected value. If it is not what is expected, the API may not function according to the expectations of the program using it."}),"\n",(0,s.jsx)(r.h3,{id:"vrgetapiversionminor",children:"VRGetAPIVersionMinor"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"int VRGetAPIVersionMinor(\r\n    void \r\n)\n"})}),"\n",(0,s.jsx)(r.p,{children:"Gets the VRTree API Minor version."}),"\n",(0,s.jsx)(r.p,{children:"This version number represents additions to the API and does not affect backward compatibility."}),"\n",(0,s.jsx)(r.h3,{id:"vrgetlasterror",children:"VRGetLastError"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"uint32_t VRGetLastError(\r\n    void \r\n)\n"})}),"\n",(0,s.jsx)(r.p,{children:"Gets the last error code."}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Return"}),": ",(0,s.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/error-codes",children:"The last error code"})]}),"\n",(0,s.jsx)(r.p,{children:"This function does not clear the error."}),"\n",(0,s.jsx)(r.h3,{id:"vrgetlasterrorstring",children:"VRGetLastErrorString"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"const char * VRGetLastErrorString(\r\n    void \r\n)\n"})}),"\n",(0,s.jsx)(r.p,{children:"Gets the last error string."}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Return"}),": the error string, or NULL if there is no error string to return."]}),"\n",(0,s.jsx)(r.p,{children:"This function DOES clear the error using VRClearLastError. The returned string is only valid until the next operation that sets a new error string."}),"\n",(0,s.jsx)(r.h3,{id:"vrgetnodefromuuid",children:"VRGetNodeFromUUID"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"HNode VRGetNodeFromUUID(\r\n    uint64_t lo,\r\n    uint64_t hi\r\n)\n"})}),"\n",(0,s.jsx)(r.p,{children:"Gets the node with the specified UUID."}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"lo"})," low 64-bits of the UUID"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"hi"})," high 64-bits of the UUID"]}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Return"}),": node handle, or 0 on error / non-existant"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Par"}),": Permission: SC_READ"]}),"\n",(0,s.jsx)(r.h3,{id:"vrgetnodeversion",children:"VRGetNodeVersion"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"int VRGetNodeVersion(\r\n    HNode node\r\n)\n"})}),"\n",(0,s.jsx)(r.p,{children:"Gets the metanode version of the specified node."}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"node"})," node to query"]}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Return"}),": version, or -1 on error / non-existant"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Par"}),": Permission: SC_READ"]}),"\n",(0,s.jsx)(r.h3,{id:"vrgettextureformat",children:"VRGetTextureFormat"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"uint32_t VRGetTextureFormat(\r\n    HNode textureNode\r\n)\n"})}),"\n",(0,s.jsx)(r.p,{children:"Helper function for getting the OpenGL texture format out of a texture node."}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"textureNode"})," handle to the texture node"]}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Return"}),": 0 if node has no DDSData property, otherwise the GLenum value representing the texture format"]}),"\n",(0,s.jsx)(r.h3,{id:"vrgettextureinfo",children:"VRGetTextureInfo"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"TextureInfo VRGetTextureInfo(\r\n    HNode textureNode\r\n)\n"})}),"\n",(0,s.jsx)(r.p,{children:"Helper function for getting the OpenGL texture information out of a texture node."}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"textureNode"})," handle to the texture node"]}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Return"}),": information reguarding texture paramaters, values will be 0 on faliure"]}),"\n",(0,s.jsx)(r.h3,{id:"vrgetuuidhigh",children:"VRGetUUIDHigh"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"uint64_t VRGetUUIDHigh(\r\n    HNode node\r\n)\n"})}),"\n",(0,s.jsx)(r.p,{children:"Gets the high 64-bits of a node's unique ID."}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Return"}),": high 64-bits or 0 on error"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Par"}),": Permission: SC_READ"]}),"\n",(0,s.jsx)(r.h3,{id:"vrgetuuidlow",children:"VRGetUUIDLow"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"uint64_t VRGetUUIDLow(\r\n    HNode node\r\n)\n"})}),"\n",(0,s.jsx)(r.p,{children:"Gets the low 64-bits of a node's unique ID."}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Return"}),": low 64-bits or 0 on error"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Par"}),": Permission: SC_READ"]}),"\n",(0,s.jsx)(r.h3,{id:"vrinit",children:"VRInit"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"int VRInit(\r\n    int port\r\n)\n"})}),"\n",(0,s.jsx)(r.p,{children:"Initialise VRTree."}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"port"})," the TCP port on which to listen for collaboration connection requests"]}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Return"}),": 0 on success"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Par"}),": Permission: SC_INIT"]}),"\n",(0,s.jsx)(r.h3,{id:"vrisnodehandlevalid",children:"VRIsNodeHandleValid"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"int VRIsNodeHandleValid(\r\n    HNode node\r\n)\n"})}),"\n",(0,s.jsx)(r.p,{children:"Checks if a node handle is valid."}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"node"})," handle to check"]}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Return"}),": 1 if the handle is valid, 0 if it is invalid (i.e. if it was closed already)"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Par"}),": Permission: SC_READ"]}),"\n",(0,s.jsx)(r.h3,{id:"vrnewuserslothandle",children:"VRNewUserSlotHandle"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"HUserSlot VRNewUserSlotHandle(\r\n    void \r\n)\n"})}),"\n",(0,s.jsx)(r.p,{children:"Requests a unique userdata slot identifier."}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Return"}),": slot handle, or 0 on error"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Par"}),": Permission: SC_MODIFY"]}),"\n",(0,s.jsx)(r.p,{children:"The userdata slot system can be used by plugins to attach plugin-specific data to a specific node and retrieve it again later."}),"\n",(0,s.jsx)(r.p,{children:"Generally a plugin should request one or more unique data slots on initialization and keep them open for the lifetime of the plugin. It does not need one per node - the userdata slot handle should be considered the unique slot identifier for plugin data on ALL nodes. Using more than one is only necessary if the plugin needs to store more than one piece of data on a single node, and even then only in the case where storing it in a struct in the first slot is not appropriate."}),"\n",(0,s.jsx)(r.p,{children:"This data is not managed by the application, so it is up to the plugin to make sure it removes any userdata it adds before closing its user slot handle."}),"\n",(0,s.jsx)(r.h3,{id:"vrrequestsecuritycontext",children:"VRRequestSecurityContext"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"HAuth VRRequestSecurityContext(\r\n    const char * auth,\r\n    const char * name\r\n)\n"})}),"\n",(0,s.jsx)(r.p,{children:"Requests a change in the API security context to grant access to API functions by categories specified in the auth string."}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"auth"})," full contents of an API license (signed xml)"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"name"})," the name of the application requesting the context"]}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Return"}),": a new auth handle indicating successful context switch, or 0 on error / invalid auth"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Note"}),": New contexts are pushed onto a stack, meaning that when the returned context is closed, access controls revert to the level provided by the previous security context."]}),"\n",(0,s.jsxs)(r.p,{children:["Most plugins should let the plugin manager deal with this automatically by exporting their signature string as a ",(0,s.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/modules/plugins/interface#typedef-vrpsignatureproc",children:"VRPSignatureProc"}),". This API exists for programs that load vrtree.dll independently of Visionary Render, in which case the auth string is likely to be required to specify SC_INIT permissions in order to be able to do anything useful."]}),"\n",(0,s.jsx)(r.h3,{id:"vrsetapierrorlevel",children:"VRSetAPIErrorLevel"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"void VRSetAPIErrorLevel(\r\n    uint32_t flags\r\n)\n"})}),"\n",(0,s.jsx)(r.p,{children:"Sets the API error level, which controls which types of errors are reported and logged."}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"flags"})," one or more ",(0,s.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/logging-flags",children:"Logging masks"})," which enable error reporting by type"]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"vrsetimmediateerrorlog",children:"VRSetImmediateErrorLog"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"void VRSetImmediateErrorLog(\r\n    char enabled\r\n)\n"})}),"\n",(0,s.jsxs)(r.p,{children:["Specifies that errors tracked by ",(0,s.jsx)(r.a,{href:"#vrsetapierrorlevel",children:"VRSetAPIErrorLevel"})," are also logged the the application log immediately rather than only being stored for ",(0,s.jsx)(r.a,{href:"#vrgetlasterrorstring",children:"VRGetLastErrorString"}),"."]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"enabled"})," 1 or above to enable immediate error logging"]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"vrshutdown",children:"VRShutdown"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"void VRShutdown(\r\n    void \r\n)\n"})}),"\n",(0,s.jsx)(r.p,{children:"Disconnect from the network and shut down."}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Par"}),": Permission: SC_NETWORK"]}),"\n",(0,s.jsx)(r.h3,{id:"vrupdate",children:"VRUpdate"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"void VRUpdate(\r\n    double deltaTime\r\n)\n"})}),"\n",(0,s.jsx)(r.p,{children:"Perform a full update, notifying observers and updating actors."}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"deltaTime"})," the time since the last frame (or any other value that will affect the step size of any actors)"]}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Par"}),": Permission: SC_OBSERVE"]})]})}function a(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},28453:(e,r,n)=>{n.d(r,{R:()=>o,x:()=>d});var t=n(96540);const s={},i=t.createContext(s);function o(e){const r=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function d(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(i.Provider,{value:r},e.children)}}}]);
"use strict";(self.webpackChunkvirtalis_docs=self.webpackChunkvirtalis_docs||[]).push([[2215],{7784:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"visionary-render-programming/architecture/metanodes","title":"Metanodes","description":"A metanode is a description of a data structure instantiated by nodes in the tree. It can be considered as the \\"type\\" or \\"class\\" of a node.","source":"@site/docs/visionary-render-programming/architecture/metanodes.mdx","sourceDirName":"visionary-render-programming/architecture","slug":"/visionary-render-programming/architecture/metanodes","permalink":"/visionary-render-programming/architecture/metanodes","draft":false,"unlisted":false,"editUrl":"https://github.com/virtalis/docs/tree/master/docs/visionary-render-programming/architecture/metanodes.mdx","tags":[],"version":"current","lastUpdatedAt":1741279868000,"frontMatter":{},"sidebar":"visionaryRenderProgrammingSidebar","previous":{"title":"API Diagram","permalink":"/visionary-render-programming/architecture/api-diagram"},"next":{"title":"Nodes","permalink":"/visionary-render-programming/architecture/nodes"}}');var a=n(74848),i=n(28453);const s={},o="Metanodes",d={},c=[];function m(e){const r={a:"a",code:"code",h1:"h1",header:"header",p:"p",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(r.header,{children:(0,a.jsx)(r.h1,{id:"metanodes",children:"Metanodes"})}),"\n",(0,a.jsx)(r.p,{children:'A metanode is a description of a data structure instantiated by nodes in the tree. It can be considered as the "type" or "class" of a node.'}),"\n",(0,a.jsxs)(r.p,{children:["It has a name, which uniquely identifies its type. The name may also contain a numerical suffix, which is its version number. (see ",(0,a.jsx)(r.a,{href:"/visionary-render-programming/plugins/advanced/metanode-versioning",children:"Metanode Versioning"}),")"]}),"\n",(0,a.jsxs)(r.p,{children:["It also defines a list of ",(0,a.jsx)(r.a,{href:"/visionary-render-programming/architecture/properties",children:"properties"})," that comprise the structure of data stored by each instance of this metanode. Each property of a metanode, and even the metanode itself can contain additional ",(0,a.jsx)(r.a,{href:"/visionary-render-programming/plugins/advanced/semantics",children:"semantics"})," to further describe its purpose."]}),"\n",(0,a.jsxs)(r.p,{children:["When a metanode is registered it can be also be given ",(0,a.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/flags",children:"flags"})," to affect the behaviour of its instances, for example, the ",(0,a.jsx)(r.code,{children:"METANODE_NO_SAVE"})," flag to prevent instances of this metanode from being written to a file during a save operation."]})]})}function h(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,a.jsx)(r,{...e,children:(0,a.jsx)(m,{...e})}):m(e)}},28453:(e,r,n)=>{n.d(r,{R:()=>s,x:()=>o});var t=n(96540);const a={},i=t.createContext(a);function s(e){const r=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),t.createElement(i.Provider,{value:r},e.children)}}}]);
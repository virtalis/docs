"use strict";(self.webpackChunkvirtalis_docs=self.webpackChunkvirtalis_docs||[]).push([[52937],{94457:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"visionary-render-programming/scripts/advanced/lua-com","title":"Reference External Data Using the COM","description":"Visionary Render supports LuaCOM, a library which allows Lua scripts to interact with the COM. In all scripts, the global interface named luacom is available by default, to be accessed as described by the API documentation linked above. Below are a couple of examples of what this can do.","source":"@site/docs/visionary-render-programming/scripts/advanced/lua-com.mdx","sourceDirName":"visionary-render-programming/scripts/advanced","slug":"/visionary-render-programming/scripts/advanced/lua-com","permalink":"/visionary-render-programming/scripts/advanced/lua-com","draft":false,"unlisted":false,"editUrl":"https://github.com/virtalis/docs/tree/master/docs/visionary-render-programming/scripts/advanced/lua-com.mdx","tags":[],"version":"current","lastUpdatedAt":1742560525000,"frontMatter":{},"sidebar":"visionaryRenderProgrammingSidebar","previous":{"title":"Application Commands","permalink":"/visionary-render-programming/scripts/advanced/app-commands"},"next":{"title":"Using LuaSQL for ODBC Connections","permalink":"/visionary-render-programming/scripts/advanced/lua-odbc"}}');var r=n(74848),s=n(28453);const o={},i="Reference External Data Using the COM",c={},l=[{value:"Web Services",id:"web-services",level:2},{value:"Excel Spreadsheets",id:"excel-spreadsheets",level:2}];function d(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"reference-external-data-using-the-com",children:"Reference External Data Using the COM"})}),"\n",(0,r.jsxs)(t.p,{children:["Visionary Render supports ",(0,r.jsx)(t.a,{href:"http://lua-users.org/wiki/LuaCom",children:"LuaCOM"}),", a library which allows Lua scripts to interact with the ",(0,r.jsx)(t.a,{href:"https://docs.microsoft.com/en-us/windows/desktop/com/the-component-object-model",children:"COM"}),". In all scripts, the global interface named ",(0,r.jsx)(t.code,{children:"luacom"})," is available by default, to be accessed as described by the API documentation linked above. Below are a couple of examples of what this can do."]}),"\n",(0,r.jsx)(t.h2,{id:"web-services",children:"Web Services"}),"\n",(0,r.jsxs)(t.p,{children:["To access web data, the ",(0,r.jsx)(t.code,{children:"MSXML2.XMLHTTP"})," object can be used. In the example below, we start by calling ",(0,r.jsx)(t.code,{children:"luacom.CreateObject"})," to make an instance of this. Note that if the application will be making multiple HTTP requests, it is more efficient to reuse the same XMLHTTP object than recreating it each time. In this case, the object is local, and will be destroyed when the script terminates."]}),"\n",(0,r.jsxs)(t.p,{children:["Next, we call ",(0,r.jsx)(t.code,{children:"open"})," on the ",(0,r.jsx)(t.code,{children:"web"})," object, passing it the ",(0,r.jsx)(t.code,{children:"GET"})," method and desired URL. The third argument, ",(0,r.jsx)(t.code,{children:"true"}),", is for the ",(0,r.jsx)(t.code,{children:"async"})," parameter on ",(0,r.jsx)(t.code,{children:"web:open()"}),". This allows the script to continue running while the server is contacted, as otherwise, the entire application would lock up."]}),"\n",(0,r.jsxs)(t.p,{children:["After we have sent the request we take advantage of the Lua coroutines supported by Visionary Render. To block the script from completing until the request has completed, the script calls ",(0,r.jsx)(t.code,{children:"vrYield()"})," in a loop. This allows Visionary Render to continue updating, checking on the status of the request every frame. When it has finished, we print the result. Note that it is important to use a timeout for web requests, as we can never know how long the server may take to respond, and should handle the case where it never does. This is achieved by checking the ",(0,r.jsx)(t.code,{children:"__Time"})," register. The ",(0,r.jsx)(t.code,{children:"readyState"})," variable will be 1 (",(0,r.jsx)(t.code,{children:"LOADING"}),") when we initiate the request, and will step through a number of other states until the operation completes on 4 (",(0,r.jsx)(t.code,{children:"COMPLETED"}),")."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-lua",children:'function httpRequest(url)\r\n  -- Create the COM object.\r\n  local web = luacom.CreateObject("MSXML2.XMLHTTP")\r\n\r\n  -- Make an asynchronous request.\r\n  web:open("GET", url, true)\r\n  web:send()\r\n\r\n  -- Yield until done, or time out after 10 seconds.\r\n  local timeout = 10\r\n  local startTime = __Time\r\n  while web.readyState < 4 and __Time - startTime < timeout do\r\n    vrYield()\r\n  end\r\n\r\n  -- Print the result.\r\n  print(web.responseText)\r\nend\n'})}),"\n",(0,r.jsx)(t.h2,{id:"excel-spreadsheets",children:"Excel Spreadsheets"}),"\n",(0,r.jsx)(t.admonition,{type:"warning",children:(0,r.jsx)(t.p,{children:"This requires a valid Microsoft Excel license."})}),"\n",(0,r.jsx)(t.p,{children:"Moreso than contacting web servers, the COM is known for its ability to interface with Microsoft applications. In the next example we will read data from an Excel spreadsheet."}),"\n",(0,r.jsxs)(t.p,{children:["In this case we create an ",(0,r.jsx)(t.code,{children:"Excel.Application"})," object. As before, this can be a slow operation, so it is beneficial to reuse the object."]}),"\n",(0,r.jsxs)(t.p,{children:["Next, we open the desired file with ",(0,r.jsx)(t.code,{children:"excel.Workbooks:Open()"}),". This demonstrates LuaCOM's partial support for named parameters; the ",(0,r.jsx)(t.code,{children:"Open()"})," function takes a number of named parameters, which in a language like Visual Basic can be specified in any order. Unfortunately, in Lua, we must pass them in order. This means that we specify the ",(0,r.jsx)(t.code,{children:"FileName"}),", then leave ",(0,r.jsx)(t.code,{children:"UpdatedLinks"})," as nil, so we can set ",(0,r.jsx)(t.code,{children:"ReadOnly"})," to true - for this specific case the arguments can be found ",(0,r.jsx)(t.a,{href:"https://docs.microsoft.com/en-us/office/vba/api/excel.workbooks.open",children:"here"}),"."]}),"\n",(0,r.jsxs)(t.p,{children:["After this we examine the first sheet in the workbook. We can read the entire used section of the sheet into a Lua table by taking advantage of the ",(0,r.jsx)(t.code,{children:"UsedRange"})," property on the sheet. This is much faster than calling the COM for every cell. ",(0,r.jsx)(t.code,{children:"Value()"})," returns a Lua primitive for a single cell, or a table for a range."]}),"\n",(0,r.jsxs)(t.p,{children:["Finally, we ",(0,r.jsx)(t.code,{children:"Close()"})," the workbook, passing ",(0,r.jsx)(t.code,{children:"false"})," to say we don't want to save any changes. Unlike the COM objects themselves, which are destroyed when they go out of scope, we must do this manually. The function caller now has access to the data from the spreadsheet."]}),"\n",(0,r.jsx)(t.p,{children:"As a final note, it is not advised to use this method for very large spreadsheets, due to both Lua's memory constraints and performance of the COM. If you have a very large data set, a more suitable approach may be to export from Excel in another format such as csv, and load that incrementally."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-lua",children:'function loadExcel(filename)\r\n  -- Create the COM object.\r\n  local excel = luacom.CreateObject("Excel.Application")\r\n\r\n  -- Load the file as read-only.\r\n  local workbook = excel.Workbooks:Open(filename, nil, true)\r\n  local sheet = workbook.Sheets(1)\r\n  \r\n  -- Read the whole sheet in one go.\r\n  local sheetData = sheet.UsedRange:Value()\r\n\r\n  -- Close the file.\r\n  workbook:Close(false)\r\n  \r\n  return sheetData\r\nend\n'})})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>i});var a=n(96540);const r={},s=a.createContext(r);function o(e){const t=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),a.createElement(s.Provider,{value:t},e.children)}}}]);
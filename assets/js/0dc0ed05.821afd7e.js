"use strict";(self.webpackChunkvirtalis_docs=self.webpackChunkvirtalis_docs||[]).push([[21452],{49919:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>d,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"visionary-render-programming/reference/c-api/classes/metanodes/meta-index-prim","title":"Meta_IndexPrim","description":"Module: Metanodes / Definitions","source":"@site/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-index-prim.mdx","sourceDirName":"visionary-render-programming/reference/c-api/classes/metanodes","slug":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-index-prim","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-index-prim","draft":false,"unlisted":false,"editUrl":"https://github.com/virtalis/docs/tree/master/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-index-prim.mdx","tags":[],"version":"current","lastUpdatedAt":1730817102000,"frontMatter":{"title":"Meta_IndexPrim","summary":"An IndexPrim indexes vertices from Meta_VertexAttrib siblings."},"sidebar":"visionaryRenderProgrammingSidebar","previous":{"title":"Meta_ImagePanel","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-image-panel"},"next":{"title":"Meta_KeyCodeGuard","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-key-code-guard"}}');var t=i(74848),s=i(28453);const d={title:"Meta_IndexPrim",summary:"An IndexPrim indexes vertices from Meta_VertexAttrib siblings."},c="Meta_IndexPrim",a={},o=[{value:"Public Types",id:"public-types",level:2},{value:"Detailed Description",id:"detailed-description",level:2},{value:"Public Types Documentation",id:"public-types-documentation",level:2},{value:"enum IDX",id:"enum-idx",level:3}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"meta_indexprim",children:"Meta_IndexPrim"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Module:"})," ",(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/",children:"Metanodes"})})," ",(0,t.jsx)(n.strong,{children:"/"})," ",(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/definitions",children:"Definitions"})})]}),"\n",(0,t.jsxs)(n.p,{children:["An IndexPrim indexes vertices from Meta_VertexAttrib siblings.  ",(0,t.jsx)(n.a,{href:"#detailed-description",children:"More..."})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"#include <meta_importables.hpp>"})}),"\n",(0,t.jsx)(n.h2,{id:"public-types",children:"Public Types"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Name"})]})}),(0,t.jsx)(n.tbody,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"enum"}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"#enum-idx",children:"IDX"})})," { Idx_Enabled, Idx_Prim, Idx_Content }",(0,t.jsx)("br",{}),"Property index."]})]})})]}),"\n",(0,t.jsx)(n.h2,{id:"detailed-description",children:"Detailed Description"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"struct Meta_IndexPrim;\n"})}),"\n",(0,t.jsx)(n.p,{children:"An IndexPrim indexes vertices from Meta_VertexAttrib siblings."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Note"}),": The collision system only supports meshes that provide triangles - lines and points will not be pickable with the cursor."]}),"\n",(0,t.jsxs)(n.p,{children:["Conventionally, these nodes are called ",(0,t.jsx)(n.code,{children:"IPn"})," (e.g ",(0,t.jsx)(n.code,{children:"IP1"})," for the first primitive in the mesh). However, they are appended to the internal mesh index buffer in the order they are encountered in the tree, regardless of name."]}),"\n",(0,t.jsxs)(n.p,{children:["Primitives are constructed by indexing the appropriate number of vertices from the VertexAttrib data. These indexes refer to individual vertices rather than a vertex component, so if a VertexAttrib contains position data ",(0,t.jsx)(n.code,{children:"0,0,0,1,1,1"}),", index 0 refers to point ",(0,t.jsx)(n.code,{children:"0,0,0"})," and index 1 refers to ",(0,t.jsx)(n.code,{children:"1,1,1"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"The following Prim values are supported by the renderer:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"trilist"})," - Describes primitive constructed of triangles. Each triangle is indexed using 3 integer values (e.g. ",(0,t.jsx)(n.code,{children:"0,1,2,0,3,1"})," makes two connected triangles that share two vertices)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"linelist"})," - Describes primitive constructed with lines. Each line segment is indexed using 2 integer values (e.g. ",(0,t.jsx)(n.code,{children:"0,1,1,2"})," makes two connected line segments)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"pointlist"})," - Describes primitive constructed with points. Each point is a single integer index."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"public-types-documentation",children:"Public Types Documentation"}),"\n",(0,t.jsx)(n.h3,{id:"enum-idx",children:"enum IDX"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Enumerator"}),(0,t.jsx)(n.th,{children:"Value"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Idx_Enabled"}),(0,t.jsx)(n.td,{}),(0,t.jsx)(n.td,{children:"bool - When enabled, this primitive is drawn by the mesh"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Idx_Prim"}),(0,t.jsx)(n.td,{}),(0,t.jsx)(n.td,{children:"string - Primitive type - see above description"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Idx_Content"}),(0,t.jsx)(n.td,{}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"vector<int>"})," - The indexes that make up the primitives"]})]})]})]}),"\n",(0,t.jsx)(n.p,{children:"Property index."})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>d,x:()=>c});var r=i(96540);const t={},s=r.createContext(t);function d(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);
"use strict";(self.webpackChunkvirtalis_docs=self.webpackChunkvirtalis_docs||[]).push([[1313],{6812:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>a,contentTitle:()=>o,default:()=>x,frontMatter:()=>d,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"visionary-render-programming/reference/c-api/classes/metanodes/meta-bone","title":"Meta_Bone","description":"Module: Metanodes / Definitions","source":"@site/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-bone.mdx","sourceDirName":"visionary-render-programming/reference/c-api/classes/metanodes","slug":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-bone","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-bone","draft":false,"unlisted":false,"editUrl":"https://github.com/virtalis/docs/tree/master/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-bone.mdx","tags":[],"version":"current","lastUpdatedAt":1730817102000,"frontMatter":{"title":"Meta_Bone","summary":"A Bone is a component of an inverse kinematics (IK) system."},"sidebar":"visionaryRenderProgrammingSidebar","previous":{"title":"Meta_Billboard","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-billboard"},"next":{"title":"Meta_BufferedStack","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-buffered-stack"}}');var r=n(74848),i=n(28453);const d={title:"Meta_Bone",summary:"A Bone is a component of an inverse kinematics (IK) system."},o="Meta_Bone",a={},l=[{value:"Public Types",id:"public-types",level:2},{value:"Public Types Documentation",id:"public-types-documentation",level:2},{value:"enum Axis",id:"enum-axis",level:3},{value:"enum IDX",id:"enum-idx",level:3}];function c(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"meta_bone",children:"Meta_Bone"})}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Module:"})," ",(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/",children:"Metanodes"})})," ",(0,r.jsx)(s.strong,{children:"/"})," ",(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/definitions",children:"Definitions"})})]}),"\n",(0,r.jsx)(s.p,{children:"A Bone is a component of an inverse kinematics (IK) system."}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.code,{children:"#include <meta_importables.hpp>"})}),"\n",(0,r.jsx)(s.h2,{id:"public-types",children:"Public Types"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Type"}),(0,r.jsx)(s.th,{children:"Name"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"enum"}),(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.a,{href:"#enum-axis",children:"Axis"})})," { AxisX, AxisY, AxisZ, AxisXNeg, AxisYNeg, AxisZNeg }",(0,r.jsx)("br",{}),"Values for the Axis property."]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"enum"}),(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.a,{href:"#enum-idx",children:"IDX"})})," { Idx_Enabled, Idx_Transform, Idx_IKEnabled, Idx_Axis, Idx_Offset, Idx_ResetBeforeSolving, Idx_DefaultRotation, Idx_Depth, Idx_LinkedAssembly, Idx_Target, Idx_TargetTranslationOnly, Idx_Request }"]})]})]})]}),"\n",(0,r.jsx)(s.h2,{id:"public-types-documentation",children:"Public Types Documentation"}),"\n",(0,r.jsx)(s.h3,{id:"enum-axis",children:"enum Axis"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Enumerator"}),(0,r.jsx)(s.th,{children:"Value"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"AxisX"}),(0,r.jsx)(s.td,{}),(0,r.jsx)(s.td,{})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"AxisY"}),(0,r.jsx)(s.td,{}),(0,r.jsx)(s.td,{})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"AxisZ"}),(0,r.jsx)(s.td,{}),(0,r.jsx)(s.td,{})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"AxisXNeg"}),(0,r.jsx)(s.td,{}),(0,r.jsx)(s.td,{})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"AxisYNeg"}),(0,r.jsx)(s.td,{}),(0,r.jsx)(s.td,{})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"AxisZNeg"}),(0,r.jsx)(s.td,{}),(0,r.jsx)(s.td,{})]})]})]}),"\n",(0,r.jsx)(s.p,{children:"Values for the Axis property."}),"\n",(0,r.jsx)(s.h3,{id:"enum-idx",children:"enum IDX"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Enumerator"}),(0,r.jsx)(s.th,{children:"Value"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Idx_Enabled"}),(0,r.jsx)(s.td,{}),(0,r.jsx)(s.td,{children:"Controls visibility of this bone and its descendant nodes. (IK solving is disabled for bones that aren't visible.) (bool)."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Idx_Transform"}),(0,r.jsx)(s.td,{}),(0,r.jsx)(s.td,{children:"The local transform of this bone (mat4w)."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Idx_IKEnabled"}),(0,r.jsx)(s.td,{}),(0,r.jsx)(s.td,{children:"Controls whether IK solving is enabled for this bone without affecting descendant nodes or visibility."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Idx_Axis"}),(0,r.jsx)(s.td,{}),(0,r.jsx)(s.td,{children:"The alignment of the main axis of this bone (int)."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Idx_Offset"}),(0,r.jsx)(s.td,{}),(0,r.jsx)(s.td,{children:"The attachment point of this bone relative to its parent (vec3f)."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Idx_ResetBeforeSolving"}),(0,r.jsx)(s.td,{}),(0,r.jsx)(s.td,{children:"Reset the rotation of this bone before solving it (bool)."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Idx_DefaultRotation"}),(0,r.jsx)(s.td,{}),(0,r.jsx)(s.td,{children:"The default rotation to reset this bone to (vec3f)."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Idx_Depth"}),(0,r.jsx)(s.td,{}),(0,r.jsx)(s.td,{children:"The maximum number of parent bones that can be affected when this bone is moved, or 0 for no limit (int)."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Idx_LinkedAssembly"}),(0,r.jsx)(s.td,{}),(0,r.jsx)(s.td,{children:"An assembly or other node to attach to this bone (link)."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Idx_Target"}),(0,r.jsx)(s.td,{}),(0,r.jsx)(s.td,{children:"A node that provides the target position and orientation for this bone (link)."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Idx_TargetTranslationOnly"}),(0,r.jsx)(s.td,{}),(0,r.jsx)(s.td,{children:"Ignore the rotation and scale of Target (bool)."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Idx_Request"}),(0,r.jsx)(s.td,{}),(0,r.jsx)(s.td,{children:"The target transform when a bone is manipulated directly."})]})]})]})]})}function x(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,s,n)=>{n.d(s,{R:()=>d,x:()=>o});var t=n(96540);const r={},i=t.createContext(r);function d(e){const s=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),t.createElement(i.Provider,{value:s},e.children)}}}]);
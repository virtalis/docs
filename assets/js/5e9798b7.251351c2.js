"use strict";(self.webpackChunkvirtalis_docs=self.webpackChunkvirtalis_docs||[]).push([[8507],{84448:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>d,toc:()=>a});const d=JSON.parse('{"id":"visionary-render-programming/architecture/properties","title":"Properties","description":"Standard Types","source":"@site/docs/visionary-render-programming/architecture/properties.mdx","sourceDirName":"visionary-render-programming/architecture","slug":"/visionary-render-programming/architecture/properties","permalink":"/visionary-render-programming/architecture/properties","draft":false,"unlisted":false,"editUrl":"https://github.com/virtalis/docs/tree/master/docs/visionary-render-programming/architecture/properties.mdx","tags":[],"version":"current","lastUpdatedAt":1741279868000,"frontMatter":{},"sidebar":"visionaryRenderProgrammingSidebar","previous":{"title":"Observers","permalink":"/visionary-render-programming/architecture/observers"},"next":{"title":"Scene Graph","permalink":"/visionary-render-programming/architecture/scene-graph"}}');var n=t(74848),s=t(28453);const i={},c="Properties",o={},a=[{value:"Standard Types",id:"standard-types",level:2},{value:"Array and Vector types",id:"array-and-vector-types",level:2},{value:"Semantics and Hints",id:"semantics-and-hints",level:2},{value:"Storage",id:"storage",level:2}];function l(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.header,{children:(0,n.jsx)(r.h1,{id:"properties",children:"Properties"})}),"\n",(0,n.jsx)(r.h2,{id:"standard-types",children:"Standard Types"}),"\n",(0,n.jsx)(r.p,{children:"Single element value property types"}),"\n",(0,n.jsxs)(r.table,{children:[(0,n.jsx)(r.thead,{children:(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.th,{children:"Type"}),(0,n.jsx)(r.th,{children:"Internal Type"}),(0,n.jsx)(r.th,{children:"API Function"})]})}),(0,n.jsxs)(r.tbody,{children:[(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"VR_BOOL"}),(0,n.jsx)(r.td,{children:"bool"}),(0,n.jsx)(r.td,{children:"VRAddPropertyBool"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"VR_CHAR"}),(0,n.jsx)(r.td,{children:"char"}),(0,n.jsx)(r.td,{children:"VRAddPropertyChar"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"VR_INT"}),(0,n.jsx)(r.td,{children:"int"}),(0,n.jsx)(r.td,{children:"VRAddPropertyInt"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"VR_FLOAT"}),(0,n.jsx)(r.td,{children:"float"}),(0,n.jsx)(r.td,{children:"VRAddPropertyFloat"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"VR_DOUBLE"}),(0,n.jsx)(r.td,{children:"double"}),(0,n.jsx)(r.td,{children:"VRAddPropertyDouble"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"VR_WORLD_FLOAT"}),(0,n.jsx)(r.td,{children:"double (in x64 versions)"}),(0,n.jsx)(r.td,{children:"VRAddPropertyWorldFloat"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"VR_LINK"}),(0,n.jsx)(r.td,{children:"UserClass"}),(0,n.jsx)(r.td,{children:"VRAddPropertyLink"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"VR_STRING"}),(0,n.jsx)(r.td,{children:"const char*"}),(0,n.jsx)(r.td,{children:"VRAddPropertyString"})]})]})]}),"\n",(0,n.jsx)(r.h2,{id:"array-and-vector-types",children:"Array and Vector types"}),"\n",(0,n.jsx)(r.p,{children:"The above properties (except links and strings) can be stored in array or vector properties, too."}),"\n",(0,n.jsx)(r.p,{children:"An array property is fixed size, defined when the property is added to the metanode."}),"\n",(0,n.jsx)(r.p,{children:"There are a number of standard array property types such as VRAddPropertyMat3f or VRAddPropertyVec4w, or array properties of arbitrary size can be defined."}),"\n",(0,n.jsxs)(r.table,{children:[(0,n.jsx)(r.thead,{children:(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.th,{children:"Type"}),(0,n.jsx)(r.th,{children:"Internal Type"}),(0,n.jsx)(r.th,{children:"API Function"})]})}),(0,n.jsxs)(r.tbody,{children:[(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"VR_BOOL"}),(0,n.jsx)(r.td,{children:"bool[]"}),(0,n.jsx)(r.td,{children:"VRAddPropertyArrayBool"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"VR_CHAR"}),(0,n.jsx)(r.td,{children:"char[]"}),(0,n.jsx)(r.td,{children:"VRAddPropertyArrayChar"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"VR_INT"}),(0,n.jsx)(r.td,{children:"int[]"}),(0,n.jsx)(r.td,{children:"VRAddPropertyArrayInt"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"VR_FLOAT"}),(0,n.jsx)(r.td,{children:"float[]"}),(0,n.jsx)(r.td,{children:"VRAddPropertyArrayFloat"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"VR_DOUBLE"}),(0,n.jsx)(r.td,{children:"double[]"}),(0,n.jsx)(r.td,{children:"VRAddPropertyArrayDouble"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"VR_WORLD_FLOAT"}),(0,n.jsx)(r.td,{children:"double[] (in x64 versions)"}),(0,n.jsx)(r.td,{children:"VRAddPropertyArrayWorldFloat"})]})]})]}),"\n",(0,n.jsx)(r.p,{children:"Vector properties are variable size, allowing data to be added and removed at runtime. This is usually used for storing mesh vertices, etc."}),"\n",(0,n.jsxs)(r.table,{children:[(0,n.jsx)(r.thead,{children:(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.th,{children:"Type"}),(0,n.jsx)(r.th,{children:"Internal Type"}),(0,n.jsx)(r.th,{children:"API Function"})]})}),(0,n.jsxs)(r.tbody,{children:[(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"VR_CHAR"}),(0,n.jsx)(r.td,{children:"vector(char)"}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"VRAddPropertyVectorChar"})})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"VR_INT"}),(0,n.jsx)(r.td,{children:"vector(int)"}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"VRAddPropertyVectorInt"})})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"VR_FLOAT"}),(0,n.jsx)(r.td,{children:"vector(float)"}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"VRAddPropertyVectorFloat"})})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"VR_WORLD_FLOAT"}),(0,n.jsx)(r.td,{children:"vector(double) (in x64 versions)"}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"VRAddPropertyVectorWorldFloat"})})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"VR_STRING"}),(0,n.jsx)(r.td,{children:"vector(string)"}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.code,{children:"VRAddPropertyVectorString"})})]})]})]}),"\n",(0,n.jsx)(r.h2,{id:"semantics-and-hints",children:"Semantics and Hints"}),"\n",(0,n.jsxs)(r.p,{children:["Properties can be given ",(0,n.jsx)(r.a,{href:"/visionary-render-programming/plugins/advanced/semantics",children:"semantics"}),"."]}),"\n",(0,n.jsx)(r.h2,{id:"storage",children:"Storage"}),"\n",(0,n.jsx)(r.p,{children:"Properties added to a metanode are indexed in the order they are added, however, the internal memory used to store the property data on a specific node instance may be re-arranged to provide more optimal alignment for performance improvement and platform / architecture compatibility. This is transparent to the API."})]})}function h(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},28453:(e,r,t)=>{t.d(r,{R:()=>i,x:()=>c});var d=t(96540);const n={},s=d.createContext(n);function i(e){const r=d.useContext(s);return d.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),d.createElement(s.Provider,{value:r},e.children)}}}]);
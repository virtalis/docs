"use strict";(self.webpackChunkvirtalis_docs=self.webpackChunkvirtalis_docs||[]).push([[7],{94145:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>d,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"visionary-render-programming/reference/c-api/classes/metanodes/meta-user","title":"Meta_User","description":"Module: Metanodes / Definitions","source":"@site/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-user.mdx","sourceDirName":"visionary-render-programming/reference/c-api/classes/metanodes","slug":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-user","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-user","draft":false,"unlisted":false,"editUrl":"https://github.com/virtalis/docs/tree/master/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-user.mdx","tags":[],"version":"current","frontMatter":{"title":"Meta_User","summary":"A User node represents a user, either the local user, or a member of a collaborative session."},"sidebar":"visionaryRenderProgrammingSidebar","previous":{"title":"Meta_UserLink","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-user-link"},"next":{"title":"Meta_UsersList","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-users-list"}}');var n=s(74848),i=s(28453);const d={title:"Meta_User",summary:"A User node represents a user, either the local user, or a member of a collaborative session."},a="Meta_User",l={},c=[{value:"Public Types",id:"public-types",level:2},{value:"Public Types Documentation",id:"public-types-documentation",level:2},{value:"enum IDX",id:"enum-idx",level:3},{value:"enum ReadWriteFlags",id:"enum-readwriteflags",level:3}];function o(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.header,{children:(0,n.jsx)(r.h1,{id:"meta_user",children:"Meta_User"})}),"\n",(0,n.jsxs)(r.p,{children:[(0,n.jsx)(r.strong,{children:"Module:"})," ",(0,n.jsx)(r.strong,{children:(0,n.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/",children:"Metanodes"})})," ",(0,n.jsx)(r.strong,{children:"/"})," ",(0,n.jsx)(r.strong,{children:(0,n.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/definitions",children:"Definitions"})})]}),"\n",(0,n.jsx)(r.p,{children:"A User node represents a user, either the local user, or a member of a collaborative session."}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)(r.code,{children:"#include <meta_root.hpp>"})}),"\n",(0,n.jsx)(r.h2,{id:"public-types",children:"Public Types"}),"\n",(0,n.jsxs)(r.table,{children:[(0,n.jsx)(r.thead,{children:(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.th,{children:"Type"}),(0,n.jsx)(r.th,{children:"Name"})]})}),(0,n.jsxs)(r.tbody,{children:[(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"enum"}),(0,n.jsxs)(r.td,{children:[(0,n.jsx)(r.strong,{children:(0,n.jsx)(r.a,{href:"#enum-idx",children:"IDX"})})," { Idx_Addr, Idx_Port, Idx_ProcID, Idx_Authority, Idx_CreationTime, Idx_Master, Idx_EnableBeacon, Idx_ClusterSlave, Idx_NetRWFlags, Idx_UserName }",(0,n.jsx)("br",{}),"Property index."]})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"enum"}),(0,n.jsxs)(r.td,{children:[(0,n.jsx)(r.strong,{children:(0,n.jsx)(r.a,{href:"#enum-readwriteflags",children:"ReadWriteFlags"})})," { Read = VTBIT(0), Write = VTBIT(1), ReadWrite = Read"]})]})]})]}),"\n",(0,n.jsx)(r.h2,{id:"public-types-documentation",children:"Public Types Documentation"}),"\n",(0,n.jsx)(r.h3,{id:"enum-idx",children:"enum IDX"}),"\n",(0,n.jsxs)(r.table,{children:[(0,n.jsx)(r.thead,{children:(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.th,{children:"Enumerator"}),(0,n.jsx)(r.th,{children:"Value"}),(0,n.jsx)(r.th,{children:"Description"})]})}),(0,n.jsxs)(r.tbody,{children:[(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"Idx_Addr"}),(0,n.jsx)(r.td,{}),(0,n.jsx)(r.td,{children:"string - (read only) resolvable host name"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"Idx_Port"}),(0,n.jsx)(r.td,{}),(0,n.jsx)(r.td,{children:"int - (read only) port number"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"Idx_ProcID"}),(0,n.jsx)(r.td,{}),(0,n.jsx)(r.td,{children:"int - (read only) local process ID"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"Idx_Authority"}),(0,n.jsx)(r.td,{}),(0,n.jsx)(r.td,{children:"int - Authority level, highest authority is Master, if more than one node of the same Authority exists then Master is decided by earliest CreationTime and then pseudo randomly from NodeID ( vrnet::NetIO::processElectMaster() )"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"Idx_CreationTime"}),(0,n.jsx)(r.td,{}),(0,n.jsx)(r.td,{children:"int[2] - (read only) 64-bit timestamp at which the User was created, if two Users have the same Authority the one who was created first is Master"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"Idx_Master"}),(0,n.jsx)(r.td,{}),(0,n.jsx)(r.td,{children:"bool - (read only) Set if this User is the Master"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"Idx_EnableBeacon"}),(0,n.jsx)(r.td,{}),(0,n.jsx)(r.td,{children:"bool - if True the multicast beacon is active, allowing other VR instances to see this User"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"Idx_ClusterSlave"}),(0,n.jsx)(r.td,{}),(0,n.jsx)(r.td,{children:"bool - (read only) If True this is a cluster slave node, only the slaves master should interact with this User"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"Idx_NetRWFlags"}),(0,n.jsx)(r.td,{}),(0,n.jsx)(r.td,{children:"int - (read only) Defines if this user can read/write vrtree changes over the network"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"Idx_UserName"}),(0,n.jsx)(r.td,{}),(0,n.jsx)(r.td,{children:"string - (read only) username"})]})]})]}),"\n",(0,n.jsx)(r.p,{children:"Property index."}),"\n",(0,n.jsx)(r.h3,{id:"enum-readwriteflags",children:"enum ReadWriteFlags"}),"\n",(0,n.jsxs)(r.table,{children:[(0,n.jsx)(r.thead,{children:(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.th,{children:"Enumerator"}),(0,n.jsx)(r.th,{children:"Value"}),(0,n.jsx)(r.th,{children:"Description"})]})}),(0,n.jsxs)(r.tbody,{children:[(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"Read"}),(0,n.jsx)(r.td,{children:"VTBIT(0)"}),(0,n.jsx)(r.td,{})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"Write"}),(0,n.jsx)(r.td,{children:"VTBIT(1)"}),(0,n.jsx)(r.td,{})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"ReadWrite"}),(0,n.jsx)(r.td,{children:"Read | Write"}),(0,n.jsx)(r.td,{})]})]})]}),"\n",(0,n.jsx)(r.p,{children:"Flags for NetRWFlags."})]})}function h(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(o,{...e})}):o(e)}},28453:(e,r,s)=>{s.d(r,{R:()=>d,x:()=>a});var t=s(96540);const n={},i=t.createContext(n);function d(e){const r=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:d(e.components),t.createElement(i.Provider,{value:r},e.children)}}}]);
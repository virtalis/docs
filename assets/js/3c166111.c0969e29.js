"use strict";(self.webpackChunkvirtalis_docs=self.webpackChunkvirtalis_docs||[]).push([[8641],{94597:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"visionary-render-programming/reference/c-api/classes/metanodes/meta-surface-shader-instance","title":"Meta_SurfaceShaderInstance","description":"Module: Metanodes / Definitions","source":"@site/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-surface-shader-instance.mdx","sourceDirName":"visionary-render-programming/reference/c-api/classes/metanodes","slug":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-surface-shader-instance","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-surface-shader-instance","draft":false,"unlisted":false,"editUrl":"https://github.com/virtalis/docs/tree/master/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-surface-shader-instance.mdx","tags":[],"version":"current","lastUpdatedAt":1730820727000,"frontMatter":{"title":"Meta_SurfaceShaderInstance","summary":"Meta_SurfaceShaderInstances are associated with Materials, when attached as a child of a material they will effect the vertex and/or fragment shaders of any visuals rendered with said material."},"sidebar":"visionaryRenderProgrammingSidebar","previous":{"title":"Meta_SurfaceShaderDefinition","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-surface-shader-definition"},"next":{"title":"Meta_SystemCollision","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-system-collision"}}');var s=r(74848),t=r(28453);const i={title:"Meta_SurfaceShaderInstance",summary:"Meta_SurfaceShaderInstances are associated with Materials, when attached as a child of a material they will effect the vertex and/or fragment shaders of any visuals rendered with said material."},d="Meta_SurfaceShaderInstance",c={},l=[{value:"Public Types",id:"public-types",level:2},{value:"Public Functions",id:"public-functions",level:2},{value:"Detailed Description",id:"detailed-description",level:2},{value:"Public Types Documentation",id:"public-types-documentation",level:2},{value:"enum Version",id:"enum-version",level:3},{value:"enum IDX",id:"enum-idx",level:3},{value:"Public Functions Documentation",id:"public-functions-documentation",level:2},{value:"Meta_SurfaceShaderInstance",id:"meta_surfaceshaderinstance-1",level:3}];function o(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"meta_surfaceshaderinstance",children:"Meta_SurfaceShaderInstance"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Module:"})," ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/",children:"Metanodes"})})," ",(0,s.jsx)(n.strong,{children:"/"})," ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/definitions",children:"Definitions"})})]}),"\n",(0,s.jsxs)(n.p,{children:["Meta_SurfaceShaderInstances are associated with Materials, when attached as a child of a material they will effect the vertex and/or fragment shaders of any visuals rendered with said material.  ",(0,s.jsx)(n.a,{href:"#detailed-description",children:"More..."})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"#include <meta_division.hpp>"})}),"\n",(0,s.jsx)(n.h2,{id:"public-types",children:"Public Types"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Name"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"enum"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#enum-version",children:"Version"})})," { CurrentVersion =1 }"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"enum"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#enum-idx",children:"IDX"})})," { Idx_Version, Idx_Enabled, Idx_Definition }"]})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"public-functions",children:"Public Functions"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Name"})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#meta_surfaceshaderinstance-1",children:"Meta_SurfaceShaderInstance"})}),"()"]})]})})]}),"\n",(0,s.jsx)(n.h2,{id:"detailed-description",children:"Detailed Description"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"struct Meta_SurfaceShaderInstance;\n"})}),"\n",(0,s.jsx)(n.p,{children:"Meta_SurfaceShaderInstances are associated with Materials, when attached as a child of a material they will effect the vertex and/or fragment shaders of any visuals rendered with said material."}),"\n",(0,s.jsx)(n.p,{children:"Whether the vertex/fragment shaders will be affected depends on the SourceCode in the Definition. The shader can access various vertex / surface properties of the visual being rendered to use for various things."}),"\n",(0,s.jsxs)(n.p,{children:["The parameters of the material instance's arguments are selectively specified through the creation of child ",(0,s.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-material-argument",children:"Meta_MaterialArgument"})," nodes. These Meta_MaterialArguments can be set to take their value from the Definition's default value, a specific value from StdMaterial, or a custom value."]}),"\n",(0,s.jsx)(n.p,{children:"Some examples of surface shaders: Procedural texturing, procedural vertex animation, complex multi-layer material rendering."}),"\n",(0,s.jsx)(n.h2,{id:"public-types-documentation",children:"Public Types Documentation"}),"\n",(0,s.jsx)(n.h3,{id:"enum-version",children:"enum Version"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Enumerator"}),(0,s.jsx)(n.th,{children:"Value"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"CurrentVersion"}),(0,s.jsx)(n.td,{children:"=1"}),(0,s.jsx)(n.td,{})]})})]}),"\n",(0,s.jsx)(n.h3,{id:"enum-idx",children:"enum IDX"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Enumerator"}),(0,s.jsx)(n.th,{children:"Value"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_Version"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"version number of this metanode, for potential future upgrade hooks"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_Enabled"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"if false any object using this material instance will not be drawn"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_Definition"}),(0,s.jsx)(n.td,{}),(0,s.jsxs)(n.td,{children:["link to a ",(0,s.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-surface-shader-definition",children:"Meta_SurfaceShaderDefinition"})," to use"]})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"public-functions-documentation",children:"Public Functions Documentation"}),"\n",(0,s.jsx)(n.h3,{id:"meta_surfaceshaderinstance-1",children:"Meta_SurfaceShaderInstance"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"inline Meta_SurfaceShaderInstance()\n"})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>d});var a=r(96540);const s={},t=a.createContext(s);function i(e){const n=a.useContext(t);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(t.Provider,{value:n},e.children)}}}]);
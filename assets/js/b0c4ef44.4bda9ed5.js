"use strict";(self.webpackChunkvirtalis_docs=self.webpackChunkvirtalis_docs||[]).push([[6081],{69775:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"visionary-render-programming/reference/c-api/classes/metanodes/meta-prop-semantics","title":"Meta_PropSemantics","description":"Module: Metanodes / Definitions","source":"@site/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-prop-semantics.mdx","sourceDirName":"visionary-render-programming/reference/c-api/classes/metanodes","slug":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-prop-semantics","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-prop-semantics","draft":false,"unlisted":false,"editUrl":"https://github.com/virtalis/docs/tree/master/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-prop-semantics.mdx","tags":[],"version":"current","lastUpdatedAt":1730817102000,"frontMatter":{"title":"Meta_PropSemantics","summary":"Metanode that contains a basic description of what a property is intended to be used for. e.g. Is it a colour (for a vec4f property), or a file (for a string property). This can be used as the node which is attached to the meta-metanodes with the semantics macros, or attached to anything else that needs some hints for a user interface."},"sidebar":"visionaryRenderProgrammingSidebar","previous":{"title":"Meta_PropSemantics::Range","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-prop-semantics-range"},"next":{"title":"Meta_PropertyTrack","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-property-track"}}');var n=r(74848),i=r(28453);const a={title:"Meta_PropSemantics",summary:"Metanode that contains a basic description of what a property is intended to be used for. e.g. Is it a colour (for a vec4f property), or a file (for a string property). This can be used as the node which is attached to the meta-metanodes with the semantics macros, or attached to anything else that needs some hints for a user interface."},o="Meta_PropSemantics",d={},c=[{value:"Public Classes",id:"public-classes",level:2},{value:"Public Types",id:"public-types",level:2},{value:"Public Types Documentation",id:"public-types-documentation",level:2},{value:"enum IDX",id:"enum-idx",level:3}];function l(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"meta_propsemantics",children:"Meta_PropSemantics"})}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Module:"})," ",(0,n.jsx)(t.strong,{children:(0,n.jsx)(t.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/",children:"Metanodes"})})," ",(0,n.jsx)(t.strong,{children:"/"})," ",(0,n.jsx)(t.strong,{children:(0,n.jsx)(t.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/definitions",children:"Definitions"})})]}),"\n",(0,n.jsx)(t.p,{children:"Metanode that contains a basic description of what a property is intended to be used for. e.g. Is it a colour (for a vec4f property), or a file (for a string property). This can be used as the node which is attached to the meta-metanodes with the semantics macros, or attached to anything else that needs some hints for a user interface."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.code,{children:"#include <meta_semantics.hpp>"})}),"\n",(0,n.jsx)(t.h2,{id:"public-classes",children:"Public Classes"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Name"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"struct"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.strong,{children:(0,n.jsx)(t.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-prop-semantics-prop-type",children:"PropType"})})})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"struct"}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.strong,{children:(0,n.jsx)(t.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-prop-semantics-range",children:"Range"})})," ",(0,n.jsx)("br",{}),"Helper object for constructing a range of two vector objects."]})]})]})]}),"\n",(0,n.jsx)(t.h2,{id:"public-types",children:"Public Types"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Name"})]})}),(0,n.jsx)(t.tbody,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"enum"}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.strong,{children:(0,n.jsx)(t.a,{href:"#enum-idx",children:"IDX"})})," { Idx_Type, Idx_Filter, Idx_ReadOnly, Idx_Range }"]})]})})]}),"\n",(0,n.jsx)(t.h2,{id:"public-types-documentation",children:"Public Types Documentation"}),"\n",(0,n.jsx)(t.h3,{id:"enum-idx",children:"enum IDX"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Enumerator"}),(0,n.jsx)(t.th,{children:"Value"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"Idx_Type"}),(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{children:"The type of property For Image/File/FileSave - a Windows formatted file filter string with \\0 replaced with"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"Idx_Filter"}),(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"Idx_ReadOnly"}),(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{children:"Whether this property should be user-editable The range of values - 8 doubles to accommodate ranges up to vec4 min/max (stored in doubles, even if it's an int property). Use the Range helper and setPropertyValueData to set this property. It's 8 doubles because that is less overhead than two nodes \"min, max\" + their respective value properties. If max == min, there is no range (no edit should be done with ReadOnly, not a zero-sized range)"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"Idx_Range"}),(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{})]})]})]})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},28453:(e,t,r)=>{r.d(t,{R:()=>a,x:()=>o});var s=r(96540);const n={},i=s.createContext(n);function a(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:a(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);
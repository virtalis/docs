"use strict";(self.webpackChunkvirtalis_docs=self.webpackChunkvirtalis_docs||[]).push([[2994],{62787:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>n,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"virtalis-hub-system-admin/configure/trusted-certificates","title":"Add Trusted Certificates for External HTTP Requests","description":"To request that Virtalis Hub import a file, you specify the URL that its Translator Service will download the file from and, optionally, the URL that its Job API will notify on completion of the translation. A request to an HTTPS URL that is secured with an untrusted certificate, for example for an internal service in an organisation or for testing purposes, will fail. This document explains how to enable certificates to be trusted by Virtalis Hub by adding them to the secrets of the Translator Service and the Job API.","source":"@site/docs/virtalis-hub-system-admin/configure/trusted-certificates.mdx","sourceDirName":"virtalis-hub-system-admin/configure","slug":"/virtalis-hub-system-admin/configure/trusted-certificates","permalink":"/virtalis-hub-system-admin/configure/trusted-certificates","draft":false,"unlisted":false,"editUrl":"https://github.com/virtalis/docs/tree/master/docs/virtalis-hub-system-admin/configure/trusted-certificates.mdx","tags":[],"version":"current","lastUpdatedAt":1740107398000,"frontMatter":{},"sidebar":"virtalisHubSystemAdminSidebar","previous":{"title":"Mesh Splitting Overview and Configuration","permalink":"/virtalis-hub-system-admin/configure/mesh-splitting"},"next":{"title":"User Management","permalink":"/virtalis-hub-system-admin/configure/user-management"}}');var s=r(74848),a=r(28453);const n={},o="Add Trusted Certificates for External HTTP Requests",c={},l=[{value:"Create and Deploy Secrets",id:"create-and-deploy-secrets",level:2},{value:"Installing File Source Certificates",id:"installing-file-source-certificates",level:2},{value:"How to Use Self-signed Certificates in the Platform",id:"how-to-use-self-signed-certificates-in-the-platform",level:3},{value:"Error Messages",id:"error-messages",level:2}];function d(e){const t={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"add-trusted-certificates-for-external-http-requests",children:"Add Trusted Certificates for External HTTP Requests"})}),"\n",(0,s.jsx)(t.p,{children:"To request that Virtalis Hub import a file, you specify the URL that its Translator Service will download the file from and, optionally, the URL that its Job API will notify on completion of the translation. A request to an HTTPS URL that is secured with an untrusted certificate, for example for an internal service in an organisation or for testing purposes, will fail. This document explains how to enable certificates to be trusted by Virtalis Hub by adding them to the secrets of the Translator Service and the Job API."}),"\n",(0,s.jsx)(t.p,{children:"Certificates can be loaded in the secrets of the Translator Service and the Job API to specify they should be accepted as trusted. Each certificate will be logged at start-up as it\u2019s loaded by the Translator Service and, if there are any errors loading them or requesting any resources, that will also be logged appropriately. After the certificates have been loaded, those certificates will be trusted and external requests to servers using those certificates will succeed."}),"\n",(0,s.jsx)(t.admonition,{type:"note",children:(0,s.jsx)(t.p,{children:"You may need to configure this for both the Translator Service and the Job API, since there are two places where external HTTP requests are made: the translator service can download data from the specified URL, and the Job API can optionally call to an external URL when a submitted job is complete."})}),"\n",(0,s.jsx)(t.p,{children:"See also:"}),"\n",(0,s.jsx)(t.p,{children:"Secrets for further information if you are not familiar with this feature of Kubernetes."}),"\n",(0,s.jsx)(t.h2,{id:"create-and-deploy-secrets",children:"Create and Deploy Secrets"}),"\n",(0,s.jsx)(t.h2,{id:"installing-file-source-certificates",children:"Installing File Source Certificates"}),"\n",(0,s.jsx)(t.h3,{id:"how-to-use-self-signed-certificates-in-the-platform",children:"How to Use Self-signed Certificates in the Platform"}),"\n",(0,s.jsx)(t.p,{children:"Adding a certificate assumes that you already have an HTTPS server set up with a self-signed certificate. Certificates in PEM format are supported, for example:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"1-----BEGIN CERTIFICATE-----\r\n2(The hex data of the certificate)\r\n3-----END CERTIFICATE-----\n"})}),"\n",(0,s.jsx)(t.p,{children:"Once you have your certificate in this format, save it, for example as \u201cexample.crt\u201d, and add it to the Translator Service as a secret. Then update the main TranslatorServiceSecrets to include the secret name in the \u201cCertificates\u201d field. For example:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'1"Certificates": [\r\n2  \u201cexample.crt\u201d,\r\n3  \u201canotherExample.crt\u201d\r\n4]  \n'})}),"\n",(0,s.jsx)(t.p,{children:"You may need to do this to both the Translator Service secrets and the Job API secrets, as noted above."}),"\n",(0,s.jsx)(t.p,{children:"Then, when importing an asset, use your HTTPS server's URL in the translation message to download the file and then optionally use JobCallbackUrl to call the external service to report that the job has completed successfully."}),"\n",(0,s.jsx)(t.h2,{id:"error-messages",children:"Error Messages"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"VirtalisException: Unable to load the certificate called { certificate }, check if the certificate is in the secret folder.\n"})}),"\n",(0,s.jsx)(t.p,{children:"If this exception message occurs, check the certificate file specified, as it may have been formatted incorrectly."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"VirtalisException Unable to load the certificate called { certificate } because the certificate is expired.\n"})}),"\n",(0,s.jsx)(t.p,{children:"If this exception message occurs, check the certificate expiration date, as it is most likely expired. The default expiration date is one year for a certificate that is issued by a Stand-alone Certificate Authority CA."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"Error message: Certificate failed validation due to multiple remote certificate chain errors.\n"})}),"\n",(0,s.jsx)(t.p,{children:"Under this error message it should list the chain errors and the reason behind them that have occurred. If an UntrustedRoot error is listed as the only error, then the problem is that the certificate used by the server is not configured as a trusted certificate."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"Error message: An ssl error occurred when loading {requestUri}: {sslPolicyError}\n"})}),"\n",(0,s.jsx)(t.p,{children:"If this error message occurs, the policy error will be either \u201cRemoteCertificateNotAvailable\u201d or \u201cRemoteCertificateNameMismatch\u201d, which indicates that there\u2019s some configuration issue with the remote server\u2019s certificate beyond its trusted status."})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,t,r)=>{r.d(t,{R:()=>n,x:()=>o});var i=r(96540);const s={},a=i.createContext(s);function n(e){const t=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:n(e.components),i.createElement(a.Provider,{value:t},e.children)}}}]);
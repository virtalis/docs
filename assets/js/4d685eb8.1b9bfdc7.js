"use strict";(self.webpackChunkvirtalis_docs=self.webpackChunkvirtalis_docs||[]).push([[5797],{96445:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>d,contentTitle:()=>a,default:()=>l,frontMatter:()=>o,metadata:()=>i,toc:()=>h});const i=JSON.parse('{"id":"visionary-render-programming/reference/c-api/modules/metanodes/migrations","title":"Migrations","description":"Module: Metanodes","source":"@site/docs/visionary-render-programming/reference/c-api/modules/metanodes/migrations.mdx","sourceDirName":"visionary-render-programming/reference/c-api/modules/metanodes","slug":"/visionary-render-programming/reference/c-api/modules/metanodes/migrations","permalink":"/visionary-render-programming/reference/c-api/modules/metanodes/migrations","draft":false,"unlisted":false,"editUrl":"https://github.com/virtalis/docs/tree/master/docs/visionary-render-programming/reference/c-api/modules/metanodes/migrations.mdx","tags":[],"version":"current","lastUpdatedAt":1730817102000,"frontMatter":{"title":"Migrations","summary":"Functions for defining metanode migrations."},"sidebar":"visionaryRenderProgrammingSidebar","previous":{"title":"Definitions","permalink":"/visionary-render-programming/reference/c-api/modules/metanodes/definitions"},"next":{"title":"Properties","permalink":"/visionary-render-programming/reference/c-api/modules/metanodes/properties"}}');var t=n(74848),s=n(28453);const o={title:"Migrations",summary:"Functions for defining metanode migrations."},a="Migrations",d={},h=[{value:"Functions",id:"functions",level:2},{value:"Functions Documentation",id:"functions-documentation",level:2},{value:"VRAddInstanceMigration",id:"vraddinstancemigration",level:3},{value:"VRAddMigration",id:"vraddmigration",level:3},{value:"VRChangePropertyArrayBool",id:"vrchangepropertyarraybool",level:3},{value:"VRChangePropertyArrayChar",id:"vrchangepropertyarraychar",level:3},{value:"VRChangePropertyArrayDouble",id:"vrchangepropertyarraydouble",level:3},{value:"VRChangePropertyArrayFloat",id:"vrchangepropertyarrayfloat",level:3},{value:"VRChangePropertyArrayInt",id:"vrchangepropertyarrayint",level:3},{value:"VRChangePropertyArrayWorldFloat",id:"vrchangepropertyarrayworldfloat",level:3},{value:"VRChangePropertyBool",id:"vrchangepropertybool",level:3},{value:"VRChangePropertyChar",id:"vrchangepropertychar",level:3},{value:"VRChangePropertyDouble",id:"vrchangepropertydouble",level:3},{value:"VRChangePropertyFloat",id:"vrchangepropertyfloat",level:3},{value:"VRChangePropertyInt",id:"vrchangepropertyint",level:3},{value:"VRChangePropertyLink",id:"vrchangepropertylink",level:3},{value:"VRChangePropertyName",id:"vrchangepropertyname",level:3},{value:"VRChangePropertyString",id:"vrchangepropertystring",level:3},{value:"VRChangePropertyVectorChar",id:"vrchangepropertyvectorchar",level:3},{value:"VRChangePropertyVectorFloat",id:"vrchangepropertyvectorfloat",level:3},{value:"VRChangePropertyVectorInt",id:"vrchangepropertyvectorint",level:3},{value:"VRChangePropertyVectorString",id:"vrchangepropertyvectorstring",level:3},{value:"VRChangePropertyVectorWorldFloat",id:"vrchangepropertyvectorworldfloat",level:3},{value:"VRChangePropertyWorldFloat",id:"vrchangepropertyworldfloat",level:3},{value:"VRCloseMigrationHandle",id:"vrclosemigrationhandle",level:3},{value:"VRMigrationCopyKnownProperties",id:"vrmigrationcopyknownproperties",level:3},{value:"VRMigrationCreateCurrentNode",id:"vrmigrationcreatecurrentnode",level:3},{value:"VRMigrationFinish",id:"vrmigrationfinish",level:3},{value:"VRMigrationNext",id:"vrmigrationnext",level:3},{value:"VRMigrationPrepareNode",id:"vrmigrationpreparenode",level:3},{value:"VRMigrationPrev",id:"vrmigrationprev",level:3},{value:"VRRemoveProperty",id:"vrremoveproperty",level:3},{value:"VRSetMigrationDown",id:"vrsetmigrationdown",level:3},{value:"VRSetMigrationDowngradeNode",id:"vrsetmigrationdowngradenode",level:3},{value:"VRSetMigrationUp",id:"vrsetmigrationup",level:3},{value:"VRSetMigrationUpgradeNode",id:"vrsetmigrationupgradenode",level:3}];function c(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"migrations",children:"Migrations"})}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Module:"})," ",(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/",children:"Metanodes"})})]}),"\n",(0,t.jsx)(r.p,{children:"Functions for defining metanode migrations."}),"\n",(0,t.jsx)(r.h2,{id:"functions",children:"Functions"}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"Type"}),(0,t.jsx)(r.th,{children:"Name"})]})}),(0,t.jsxs)(r.tbody,{children:[(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"int"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"#vraddinstancemigration",children:"VRAddInstanceMigration"})}),"(",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})," node, ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/function-prototypes#typedef-migrationfunc",children:"MigrationFunc"})," func, void * userData)"]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"int"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"#vraddmigration",children:"VRAddMigration"})}),"(",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/function-prototypes#typedef-migrationaddfunc",children:"MigrationAddFunc"})," func)",(0,t.jsx)("br",{}),"Adds a migration to the ordered list of migrations applied to the metanode."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"int"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"#vrchangepropertyarraybool",children:"VRChangePropertyArrayBool"})}),"(",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propName, int numElements)",(0,t.jsx)("br",{}),"Changes the specified property to a VR_BOOL array type."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"int"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"#vrchangepropertyarraychar",children:"VRChangePropertyArrayChar"})}),"(",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propName, int numElements)",(0,t.jsx)("br",{}),"Changes the specified property to a VR_CHAR array type."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"int"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"#vrchangepropertyarraydouble",children:"VRChangePropertyArrayDouble"})}),"(",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propName, int numElements)",(0,t.jsx)("br",{}),"Changes the specified property to a VR_DOUBLE array type."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"int"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"#vrchangepropertyarrayfloat",children:"VRChangePropertyArrayFloat"})}),"(",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propName, int numElements)",(0,t.jsx)("br",{}),"Changes the specified property to a VR_FLOAT array type."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"int"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"#vrchangepropertyarrayint",children:"VRChangePropertyArrayInt"})}),"(",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propName, int numElements)",(0,t.jsx)("br",{}),"Changes the specified property to a VR_INT array type."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"int"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"#vrchangepropertyarrayworldfloat",children:"VRChangePropertyArrayWorldFloat"})}),"(",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propName, int numElements)",(0,t.jsx)("br",{}),"Changes the specified property to a VR_WORLD_FLOAT array type."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"int"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"#vrchangepropertybool",children:"VRChangePropertyBool"})}),"(",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propName)",(0,t.jsx)("br",{}),"Changes the specified property to single element VR_BOOL type."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"int"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"#vrchangepropertychar",children:"VRChangePropertyChar"})}),"(",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propName)",(0,t.jsx)("br",{}),"Changes the specified property to single element VR_CHAR type."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"int"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"#vrchangepropertydouble",children:"VRChangePropertyDouble"})}),"(",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propName)",(0,t.jsx)("br",{}),"Changes the specified property to single element VR_DOUBLE type."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"int"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"#vrchangepropertyfloat",children:"VRChangePropertyFloat"})}),"(",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propName)",(0,t.jsx)("br",{}),"Changes the specified property to single element VR_FLOAT type."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"int"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"#vrchangepropertyint",children:"VRChangePropertyInt"})}),"(",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propName)",(0,t.jsx)("br",{}),"Changes the specified property to single element VR_INT type."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"int"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"#vrchangepropertylink",children:"VRChangePropertyLink"})}),"(",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propName)",(0,t.jsx)("br",{}),"Changes the specified property to single element VR_LINK type."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"int"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"#vrchangepropertyname",children:"VRChangePropertyName"})}),"(",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propName, const char * newPropName)",(0,t.jsx)("br",{}),"Renames a property."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"int"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"#vrchangepropertystring",children:"VRChangePropertyString"})}),"(",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propName)",(0,t.jsx)("br",{}),"Changes the specified property to single element VR_STRING type."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"int"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"#vrchangepropertyvectorchar",children:"VRChangePropertyVectorChar"})}),"(",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propName)",(0,t.jsx)("br",{}),"Changes the specified property to a VR_VEC_CHAR type."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"int"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"#vrchangepropertyvectorfloat",children:"VRChangePropertyVectorFloat"})}),"(",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propName)",(0,t.jsx)("br",{}),"Changes the specified property to a VR_VEC_FLOAT type."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"int"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"#vrchangepropertyvectorint",children:"VRChangePropertyVectorInt"})}),"(",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propName)",(0,t.jsx)("br",{}),"Changes the specified property to a VR_VEC_INT type."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"int"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"#vrchangepropertyvectorstring",children:"VRChangePropertyVectorString"})}),"(",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propName)",(0,t.jsx)("br",{}),"Changes the specified property to a VR_VEC_STRING type."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"int"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"#vrchangepropertyvectorworldfloat",children:"VRChangePropertyVectorWorldFloat"})}),"(",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propName)",(0,t.jsx)("br",{}),"Changes the specified property to a VR_VEC_WORLD_FLOAT type."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"int"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"#vrchangepropertyworldfloat",children:"VRChangePropertyWorldFloat"})}),"(",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propName)",(0,t.jsx)("br",{}),"Changes the specified property to single element VR_WORLD_FLOAT type."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"void"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"#vrclosemigrationhandle",children:"VRCloseMigrationHandle"})}),"(",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmigration",children:"HMigration"})," migration)",(0,t.jsx)("br",{}),"Closes a migration handle."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"int"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"#vrmigrationcopyknownproperties",children:"VRMigrationCopyKnownProperties"})}),"(",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmigration",children:"HMigration"})," migration, ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})," old, ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})," newNode)",(0,t.jsx)("br",{}),"Copies values of all properties that exist on both new and old node versions of the nodes. The nodes must be the same basic type, but may be different versions of that type. Properties that do not match in name or type between the versions are left for the migration implementation to handle."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"#vrmigrationcreatecurrentnode",children:"VRMigrationCreateCurrentNode"})}),"(",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmigration",children:"HMigration"})," migration, ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})," node)",(0,t.jsx)("br",{}),"Creates an instance of a node using the metanode version defined by this migration."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"int"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"#vrmigrationfinish",children:"VRMigrationFinish"})}),"(",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmigration",children:"HMigration"})," migration, ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})," old, ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})," newNode)",(0,t.jsx)("br",{}),"Helper function for completing a migration step. This function moves all children of old to newNode, deletes old, and closes its handle."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmigration",children:"HMigration"})}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"#vrmigrationnext",children:"VRMigrationNext"})}),"(",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmigration",children:"HMigration"})," migration)",(0,t.jsx)("br",{}),"Gets the next migration in the chain (the one for the version after this one)"]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"#vrmigrationpreparenode",children:"VRMigrationPrepareNode"})}),"(",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmigration",children:"HMigration"})," migration, ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})," node)",(0,t.jsx)("br",{}),"Calls the registered upgrade node function of the migration previous or next to this one (depending on whether node is older or newer than migration). This effectively brings node up to date, ready for this migration to perform its upgrade."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmigration",children:"HMigration"})}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"#vrmigrationprev",children:"VRMigrationPrev"})}),"(",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmigration",children:"HMigration"})," migration)",(0,t.jsx)("br",{}),"Gets the previous migration in the chain (the one for the version before this one)"]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"int"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"#vrremoveproperty",children:"VRRemoveProperty"})}),"(",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName)",(0,t.jsx)("br",{}),"Removes a property from a metanode."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"int"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"#vrsetmigrationdown",children:"VRSetMigrationDown"})}),"(",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmigration",children:"HMigration"})," migration, ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/function-prototypes#typedef-migrationdownfunc",children:"MigrationDownFunc"})," func)",(0,t.jsx)("br",{}),"Adds a downgrade function to a migration."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"int"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"#vrsetmigrationdowngradenode",children:"VRSetMigrationDowngradeNode"})}),"(",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmigration",children:"HMigration"})," migration, ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/function-prototypes#typedef-migrationdowngradefunc",children:"MigrationDowngradeFunc"})," func)",(0,t.jsx)("br",{}),"Adds a node downgrade function to a migration."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"int"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"#vrsetmigrationup",children:"VRSetMigrationUp"})}),"(",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmigration",children:"HMigration"})," migration, ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/function-prototypes#typedef-migrationupfunc",children:"MigrationUpFunc"})," func)",(0,t.jsx)("br",{}),"Adds an upgrade function to a migration."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"int"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"#vrsetmigrationupgradenode",children:"VRSetMigrationUpgradeNode"})}),"(",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmigration",children:"HMigration"})," migration, ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/function-prototypes#typedef-migrationupgradefunc",children:"MigrationUpgradeFunc"})," func)",(0,t.jsx)("br",{}),"Adds a node upgrade function to a migration."]})]})]})]}),"\n",(0,t.jsx)(r.h2,{id:"functions-documentation",children:"Functions Documentation"}),"\n",(0,t.jsx)(r.h3,{id:"vraddinstancemigration",children:"VRAddInstanceMigration"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-cpp",children:"int VRAddInstanceMigration(\r\n    HNode node,\r\n    MigrationFunc func,\r\n    void * userData\r\n)\n"})}),"\n",(0,t.jsx)(r.h3,{id:"vraddmigration",children:"VRAddMigration"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-cpp",children:"int VRAddMigration(\r\n    HMeta metaNode,\r\n    MigrationAddFunc func\r\n)\n"})}),"\n",(0,t.jsx)(r.p,{children:"Adds a migration to the ordered list of migrations applied to the metanode."}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"func"})," function to call to register the migration specifics. This function is called immediately."]}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Return"}),": 0 if the migration is added successfully."]}),"\n",(0,t.jsxs)(r.p,{children:["The function provided is expected to be implemented to call VRSetMigration functions. (",(0,t.jsx)(r.a,{href:"#vrsetmigrationup",children:"VRSetMigrationUp"}),", ",(0,t.jsx)(r.a,{href:"#vrsetmigrationdown",children:"VRSetMigrationDown"}),", ",(0,t.jsx)(r.a,{href:"#vrsetmigrationupgradenode",children:"VRSetMigrationUpgradeNode"}),", ",(0,t.jsx)(r.a,{href:"#vrsetmigrationdowngradenode",children:"VRSetMigrationDowngradeNode"}),")"]}),"\n",(0,t.jsx)(r.p,{children:"The number of calls to this function during metanode creation defines the version number of the metanode."}),"\n",(0,t.jsx)(r.p,{children:"Migrations can only be added to uninstantiated metanodes."}),"\n",(0,t.jsx)(r.h3,{id:"vrchangepropertyarraybool",children:"VRChangePropertyArrayBool"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-cpp",children:"int VRChangePropertyArrayBool(\r\n    HMeta metaNode,\r\n    const char * propName,\r\n    int numElements\r\n)\n"})}),"\n",(0,t.jsx)(r.p,{children:"Changes the specified property to a VR_BOOL array type."}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to change"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"propName"})," name of the property to change"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"numElements"})," number of elements in the new array property"]}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Return"}),": 0 on success"]}),"\n",(0,t.jsx)(r.h3,{id:"vrchangepropertyarraychar",children:"VRChangePropertyArrayChar"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-cpp",children:"int VRChangePropertyArrayChar(\r\n    HMeta metaNode,\r\n    const char * propName,\r\n    int numElements\r\n)\n"})}),"\n",(0,t.jsx)(r.p,{children:"Changes the specified property to a VR_CHAR array type."}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to change"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"propName"})," name of the property to change"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"numElements"})," number of elements in the new array property"]}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Return"}),": 0 on success"]}),"\n",(0,t.jsx)(r.h3,{id:"vrchangepropertyarraydouble",children:"VRChangePropertyArrayDouble"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-cpp",children:"int VRChangePropertyArrayDouble(\r\n    HMeta metaNode,\r\n    const char * propName,\r\n    int numElements\r\n)\n"})}),"\n",(0,t.jsx)(r.p,{children:"Changes the specified property to a VR_DOUBLE array type."}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to change"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"propName"})," name of the property to change"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"numElements"})," number of elements in the new array property"]}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Return"}),": 0 on success"]}),"\n",(0,t.jsx)(r.h3,{id:"vrchangepropertyarrayfloat",children:"VRChangePropertyArrayFloat"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-cpp",children:"int VRChangePropertyArrayFloat(\r\n    HMeta metaNode,\r\n    const char * propName,\r\n    int numElements\r\n)\n"})}),"\n",(0,t.jsx)(r.p,{children:"Changes the specified property to a VR_FLOAT array type."}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to change"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"propName"})," name of the property to change"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"numElements"})," number of elements in the new array property"]}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Return"}),": 0 on success"]}),"\n",(0,t.jsx)(r.h3,{id:"vrchangepropertyarrayint",children:"VRChangePropertyArrayInt"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-cpp",children:"int VRChangePropertyArrayInt(\r\n    HMeta metaNode,\r\n    const char * propName,\r\n    int numElements\r\n)\n"})}),"\n",(0,t.jsx)(r.p,{children:"Changes the specified property to a VR_INT array type."}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to change"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"propName"})," name of the property to change"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"numElements"})," number of elements in the new array property"]}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Return"}),": 0 on success"]}),"\n",(0,t.jsx)(r.h3,{id:"vrchangepropertyarrayworldfloat",children:"VRChangePropertyArrayWorldFloat"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-cpp",children:"int VRChangePropertyArrayWorldFloat(\r\n    HMeta metaNode,\r\n    const char * propName,\r\n    int numElements\r\n)\n"})}),"\n",(0,t.jsx)(r.p,{children:"Changes the specified property to a VR_WORLD_FLOAT array type."}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to change"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"propName"})," name of the property to change"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"numElements"})," number of elements in the new array property"]}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Return"}),": 0 on success"]}),"\n",(0,t.jsx)(r.h3,{id:"vrchangepropertybool",children:"VRChangePropertyBool"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-cpp",children:"int VRChangePropertyBool(\r\n    HMeta metaNode,\r\n    const char * propName\r\n)\n"})}),"\n",(0,t.jsx)(r.p,{children:"Changes the specified property to single element VR_BOOL type."}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to change"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"propName"})," name of the property to change"]}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Return"}),": 0 on success"]}),"\n",(0,t.jsx)(r.h3,{id:"vrchangepropertychar",children:"VRChangePropertyChar"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-cpp",children:"int VRChangePropertyChar(\r\n    HMeta metaNode,\r\n    const char * propName\r\n)\n"})}),"\n",(0,t.jsx)(r.p,{children:"Changes the specified property to single element VR_CHAR type."}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to change"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"propName"})," name of the property to change"]}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Return"}),": 0 on success"]}),"\n",(0,t.jsx)(r.h3,{id:"vrchangepropertydouble",children:"VRChangePropertyDouble"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-cpp",children:"int VRChangePropertyDouble(\r\n    HMeta metaNode,\r\n    const char * propName\r\n)\n"})}),"\n",(0,t.jsx)(r.p,{children:"Changes the specified property to single element VR_DOUBLE type."}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to change"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"propName"})," name of the property to change"]}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Return"}),": 0 on success"]}),"\n",(0,t.jsx)(r.h3,{id:"vrchangepropertyfloat",children:"VRChangePropertyFloat"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-cpp",children:"int VRChangePropertyFloat(\r\n    HMeta metaNode,\r\n    const char * propName\r\n)\n"})}),"\n",(0,t.jsx)(r.p,{children:"Changes the specified property to single element VR_FLOAT type."}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to change"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"propName"})," name of the property to change"]}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Return"}),": 0 on success"]}),"\n",(0,t.jsx)(r.h3,{id:"vrchangepropertyint",children:"VRChangePropertyInt"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-cpp",children:"int VRChangePropertyInt(\r\n    HMeta metaNode,\r\n    const char * propName\r\n)\n"})}),"\n",(0,t.jsx)(r.p,{children:"Changes the specified property to single element VR_INT type."}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to change"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"propName"})," name of the property to change"]}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Return"}),": 0 on success"]}),"\n",(0,t.jsx)(r.h3,{id:"vrchangepropertylink",children:"VRChangePropertyLink"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-cpp",children:"int VRChangePropertyLink(\r\n    HMeta metaNode,\r\n    const char * propName\r\n)\n"})}),"\n",(0,t.jsx)(r.p,{children:"Changes the specified property to single element VR_LINK type."}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to change"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"propName"})," name of the property to change"]}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Return"}),": 0 on success"]}),"\n",(0,t.jsx)(r.h3,{id:"vrchangepropertyname",children:"VRChangePropertyName"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-cpp",children:"int VRChangePropertyName(\r\n    HMeta metaNode,\r\n    const char * propName,\r\n    const char * newPropName\r\n)\n"})}),"\n",(0,t.jsx)(r.p,{children:"Renames a property."}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to change"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"propName"})," the name of the property to rename"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"newPropName"})," the new name of the property"]}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Return"}),": 0 on success"]}),"\n",(0,t.jsx)(r.h3,{id:"vrchangepropertystring",children:"VRChangePropertyString"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-cpp",children:"int VRChangePropertyString(\r\n    HMeta metaNode,\r\n    const char * propName\r\n)\n"})}),"\n",(0,t.jsx)(r.p,{children:"Changes the specified property to single element VR_STRING type."}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to change"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"propName"})," name of the property to change"]}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Return"}),": 0 on success"]}),"\n",(0,t.jsx)(r.h3,{id:"vrchangepropertyvectorchar",children:"VRChangePropertyVectorChar"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-cpp",children:"int VRChangePropertyVectorChar(\r\n    HMeta metaNode,\r\n    const char * propName\r\n)\n"})}),"\n",(0,t.jsx)(r.p,{children:"Changes the specified property to a VR_VEC_CHAR type."}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to change"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"propName"})," name of the property to change"]}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Return"}),": 0 on success"]}),"\n",(0,t.jsx)(r.h3,{id:"vrchangepropertyvectorfloat",children:"VRChangePropertyVectorFloat"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-cpp",children:"int VRChangePropertyVectorFloat(\r\n    HMeta metaNode,\r\n    const char * propName\r\n)\n"})}),"\n",(0,t.jsx)(r.p,{children:"Changes the specified property to a VR_VEC_FLOAT type."}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to change"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"propName"})," name of the property to change"]}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Return"}),": 0 on success"]}),"\n",(0,t.jsx)(r.h3,{id:"vrchangepropertyvectorint",children:"VRChangePropertyVectorInt"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-cpp",children:"int VRChangePropertyVectorInt(\r\n    HMeta metaNode,\r\n    const char * propName\r\n)\n"})}),"\n",(0,t.jsx)(r.p,{children:"Changes the specified property to a VR_VEC_INT type."}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to change"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"propName"})," name of the property to change"]}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Return"}),": 0 on success"]}),"\n",(0,t.jsx)(r.h3,{id:"vrchangepropertyvectorstring",children:"VRChangePropertyVectorString"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-cpp",children:"int VRChangePropertyVectorString(\r\n    HMeta metaNode,\r\n    const char * propName\r\n)\n"})}),"\n",(0,t.jsx)(r.p,{children:"Changes the specified property to a VR_VEC_STRING type."}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to change"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"propName"})," name of the property to change"]}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Return"}),": 0 on success"]}),"\n",(0,t.jsx)(r.h3,{id:"vrchangepropertyvectorworldfloat",children:"VRChangePropertyVectorWorldFloat"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-cpp",children:"int VRChangePropertyVectorWorldFloat(\r\n    HMeta metaNode,\r\n    const char * propName\r\n)\n"})}),"\n",(0,t.jsx)(r.p,{children:"Changes the specified property to a VR_VEC_WORLD_FLOAT type."}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to change"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"propName"})," name of the property to change"]}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Return"}),": 0 on success"]}),"\n",(0,t.jsx)(r.h3,{id:"vrchangepropertyworldfloat",children:"VRChangePropertyWorldFloat"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-cpp",children:"int VRChangePropertyWorldFloat(\r\n    HMeta metaNode,\r\n    const char * propName\r\n)\n"})}),"\n",(0,t.jsx)(r.p,{children:"Changes the specified property to single element VR_WORLD_FLOAT type."}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to change"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"propName"})," name of the property to change"]}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Return"}),": 0 on success"]}),"\n",(0,t.jsx)(r.h3,{id:"vrclosemigrationhandle",children:"VRCloseMigrationHandle"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-cpp",children:"void VRCloseMigrationHandle(\r\n    HMigration migration\r\n)\n"})}),"\n",(0,t.jsx)(r.p,{children:"Closes a migration handle."}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"migration"})," the handle to close"]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"vrmigrationcopyknownproperties",children:"VRMigrationCopyKnownProperties"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-cpp",children:"int VRMigrationCopyKnownProperties(\r\n    HMigration migration,\r\n    HNode old,\r\n    HNode newNode\r\n)\n"})}),"\n",(0,t.jsx)(r.p,{children:"Copies values of all properties that exist on both new and old node versions of the nodes. The nodes must be the same basic type, but may be different versions of that type. Properties that do not match in name or type between the versions are left for the migration implementation to handle."}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"migration"})," migration handle"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"old"})," the old version of the node (source)"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"newNode"})," the new node to copy into (dest)"]}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Return"}),": 0 on success"]}),"\n",(0,t.jsx)(r.h3,{id:"vrmigrationcreatecurrentnode",children:"VRMigrationCreateCurrentNode"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-cpp",children:"HNode VRMigrationCreateCurrentNode(\r\n    HMigration migration,\r\n    HNode node\r\n)\n"})}),"\n",(0,t.jsx)(r.p,{children:"Creates an instance of a node using the metanode version defined by this migration."}),"\n",(0,t.jsx)(r.h3,{id:"vrmigrationfinish",children:"VRMigrationFinish"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-cpp",children:"int VRMigrationFinish(\r\n    HMigration migration,\r\n    HNode old,\r\n    HNode newNode\r\n)\n"})}),"\n",(0,t.jsx)(r.p,{children:"Helper function for completing a migration step. This function moves all children of old to newNode, deletes old, and closes its handle."}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"migration"})," the migration being completed"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"old"})," the node to clear and delete"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"newNode"})," the new parent of the children being moved"]}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Return"}),": 0 on success"]}),"\n",(0,t.jsx)(r.h3,{id:"vrmigrationnext",children:"VRMigrationNext"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-cpp",children:"HMigration VRMigrationNext(\r\n    HMigration migration\r\n)\n"})}),"\n",(0,t.jsx)(r.p,{children:"Gets the next migration in the chain (the one for the version after this one)"}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"migration"})," handle to the migration"]}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Return"}),": the next migration or NULL if this is the newest one"]}),"\n",(0,t.jsx)(r.h3,{id:"vrmigrationpreparenode",children:"VRMigrationPrepareNode"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-cpp",children:"HNode VRMigrationPrepareNode(\r\n    HMigration migration,\r\n    HNode node\r\n)\n"})}),"\n",(0,t.jsx)(r.p,{children:"Calls the registered upgrade node function of the migration previous or next to this one (depending on whether node is older or newer than migration). This effectively brings node up to date, ready for this migration to perform its upgrade."}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"migration"})," handle to the migration"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"node"})," the node to transform to the version of this migration"]}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Return"}),": handle to the node at the requested version."]}),"\n",(0,t.jsx)(r.h3,{id:"vrmigrationprev",children:"VRMigrationPrev"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-cpp",children:"HMigration VRMigrationPrev(\r\n    HMigration migration\r\n)\n"})}),"\n",(0,t.jsx)(r.p,{children:"Gets the previous migration in the chain (the one for the version before this one)"}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"migration"})," handle to the migration"]}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Return"}),": the previous migration or NULL if this is the oldest one"]}),"\n",(0,t.jsx)(r.h3,{id:"vrremoveproperty",children:"VRRemoveProperty"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-cpp",children:"int VRRemoveProperty(\r\n    HMeta metaNode,\r\n    const char * propertyName\r\n)\n"})}),"\n",(0,t.jsx)(r.p,{children:"Removes a property from a metanode."}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"propertyName"})," name of the property to remove"]}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Return"}),": 0 if property is removed"]}),"\n",(0,t.jsx)(r.h3,{id:"vrsetmigrationdown",children:"VRSetMigrationDown"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-cpp",children:"int VRSetMigrationDown(\r\n    HMigration migration,\r\n    MigrationDownFunc func\r\n)\n"})}),"\n",(0,t.jsx)(r.p,{children:"Adds a downgrade function to a migration."}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"migration"})," handle to migration to modify"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"func"})," function implementing the downgrade. the implementation need not close the handle parameters."]}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Return"}),": 0 if the function is added successfully"]}),"\n",(0,t.jsx)(r.h3,{id:"vrsetmigrationdowngradenode",children:"VRSetMigrationDowngradeNode"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-cpp",children:"int VRSetMigrationDowngradeNode(\r\n    HMigration migration,\r\n    MigrationDowngradeFunc func\r\n)\n"})}),"\n",(0,t.jsx)(r.p,{children:"Adds a node downgrade function to a migration."}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"migration"})," handle to migration to modify"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"func"})," function implementing the downgrade. the implementation need not close the handle parameters."]}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Return"}),": 0 if the function is added successfully"]}),"\n",(0,t.jsx)(r.h3,{id:"vrsetmigrationup",children:"VRSetMigrationUp"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-cpp",children:"int VRSetMigrationUp(\r\n    HMigration migration,\r\n    MigrationUpFunc func\r\n)\n"})}),"\n",(0,t.jsx)(r.p,{children:"Adds an upgrade function to a migration."}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"migration"})," handle to migration to modify"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"func"})," function implementing the upgrade. the implementation need not close the handle parameters."]}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Return"}),": 0 if the function is added successfully"]}),"\n",(0,t.jsx)(r.h3,{id:"vrsetmigrationupgradenode",children:"VRSetMigrationUpgradeNode"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-cpp",children:"int VRSetMigrationUpgradeNode(\r\n    HMigration migration,\r\n    MigrationUpgradeFunc func\r\n)\n"})}),"\n",(0,t.jsx)(r.p,{children:"Adds a node upgrade function to a migration."}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"migration"})," handle to migration to modify"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"func"})," function implementing the upgrade. the implementation need not close the handle parameters."]}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Return"}),": 0 if the function is added successfully"]})]})}function l(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},28453:(e,r,n)=>{n.d(r,{R:()=>o,x:()=>a});var i=n(96540);const t={},s=i.createContext(t);function o(e){const r=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(s.Provider,{value:r},e.children)}}}]);
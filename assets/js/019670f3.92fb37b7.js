"use strict";(self.webpackChunkvirtalis_docs=self.webpackChunkvirtalis_docs||[]).push([[1343],{17868:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>i});const t=JSON.parse('{"id":"visionary-render-programming/reference/c-api/modules/metanodes/properties","title":"Properties","description":"Module: Metanodes","source":"@site/docs/visionary-render-programming/reference/c-api/modules/metanodes/properties.mdx","sourceDirName":"visionary-render-programming/reference/c-api/modules/metanodes","slug":"/visionary-render-programming/reference/c-api/modules/metanodes/properties","permalink":"/visionary-render-programming/reference/c-api/modules/metanodes/properties","draft":false,"unlisted":false,"editUrl":"https://github.com/virtalis/docs/tree/master/docs/visionary-render-programming/reference/c-api/modules/metanodes/properties.mdx","tags":[],"version":"current","frontMatter":{"title":"Properties","summary":"Functions for managing Properties on metanodes."},"sidebar":"visionaryRenderProgrammingSidebar","previous":{"title":"Migrations","permalink":"/visionary-render-programming/reference/c-api/modules/metanodes/migrations"},"next":{"title":"Semantics and Hints","permalink":"/visionary-render-programming/reference/c-api/modules/metanodes/semantics-and-hints"}}');var d=n(74848),s=n(28453);const a={title:"Properties",summary:"Functions for managing Properties on metanodes."},l="Properties",o={},i=[{value:"Functions",id:"functions",level:2},{value:"Functions Documentation",id:"functions-documentation",level:2},{value:"VRAddPropertyArrayBool",id:"vraddpropertyarraybool",level:3},{value:"VRAddPropertyArrayChar",id:"vraddpropertyarraychar",level:3},{value:"VRAddPropertyArrayDouble",id:"vraddpropertyarraydouble",level:3},{value:"VRAddPropertyArrayFloat",id:"vraddpropertyarrayfloat",level:3},{value:"VRAddPropertyArrayInt",id:"vraddpropertyarrayint",level:3},{value:"VRAddPropertyArrayWorldFloat",id:"vraddpropertyarrayworldfloat",level:3},{value:"VRAddPropertyBool",id:"vraddpropertybool",level:3},{value:"VRAddPropertyChar",id:"vraddpropertychar",level:3},{value:"VRAddPropertyCharRange",id:"vraddpropertycharrange",level:3},{value:"VRAddPropertyDouble",id:"vraddpropertydouble",level:3},{value:"VRAddPropertyDoubleRange",id:"vraddpropertydoublerange",level:3},{value:"VRAddPropertyFile",id:"vraddpropertyfile",level:3},{value:"VRAddPropertyFloat",id:"vraddpropertyfloat",level:3},{value:"VRAddPropertyFloatRange",id:"vraddpropertyfloatrange",level:3},{value:"VRAddPropertyInt",id:"vraddpropertyint",level:3},{value:"VRAddPropertyIntRange",id:"vraddpropertyintrange",level:3},{value:"VRAddPropertyIntType",id:"vraddpropertyinttype",level:3},{value:"VRAddPropertyLink",id:"vraddpropertylink",level:3},{value:"VRAddPropertyLinkFilter",id:"vraddpropertylinkfilter",level:3},{value:"VRAddPropertyMat3d",id:"vraddpropertymat3d",level:3},{value:"VRAddPropertyMat3f",id:"vraddpropertymat3f",level:3},{value:"VRAddPropertyMat3w",id:"vraddpropertymat3w",level:3},{value:"VRAddPropertyMat4d",id:"vraddpropertymat4d",level:3},{value:"VRAddPropertyMat4f",id:"vraddpropertymat4f",level:3},{value:"VRAddPropertyMat4w",id:"vraddpropertymat4w",level:3},{value:"VRAddPropertyMat4w2D",id:"vraddpropertymat4w2d",level:3},{value:"VRAddPropertyRGB",id:"vraddpropertyrgb",level:3},{value:"VRAddPropertyRGBA",id:"vraddpropertyrgba",level:3},{value:"VRAddPropertySphere",id:"vraddpropertysphere",level:3},{value:"VRAddPropertyStream",id:"vraddpropertystream",level:3},{value:"VRAddPropertyString",id:"vraddpropertystring",level:3},{value:"VRAddPropertyStringEx",id:"vraddpropertystringex",level:3},{value:"VRAddPropertyStringType",id:"vraddpropertystringtype",level:3},{value:"VRAddPropertyVec2d",id:"vraddpropertyvec2d",level:3},{value:"VRAddPropertyVec2dRange",id:"vraddpropertyvec2drange",level:3},{value:"VRAddPropertyVec2f",id:"vraddpropertyvec2f",level:3},{value:"VRAddPropertyVec2fRange",id:"vraddpropertyvec2frange",level:3},{value:"VRAddPropertyVec2i",id:"vraddpropertyvec2i",level:3},{value:"VRAddPropertyVec2iRange",id:"vraddpropertyvec2irange",level:3},{value:"VRAddPropertyVec2w",id:"vraddpropertyvec2w",level:3},{value:"VRAddPropertyVec2wRange",id:"vraddpropertyvec2wrange",level:3},{value:"VRAddPropertyVec3d",id:"vraddpropertyvec3d",level:3},{value:"VRAddPropertyVec3dRange",id:"vraddpropertyvec3drange",level:3},{value:"VRAddPropertyVec3f",id:"vraddpropertyvec3f",level:3},{value:"VRAddPropertyVec3fRange",id:"vraddpropertyvec3frange",level:3},{value:"VRAddPropertyVec3i",id:"vraddpropertyvec3i",level:3},{value:"VRAddPropertyVec3iRange",id:"vraddpropertyvec3irange",level:3},{value:"VRAddPropertyVec3w",id:"vraddpropertyvec3w",level:3},{value:"VRAddPropertyVec3wRange",id:"vraddpropertyvec3wrange",level:3},{value:"VRAddPropertyVec4d",id:"vraddpropertyvec4d",level:3},{value:"VRAddPropertyVec4dRange",id:"vraddpropertyvec4drange",level:3},{value:"VRAddPropertyVec4f",id:"vraddpropertyvec4f",level:3},{value:"VRAddPropertyVec4fRange",id:"vraddpropertyvec4frange",level:3},{value:"VRAddPropertyVec4i",id:"vraddpropertyvec4i",level:3},{value:"VRAddPropertyVec4iRange",id:"vraddpropertyvec4irange",level:3},{value:"VRAddPropertyVec4w",id:"vraddpropertyvec4w",level:3},{value:"VRAddPropertyVec4wRange",id:"vraddpropertyvec4wrange",level:3},{value:"VRAddPropertyVectorBool",id:"vraddpropertyvectorbool",level:3},{value:"VRAddPropertyVectorChar",id:"vraddpropertyvectorchar",level:3},{value:"VRAddPropertyVectorDouble",id:"vraddpropertyvectordouble",level:3},{value:"VRAddPropertyVectorFloat",id:"vraddpropertyvectorfloat",level:3},{value:"VRAddPropertyVectorInt",id:"vraddpropertyvectorint",level:3},{value:"VRAddPropertyVectorString",id:"vraddpropertyvectorstring",level:3},{value:"VRAddPropertyVectorWorldFloat",id:"vraddpropertyvectorworldfloat",level:3},{value:"VRAddPropertyWorldFloat",id:"vraddpropertyworldfloat",level:3},{value:"VRAddPropertyWorldFloatRange",id:"vraddpropertyworldfloatrange",level:3},{value:"VRGetPropertiesCount",id:"vrgetpropertiescount",level:3},{value:"VRSetPropertyCached",id:"vrsetpropertycached",level:3},{value:"VRSetPropertyCloned",id:"vrsetpropertycloned",level:3},{value:"VRSetPropertyInternal",id:"vrsetpropertyinternal",level:3},{value:"VRSetPropertyPurged",id:"vrsetpropertypurged",level:3},{value:"VRSetPropertyReadOnly",id:"vrsetpropertyreadonly",level:3},{value:"VRSetPropertySaved",id:"vrsetpropertysaved",level:3}];function c(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(r.header,{children:(0,d.jsx)(r.h1,{id:"properties",children:"Properties"})}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Module:"})," ",(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/",children:"Metanodes"})})]}),"\n",(0,d.jsx)(r.p,{children:"Functions for managing properties on metanodes."}),"\n",(0,d.jsx)(r.h2,{id:"functions",children:"Functions"}),"\n",(0,d.jsxs)(r.table,{children:[(0,d.jsx)(r.thead,{children:(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.th,{children:"Type"}),(0,d.jsx)(r.th,{children:"Name"})]})}),(0,d.jsxs)(r.tbody,{children:[(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"int"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyarraybool",children:"VRAddPropertyArrayBool"})}),"(",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName, int num, char defaultValue)",(0,d.jsx)("br",{}),"Adds an arbitrarily sized boolean array property to a metanode."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"int"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyarraychar",children:"VRAddPropertyArrayChar"})}),"(",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName, int num, char defaultValue)",(0,d.jsx)("br",{}),"Adds an arbitrarily sized character array property to a metanode."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"int"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyarraydouble",children:"VRAddPropertyArrayDouble"})}),"(",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName, int num, double defaultValue)",(0,d.jsx)("br",{}),"Adds an arbitrarily sized double array property to a metanode."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"int"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyarrayfloat",children:"VRAddPropertyArrayFloat"})}),"(",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName, int num, float defaultValue)",(0,d.jsx)("br",{}),"Adds an arbitrarily sized float array property to a metanode."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"int"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyarrayint",children:"VRAddPropertyArrayInt"})}),"(",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName, int num, int defaultValue)",(0,d.jsx)("br",{}),"Adds an arbitrarily sized integer array property to a metanode."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"int"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyarrayworldfloat",children:"VRAddPropertyArrayWorldFloat"})}),"(",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName, int num, double defaultValue)",(0,d.jsx)("br",{}),"Adds an arbitrarily sized world float array property to a metanode."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"int"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertybool",children:"VRAddPropertyBool"})}),"(",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName, char defaultValue)",(0,d.jsx)("br",{}),"Adds a boolean property to a metanode."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"int"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertychar",children:"VRAddPropertyChar"})}),"(",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName, char defaultValue)",(0,d.jsx)("br",{}),"Adds a char property to a metanode."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"int"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertycharrange",children:"VRAddPropertyCharRange"})}),"(",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName, char defaultValue, char minValue, char maxValue)",(0,d.jsx)("br",{}),"Adds a char property to a metanode with min/max range hints."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"int"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertydouble",children:"VRAddPropertyDouble"})}),"(",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName, double defaultValue)",(0,d.jsx)("br",{}),"Adds a double property to a metanode."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"int"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertydoublerange",children:"VRAddPropertyDoubleRange"})}),"(",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName, double defaultValue, double minValue, double maxValue)",(0,d.jsx)("br",{}),"Adds a double property to a metanode, with min/max range hints."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"int"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyfile",children:"VRAddPropertyFile"})}),"(",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName, const char * fileFilter)",(0,d.jsx)("br",{}),"Adds a file property to a metanode with a file filter of allowed types."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"int"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyfloat",children:"VRAddPropertyFloat"})}),"(",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName, float defaultValue)",(0,d.jsx)("br",{}),"Adds a float property to a metanode."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"int"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyfloatrange",children:"VRAddPropertyFloatRange"})}),"(",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName, float defaultValue, float minValue, float maxValue)",(0,d.jsx)("br",{}),"Adds a float property to a metanode, with min/max range hints."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"int"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyint",children:"VRAddPropertyInt"})}),"(",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName, int defaultValue)",(0,d.jsx)("br",{}),"Adds an integer property to a metanode."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"int"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyintrange",children:"VRAddPropertyIntRange"})}),"(",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName, int defaultValue, int minValue, int maxValue)",(0,d.jsx)("br",{}),"Adds an integer property to a metanode, with min/max range hints."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"int"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyinttype",children:"VRAddPropertyIntType"})}),"(",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName, int defaultValue, const char * type)",(0,d.jsx)("br",{}),"Adds an integer property to a metanode, with min/max range hints."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"int"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertylink",children:"VRAddPropertyLink"})}),"(",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName)",(0,d.jsx)("br",{}),"Adds a link property to a metanode."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"int"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertylinkfilter",children:"VRAddPropertyLinkFilter"})}),"(",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName, const char * linkFilter)",(0,d.jsx)("br",{}),"Adds a link property to a metanode with a filter on allowed types."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"int"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertymat3d",children:"VRAddPropertyMat3d"})}),"(",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName)",(0,d.jsx)("br",{}),"Adds a 3x3 double matrix property to a metanode. Default value is an identity matrix."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"int"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertymat3f",children:"VRAddPropertyMat3f"})}),"(",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName)",(0,d.jsx)("br",{}),"Adds a 3x3 float matrix property to a metanode. Default value is an identity matrix."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"int"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertymat3w",children:"VRAddPropertyMat3w"})}),"(",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName)",(0,d.jsx)("br",{}),"Adds a 3x3 world float matrix property to a metanode. Default value is an identity matrix."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"int"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertymat4d",children:"VRAddPropertyMat4d"})}),"(",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName)",(0,d.jsx)("br",{}),"Adds a 4x4 double matrix property to a metanode. Default value is an identity matrix."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"int"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertymat4f",children:"VRAddPropertyMat4f"})}),"(",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName)",(0,d.jsx)("br",{}),"Adds a 4x4 float matrix property to a metanode. Default value is an identity matrix."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"int"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertymat4w",children:"VRAddPropertyMat4w"})}),"(",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName)",(0,d.jsx)("br",{}),"Adds a 4x4 world float matrix property to a metanode. Default value is an identity matrix."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"int"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertymat4w2d",children:"VRAddPropertyMat4w2D"})}),"(",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName)",(0,d.jsx)("br",{}),"Adds a 4x4 world float matrix property to a metanode, with a prop semantic specifying that a 2D matrix editing control should be used for it (e.g. a texture map matrix). Default value is an identity matrix."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"int"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyrgb",children:"VRAddPropertyRGB"})}),"(",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName, float defaultR, float defaultG, float defaultB)",(0,d.jsx)("br",{}),"Adds an RGB colour property to a metanode."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"int"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyrgba",children:"VRAddPropertyRGBA"})}),"(",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName, float defaultR, float defaultG, float defaultB, float defaultA)",(0,d.jsx)("br",{}),"Adds an RGBA colour property to a metanode."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"int"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertysphere",children:"VRAddPropertySphere"})}),"(",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName, double defaultX, double defaultY, double defaultZ, double defaultR)",(0,d.jsx)("br",{}),"Adds a sphere property to a metanode. Defaults are specified as double and truncated to float if the world float type is single precision."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"int"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertystream",children:"VRAddPropertyStream"})}),"(",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName, const char * fileFilter)",(0,d.jsx)("br",{}),"Adds a stream property to a metanode with a file filter of allowed types."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"int"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertystring",children:"VRAddPropertyString"})}),"(",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName)",(0,d.jsx)("br",{}),"Adds a string property to a metanode."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"int"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertystringex",children:"VRAddPropertyStringEx"})}),"(",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName, const char * defaultValue)",(0,d.jsx)("br",{}),"Adds a string property to a metanode with a default string value."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"int"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertystringtype",children:"VRAddPropertyStringType"})}),"(",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName, const char * type)",(0,d.jsx)("br",{}),"Adds a string property to a metanode with a default string value."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"int"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyvec2d",children:"VRAddPropertyVec2d"})}),"(",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName, double defaultX, double defaultY)",(0,d.jsx)("br",{}),"Adds a double vec2 property to a metanode."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"int"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyvec2drange",children:"VRAddPropertyVec2dRange"})}),"(",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName, double defaultX, double defaultY, double minX, double minY, double maxX, double maxY)",(0,d.jsx)("br",{}),"Adds a double vec2 property to a metanode with range hints."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"int"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyvec2f",children:"VRAddPropertyVec2f"})}),"(",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName, float defaultX, float defaultY)",(0,d.jsx)("br",{}),"Adds a float vec2 property to a metanode."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"int"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyvec2frange",children:"VRAddPropertyVec2fRange"})}),"(",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName, float defaultX, float defaultY, float minX, float minY, float maxX, float maxY)",(0,d.jsx)("br",{}),"Adds a float vec2 property to a metanode with range hints."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"int"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyvec2i",children:"VRAddPropertyVec2i"})}),"(",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName, int defaultX, int defaultY)",(0,d.jsx)("br",{}),"Adds an integer vec2 property to a metanode."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"int"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyvec2irange",children:"VRAddPropertyVec2iRange"})}),"(",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName, int defaultX, int defaultY, int minX, int minY, int maxX, int maxY)",(0,d.jsx)("br",{}),"Adds an integer vec2 property to a metanode with range hints."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"int"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyvec2w",children:"VRAddPropertyVec2w"})}),"(",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName, double defaultX, double defaultY)",(0,d.jsx)("br",{}),"Adds a world float vec2 property to a metanode."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"int"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyvec2wrange",children:"VRAddPropertyVec2wRange"})}),"(",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName, double defaultX, double defaultY, double minX, double minY, double maxX, double maxY)",(0,d.jsx)("br",{}),"Adds a world float vec2 property to a metanode with range hints."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"int"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyvec3d",children:"VRAddPropertyVec3d"})}),"(",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName, double defaultX, double defaultY, double defaultZ)",(0,d.jsx)("br",{}),"Adds a double vec3 property to a metanode."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"int"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyvec3drange",children:"VRAddPropertyVec3dRange"})}),"(",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName, double defaultX, double defaultY, double defaultZ, double minX, double minY, double minZ, double maxX, double maxY, double maxZ)",(0,d.jsx)("br",{}),"Adds a double vec3 property to a metanode with range hints."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"int"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyvec3f",children:"VRAddPropertyVec3f"})}),"(",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName, float defaultX, float defaultY, float defaultZ)",(0,d.jsx)("br",{}),"Adds a float vec3 property to a metanode."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"int"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyvec3frange",children:"VRAddPropertyVec3fRange"})}),"(",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName, float defaultX, float defaultY, float defaultZ, float minX, float minY, float minZ, float maxX, float maxY, float maxZ)",(0,d.jsx)("br",{}),"Adds a float vec3 property to a metanode with range hints."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"int"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyvec3i",children:"VRAddPropertyVec3i"})}),"(",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName, int defaultX, int defaultY, int defaultZ)",(0,d.jsx)("br",{}),"Adds an integer vec3 property to a metanode."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"int"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyvec3irange",children:"VRAddPropertyVec3iRange"})}),"(",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName, int defaultX, int defaultY, int defaultZ, int minX, int minY, int minZ, int maxX, int maxY, int maxZ)",(0,d.jsx)("br",{}),"Adds an integer vec3 property to a metanode with range hints."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"int"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyvec3w",children:"VRAddPropertyVec3w"})}),"(",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName, double defaultX, double defaultY, double defaultZ)",(0,d.jsx)("br",{}),"Adds a world float vec3 property to a metanode. Defaults are specified as double and truncated to float if the world float type is single precision."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"int"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyvec3wrange",children:"VRAddPropertyVec3wRange"})}),"(",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName, double defaultX, double defaultY, double defaultZ, double minX, double minY, double minZ, double maxX, double maxY, double maxZ)",(0,d.jsx)("br",{}),"Adds a world float vec3 property to a metanode with range hints Defaults and range are specified as double and truncated to float if the world float type is single precision."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"int"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyvec4d",children:"VRAddPropertyVec4d"})}),"(",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName, double defaultX, double defaultY, double defaultZ, double defaultW)",(0,d.jsx)("br",{}),"Adds a double vec4 property to a metanode."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"int"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyvec4drange",children:"VRAddPropertyVec4dRange"})}),"(",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName, double defaultX, double defaultY, double defaultZ, double defaultW, double minX, double minY, double minZ, double minW, double maxX, double maxY, double maxZ, double maxW)",(0,d.jsx)("br",{}),"Adds a double vec4 property to a metanode with range hints."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"int"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyvec4f",children:"VRAddPropertyVec4f"})}),"(",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName, float defaultX, float defaultY, float defaultZ, float defaultW)",(0,d.jsx)("br",{}),"Adds a float vec4 property to a metanode."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"int"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyvec4frange",children:"VRAddPropertyVec4fRange"})}),"(",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName, float defaultX, float defaultY, float defaultZ, float defaultW, float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW)",(0,d.jsx)("br",{}),"Adds a float vec4 property to a metanode with range hints."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"int"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyvec4i",children:"VRAddPropertyVec4i"})}),"(",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName, int defaultX, int defaultY, int defaultZ, int defaultW)",(0,d.jsx)("br",{}),"Adds an integer vec4 property to a metanode."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"int"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyvec4irange",children:"VRAddPropertyVec4iRange"})}),"(",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName, int defaultX, int defaultY, int defaultZ, int defaultW, int minX, int minY, int minZ, int minW, int maxX, int maxY, int maxZ, int maxW)",(0,d.jsx)("br",{}),"Adds an integer vec4 property to a metanode with range hints."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"int"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyvec4w",children:"VRAddPropertyVec4w"})}),"(",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName, double defaultX, double defaultY, double defaultZ, double defaultW)",(0,d.jsx)("br",{}),"Adds a world float vec4 property to a metanode. Defaults are specified as double and truncated to float if the world float type is single precision."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"int"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyvec4wrange",children:"VRAddPropertyVec4wRange"})}),"(",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName, double defaultX, double defaultY, double defaultZ, double defaultW, double minX, double minY, double minZ, double minW, double maxX, double maxY, double maxZ, double maxW)",(0,d.jsx)("br",{}),"Adds a world float vec4 property to a metanode with range hints."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"int"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyvectorbool",children:"VRAddPropertyVectorBool"})}),"(",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName)",(0,d.jsx)("br",{}),"Adds a boolean vector property to a metanode (resizable container)"]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"int"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyvectorchar",children:"VRAddPropertyVectorChar"})}),"(",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName)",(0,d.jsx)("br",{}),"Adds a character vector property to a metanode (resizable container)"]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"int"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyvectordouble",children:"VRAddPropertyVectorDouble"})}),"(",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName)",(0,d.jsx)("br",{}),"Adds a double vector property to a metanode (resizable container)"]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"int"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyvectorfloat",children:"VRAddPropertyVectorFloat"})}),"(",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName)",(0,d.jsx)("br",{}),"Adds a float vector property to a metanode (resizable container)"]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"int"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyvectorint",children:"VRAddPropertyVectorInt"})}),"(",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName)",(0,d.jsx)("br",{}),"Adds an integer vector property to a metanode (resizable container)"]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"int"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyvectorstring",children:"VRAddPropertyVectorString"})}),"(",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName)",(0,d.jsx)("br",{}),"Adds a string vector property to a metanode (resizable container)"]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"int"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyvectorworldfloat",children:"VRAddPropertyVectorWorldFloat"})}),"(",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName)",(0,d.jsx)("br",{}),"Adds a world float vector property to a metanode (resizable container)"]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"int"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyworldfloat",children:"VRAddPropertyWorldFloat"})}),"(",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName, double defaultValue)",(0,d.jsx)("br",{}),"Adds a world float property to a metanode."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"int"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyworldfloatrange",children:"VRAddPropertyWorldFloatRange"})}),"(",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName, double defaultValue, double minValue, double maxValue)",(0,d.jsx)("br",{}),"Adds a world float property to a metanode, with min/max range hints."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"int"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vrgetpropertiescount",children:"VRGetPropertiesCount"})}),"(",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode)",(0,d.jsx)("br",{}),"Gets the number of properties on a metanode."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"int"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vrsetpropertycached",children:"VRSetPropertyCached"})}),"(",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName, char cached)",(0,d.jsx)("br",{}),"Sets a property as cached (contents are replicated in the disk cache)"]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"int"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vrsetpropertycloned",children:"VRSetPropertyCloned"})}),"(",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName, char saved)",(0,d.jsx)("br",{}),"Sets a property as cloned (whether the property value should be copied when cloning a node)"]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"int"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vrsetpropertyinternal",children:"VRSetPropertyInternal"})}),"(",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName, char internal)",(0,d.jsx)("br",{}),"Sets a property as internal (provides a hint to node property user interface to not display the property editor)"]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"int"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vrsetpropertypurged",children:"VRSetPropertyPurged"})}),"(",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName, char purged)",(0,d.jsx)("br",{}),"Sets a property as purged (contents are ejected from memory and cached to disk)"]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"int"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vrsetpropertyreadonly",children:"VRSetPropertyReadOnly"})}),"(",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName, char readOnly)",(0,d.jsx)("br",{}),"Sets a property as read-only (provides a hint to node property user interface to make the editor read only)"]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"int"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vrsetpropertysaved",children:"VRSetPropertySaved"})}),"(",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hmeta",children:"HMeta"})," metaNode, const char * propertyName, char saved)",(0,d.jsx)("br",{}),"Sets a property as saved (whether or not the value is saved to VRText/VRNative documents)"]})]})]})]}),"\n",(0,d.jsx)(r.h2,{id:"functions-documentation",children:"Functions Documentation"}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyarraybool",children:"VRAddPropertyArrayBool"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-cpp",children:"int VRAddPropertyArrayBool(\r\n    HMeta metaNode,\r\n    const char * propertyName,\r\n    int num,\r\n    char defaultValue\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds an arbitrarily sized boolean array property to a metanode."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propertyName"})," name of the property to add"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"num"})," number of elements in the array"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultValue"})," default value to use in each element on new nodes"]}),"\n"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyarraychar",children:"VRAddPropertyArrayChar"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-cpp",children:"int VRAddPropertyArrayChar(\r\n    HMeta metaNode,\r\n    const char * propertyName,\r\n    int num,\r\n    char defaultValue\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds an arbitrarily sized character array property to a metanode."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propertyName"})," name of the property to add"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"num"})," number of elements in the array"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultValue"})," default value to use in each element on new nodes"]}),"\n"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyarraydouble",children:"VRAddPropertyArrayDouble"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-cpp",children:"int VRAddPropertyArrayDouble(\r\n    HMeta metaNode,\r\n    const char * propertyName,\r\n    int num,\r\n    double defaultValue\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds an arbitrarily sized double array property to a metanode."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propertyName"})," name of the property to add"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"num"})," number of elements in the array"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultValue"})," default value to use in each element on new nodes"]}),"\n"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyarrayfloat",children:"VRAddPropertyArrayFloat"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-cpp",children:"int VRAddPropertyArrayFloat(\r\n    HMeta metaNode,\r\n    const char * propertyName,\r\n    int num,\r\n    float defaultValue\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds an arbitrarily sized float array property to a metanode."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propertyName"})," name of the property to add"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"num"})," number of elements in the array"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultValue"})," default value to use in each element on new nodes"]}),"\n"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyarrayint",children:"VRAddPropertyArrayInt"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-cpp",children:"int VRAddPropertyArrayInt(\r\n    HMeta metaNode,\r\n    const char * propertyName,\r\n    int num,\r\n    int defaultValue\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds an arbitrarily sized integer array property to a metanode."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propertyName"})," name of the property to add"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"num"})," number of elements in the array"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultValue"})," default value to use in each element on new nodes"]}),"\n"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyarrayworldfloat",children:"VRAddPropertyArrayWorldFloat"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-cpp",children:"int VRAddPropertyArrayWorldFloat(\r\n    HMeta metaNode,\r\n    const char * propertyName,\r\n    int num,\r\n    double defaultValue\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds an arbitrarily sized world float array property to a metanode."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propertyName"})," name of the property to add"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"num"})," number of elements in the array"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultValue"})," default value to use in each element on new nodes"]}),"\n"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertybool",children:"VRAddPropertyBool"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-cpp",children:"int VRAddPropertyBool(\r\n    HMeta metaNode,\r\n    const char * propertyName,\r\n    char defaultValue\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a boolean property to a metanode."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propertyName"})," name of the property to add"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultValue"})," the default value on new nodes (truncated to 0 or 1)"]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Return"}),": 0 if the property is added successfully"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertychar",children:"VRAddPropertyChar"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-cpp",children:"int VRAddPropertyChar(\r\n    HMeta metaNode,\r\n    const char * propertyName,\r\n    char defaultValue\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a char property to a metanode."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propertyName"})," name of the property to add"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultValue"})," the default value on new nodes"]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Return"}),": 0 if the property is added successfully"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertycharrange",children:"VRAddPropertyCharRange"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-cpp",children:"int VRAddPropertyCharRange(\r\n    HMeta metaNode,\r\n    const char * propertyName,\r\n    char defaultValue,\r\n    char minValue,\r\n    char maxValue\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a char property to a metanode with min/max range hints."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propertyName"})," name of the property to add"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultValue"})," the default value on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minValue"})," the minimum value hint"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxValue"})," the maximum value hint"]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Return"}),": 0 if the property is added successfully"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertydouble",children:"VRAddPropertyDouble"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-cpp",children:"int VRAddPropertyDouble(\r\n    HMeta metaNode,\r\n    const char * propertyName,\r\n    double defaultValue\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a double property to a metanode."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propertyName"})," name of the property to add"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultValue"})," the default value on new nodes"]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Return"}),": 0 if the property is added successfully"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertydoublerange",children:"VRAddPropertyDoubleRange"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-cpp",children:"int VRAddPropertyDoubleRange(\r\n    HMeta metaNode,\r\n    const char * propertyName,\r\n    double defaultValue,\r\n    double minValue,\r\n    double maxValue\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a double property to a metanode, with min/max range hints."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propertyName"})," name of the property to add"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultValue"})," the default value on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minValue"})," the minimum value hint"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxValue"})," the maximum value hint"]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Return"}),": 0 if the property is added successfully"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyfile",children:"VRAddPropertyFile"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-cpp",children:"int VRAddPropertyFile(\r\n    HMeta metaNode,\r\n    const char * propertyName,\r\n    const char * fileFilter\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a file property to a metanode with a file filter of allowed types."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propertyName"})," name of the property to add"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"fileFilter"})," adds a filter semantic to the property allowing file dialogs to filter files"]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Return"}),": 0 if the property is added successfully"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyfloat",children:"VRAddPropertyFloat"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-cpp",children:"int VRAddPropertyFloat(\r\n    HMeta metaNode,\r\n    const char * propertyName,\r\n    float defaultValue\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a float property to a metanode."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propertyName"})," name of the property to add"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultValue"})," the default value on new nodes"]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Return"}),": 0 if the property is added successfully"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyfloatrange",children:"VRAddPropertyFloatRange"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-cpp",children:"int VRAddPropertyFloatRange(\r\n    HMeta metaNode,\r\n    const char * propertyName,\r\n    float defaultValue,\r\n    float minValue,\r\n    float maxValue\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a float property to a metanode, with min/max range hints."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propertyName"})," name of the property to add"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultValue"})," the default value on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minValue"})," the minimum value hint"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxValue"})," the maximum value hint"]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Return"}),": 0 if the property is added successfully"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyint",children:"VRAddPropertyInt"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-cpp",children:"int VRAddPropertyInt(\r\n    HMeta metaNode,\r\n    const char * propertyName,\r\n    int defaultValue\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds an integer property to a metanode."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propertyName"})," name of the property to add"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultValue"})," the default value on new nodes"]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Return"}),": 0 if the property is added successfully"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyintrange",children:"VRAddPropertyIntRange"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-cpp",children:"int VRAddPropertyIntRange(\r\n    HMeta metaNode,\r\n    const char * propertyName,\r\n    int defaultValue,\r\n    int minValue,\r\n    int maxValue\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds an integer property to a metanode, with min/max range hints."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propertyName"})," name of the property to add"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultValue"})," the default value on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minValue"})," the minimum value hint"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxValue"})," the maximum value hint"]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Return"}),": 0 if the property is added successfully"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyinttype",children:"VRAddPropertyIntType"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-cpp",children:"int VRAddPropertyIntType(\r\n    HMeta metaNode,\r\n    const char * propertyName,\r\n    int defaultValue,\r\n    const char * type\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds an integer property to a metanode, with min/max range hints."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propertyName"})," name of the property to add"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultValue"})," the default value on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"type"})," the Meta_PropSemantics::PropType to set"]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Return"}),": 0 if the property is added successfully"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertylink",children:"VRAddPropertyLink"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-cpp",children:"int VRAddPropertyLink(\r\n    HMeta metaNode,\r\n    const char * propertyName\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a link property to a metanode."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propertyName"})," name of the property to add"]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Return"}),": 0 if the property is added successfully"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertylinkfilter",children:"VRAddPropertyLinkFilter"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-cpp",children:"int VRAddPropertyLinkFilter(\r\n    HMeta metaNode,\r\n    const char * propertyName,\r\n    const char * linkFilter\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a link property to a metanode with a filter on allowed types."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propertyName"})," name of the property to add"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"linkFilter"})," comma separated list of metanodes or traits that are allowed to be linked to"]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Return"}),": 0 if the property is added successfully"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertymat3d",children:"VRAddPropertyMat3d"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-cpp",children:"int VRAddPropertyMat3d(\r\n    HMeta metaNode,\r\n    const char * propertyName\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a 3x3 double matrix property to a metanode. Default value is an identity matrix."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propertyName"})," name of the property to add"]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Return"}),": 0 if the property is added successfully"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertymat3f",children:"VRAddPropertyMat3f"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-cpp",children:"int VRAddPropertyMat3f(\r\n    HMeta metaNode,\r\n    const char * propertyName\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a 3x3 float matrix property to a metanode. Default value is an identity matrix."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propertyName"})," name of the property to add"]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Return"}),": 0 if the property is added successfully"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertymat3w",children:"VRAddPropertyMat3w"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-cpp",children:"int VRAddPropertyMat3w(\r\n    HMeta metaNode,\r\n    const char * propertyName\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a 3x3 world float matrix property to a metanode. Default value is an identity matrix."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propertyName"})," name of the property to add"]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Return"}),": 0 if the property is added successfully"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertymat4d",children:"VRAddPropertyMat4d"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-cpp",children:"int VRAddPropertyMat4d(\r\n    HMeta metaNode,\r\n    const char * propertyName\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a 4x4 double matrix property to a metanode. Default value is an identity matrix."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propertyName"})," name of the property to add"]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Return"}),": 0 if the property is added successfully"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertymat4f",children:"VRAddPropertyMat4f"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-cpp",children:"int VRAddPropertyMat4f(\r\n    HMeta metaNode,\r\n    const char * propertyName\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a 4x4 float matrix property to a metanode. Default value is an identity matrix."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propertyName"})," name of the property to add"]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Return"}),": 0 if the property is added successfully"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertymat4w",children:"VRAddPropertyMat4w"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-cpp",children:"int VRAddPropertyMat4w(\r\n    HMeta metaNode,\r\n    const char * propertyName\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a 4x4 world float matrix property to a metanode. Default value is an identity matrix."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propertyName"})," name of the property to add"]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Return"}),": 0 if the property is added successfully"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertymat4w2d",children:"VRAddPropertyMat4w2D"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-cpp",children:"int VRAddPropertyMat4w2D(\r\n    HMeta metaNode,\r\n    const char * propertyName\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a 4x4 world float matrix property to a metanode, with a prop semantic specifying that a 2D matrix editing control should be used for it (e.g. a texture map matrix). Default value is an identity matrix."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propertyName"})," name of the property to add"]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Return"}),": 0 if the property is added successfully"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyrgb",children:"VRAddPropertyRGB"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-cpp",children:"int VRAddPropertyRGB(\r\n    HMeta metaNode,\r\n    const char * propertyName,\r\n    float defaultR,\r\n    float defaultG,\r\n    float defaultB\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds an RGB colour property to a metanode."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propertyName"})," name of the property to add"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultR"})," the default value of the red element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultG"})," the default value of the green element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultB"})," the default value of the blue element on new nodes"]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Return"}),": 0 if the property is added successfully"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyrgba",children:"VRAddPropertyRGBA"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-cpp",children:"int VRAddPropertyRGBA(\r\n    HMeta metaNode,\r\n    const char * propertyName,\r\n    float defaultR,\r\n    float defaultG,\r\n    float defaultB,\r\n    float defaultA\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds an RGBA colour property to a metanode."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propertyName"})," name of the property to add"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultR"})," the default value of the red element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultG"})," the default value of the green element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultB"})," the default value of the blue element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultA"})," the default value of the alpha element on new nodes"]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Return"}),": 0 if the property is added successfully"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertysphere",children:"VRAddPropertySphere"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-cpp",children:"int VRAddPropertySphere(\r\n    HMeta metaNode,\r\n    const char * propertyName,\r\n    double defaultX,\r\n    double defaultY,\r\n    double defaultZ,\r\n    double defaultR\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a sphere property to a metanode. Defaults are specified as double and truncated to float if the world float type is single precision."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propertyName"})," name of the property to add"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultX"})," the default value of the position element's x value on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultY"})," the default value of the position element's y value on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultZ"})," the default value of the position element's z value on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultR"})," the default value of the radius element on new nodes"]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Return"}),": 0 if the property is added successfully"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertystream",children:"VRAddPropertyStream"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-cpp",children:"int VRAddPropertyStream(\r\n    HMeta metaNode,\r\n    const char * propertyName,\r\n    const char * fileFilter\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a stream property to a metanode with a file filter of allowed types."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propertyName"})," name of the property to add"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"fileFilter"})," adds a filter semantic to the property allowing file dialogs to filter files"]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Return"}),": 0 if the property is added successfully"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertystring",children:"VRAddPropertyString"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-cpp",children:"int VRAddPropertyString(\r\n    HMeta metaNode,\r\n    const char * propertyName\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a string property to a metanode."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propertyName"})," name of the property to add"]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Return"}),": 0 if the property is added successfully"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertystringex",children:"VRAddPropertyStringEx"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-cpp",children:"int VRAddPropertyStringEx(\r\n    HMeta metaNode,\r\n    const char * propertyName,\r\n    const char * defaultValue\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a string property to a metanode with a default string value."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propertyName"})," name of the property to add"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultValue"})," the string to use as the default on new nodes"]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Return"}),": 0 if the property is added successfully"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertystringtype",children:"VRAddPropertyStringType"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-cpp",children:"int VRAddPropertyStringType(\r\n    HMeta metaNode,\r\n    const char * propertyName,\r\n    const char * type\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a string property to a metanode with a default string value."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propertyName"})," name of the property to add"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"type"})," the Meta_PropSemantics::PropType to set"]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Return"}),": 0 if the property is added successfully"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyvec2d",children:"VRAddPropertyVec2d"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-cpp",children:"int VRAddPropertyVec2d(\r\n    HMeta metaNode,\r\n    const char * propertyName,\r\n    double defaultX,\r\n    double defaultY\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a double vec2 property to a metanode."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propertyName"})," name of the property to add"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultX"})," the default value of the x element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultY"})," the default value of the y element on new nodes"]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Return"}),": 0 if the property is added successfully"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyvec2drange",children:"VRAddPropertyVec2dRange"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-cpp",children:"int VRAddPropertyVec2dRange(\r\n    HMeta metaNode,\r\n    const char * propertyName,\r\n    double defaultX,\r\n    double defaultY,\r\n    double minX,\r\n    double minY,\r\n    double maxX,\r\n    double maxY\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a double vec2 property to a metanode with range hints."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propertyName"})," name of the property to add"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultX"})," the default value of the x element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultY"})," the default value of the y element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minX"})," the min value of the x element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minY"})," the min value of the y element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxX"})," the max value of the x element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxY"})," the max value of the y element on new nodes"]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Return"}),": 0 if the property is added successfully"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyvec2f",children:"VRAddPropertyVec2f"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-cpp",children:"int VRAddPropertyVec2f(\r\n    HMeta metaNode,\r\n    const char * propertyName,\r\n    float defaultX,\r\n    float defaultY\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a float vec2 property to a metanode."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propertyName"})," name of the property to add"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultX"})," the default value of the x element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultY"})," the default value of the y element on new nodes"]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Return"}),": 0 if the property is added successfully"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyvec2frange",children:"VRAddPropertyVec2fRange"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-cpp",children:"int VRAddPropertyVec2fRange(\r\n    HMeta metaNode,\r\n    const char * propertyName,\r\n    float defaultX,\r\n    float defaultY,\r\n    float minX,\r\n    float minY,\r\n    float maxX,\r\n    float maxY\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a float vec2 property to a metanode with range hints."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propertyName"})," name of the property to add"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultX"})," the default value of the x element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultY"})," the default value of the y element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minX"})," the min value of the x element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minY"})," the min value of the y element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxX"})," the max value of the x element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxY"})," the max value of the y element on new nodes"]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Return"}),": 0 if the property is added successfully"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyvec2i",children:"VRAddPropertyVec2i"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-cpp",children:"int VRAddPropertyVec2i(\r\n    HMeta metaNode,\r\n    const char * propertyName,\r\n    int defaultX,\r\n    int defaultY\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds an integer vec2 property to a metanode."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propertyName"})," name of the property to add"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultX"})," the default value of the x element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultY"})," the default value of the y element on new nodes"]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Return"}),": 0 if the property is added successfully"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyvec2irange",children:"VRAddPropertyVec2iRange"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-cpp",children:"int VRAddPropertyVec2iRange(\r\n    HMeta metaNode,\r\n    const char * propertyName,\r\n    int defaultX,\r\n    int defaultY,\r\n    int minX,\r\n    int minY,\r\n    int maxX,\r\n    int maxY\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds an integer vec2 property to a metanode with range hints."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propertyName"})," name of the property to add"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultX"})," the default value of the x element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultY"})," the default value of the y element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minX"})," the min value of the x element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minY"})," the min value of the y element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxX"})," the max value of the x element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxY"})," the max value of the y element on new nodes"]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Return"}),": 0 if the property is added successfully"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyvec2w",children:"VRAddPropertyVec2w"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-cpp",children:"int VRAddPropertyVec2w(\r\n    HMeta metaNode,\r\n    const char * propertyName,\r\n    double defaultX,\r\n    double defaultY\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a world float vec2 property to a metanode."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propertyName"})," name of the property to add"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultX"})," the default value of the x element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultY"})," the default value of the y element on new nodes"]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Return"}),": 0 if the property is added successfully"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyvec2wrange",children:"VRAddPropertyVec2wRange"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-cpp",children:"int VRAddPropertyVec2wRange(\r\n    HMeta metaNode,\r\n    const char * propertyName,\r\n    double defaultX,\r\n    double defaultY,\r\n    double minX,\r\n    double minY,\r\n    double maxX,\r\n    double maxY\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a world float vec2 property to a metanode with range hints."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propertyName"})," name of the property to add"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultX"})," the default value of the x element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultY"})," the default value of the y element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minX"})," the min value of the x element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minY"})," the min value of the y element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxX"})," the max value of the x element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxY"})," the max value of the y element on new nodes"]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Return"}),": 0 if the property is added successfully"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyvec3d",children:"VRAddPropertyVec3d"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-cpp",children:"int VRAddPropertyVec3d(\r\n    HMeta metaNode,\r\n    const char * propertyName,\r\n    double defaultX,\r\n    double defaultY,\r\n    double defaultZ\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a double vec3 property to a metanode."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propertyName"})," name of the property to add"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultX"})," the default value of the x element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultY"})," the default value of the y element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultZ"})," the default value of the z element on new nodes"]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Return"}),": 0 if the property is added successfully"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyvec3drange",children:"VRAddPropertyVec3dRange"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-cpp",children:"int VRAddPropertyVec3dRange(\r\n    HMeta metaNode,\r\n    const char * propertyName,\r\n    double defaultX,\r\n    double defaultY,\r\n    double defaultZ,\r\n    double minX,\r\n    double minY,\r\n    double minZ,\r\n    double maxX,\r\n    double maxY,\r\n    double maxZ\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a double vec3 property to a metanode with range hints."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propertyName"})," name of the property to add"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultX"})," the default value of the x element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultY"})," the default value of the y element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultZ"})," the default value of the z element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minX"})," the min value of the x element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minY"})," the min value of the y element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minZ"})," the min value of the z element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxX"})," the max value of the x element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxY"})," the max value of the y element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxZ"})," the max value of the z element on new nodes"]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Return"}),": 0 if the property is added successfully"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyvec3f",children:"VRAddPropertyVec3f"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-cpp",children:"int VRAddPropertyVec3f(\r\n    HMeta metaNode,\r\n    const char * propertyName,\r\n    float defaultX,\r\n    float defaultY,\r\n    float defaultZ\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a float vec3 property to a metanode."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propertyName"})," name of the property to add"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultX"})," the default value of the x element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultY"})," the default value of the y element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultZ"})," the default value of the z element on new nodes"]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Return"}),": 0 if the property is added successfully"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyvec3frange",children:"VRAddPropertyVec3fRange"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-cpp",children:"int VRAddPropertyVec3fRange(\r\n    HMeta metaNode,\r\n    const char * propertyName,\r\n    float defaultX,\r\n    float defaultY,\r\n    float defaultZ,\r\n    float minX,\r\n    float minY,\r\n    float minZ,\r\n    float maxX,\r\n    float maxY,\r\n    float maxZ\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a float vec3 property to a metanode with range hints."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propertyName"})," name of the property to add"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultX"})," the default value of the x element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultY"})," the default value of the y element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultZ"})," the default value of the z element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minX"})," the min value of the x element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minY"})," the min value of the y element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minZ"})," the min value of the z element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxX"})," the max value of the x element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxY"})," the max value of the y element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxZ"})," the max value of the z element on new nodes"]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Return"}),": 0 if the property is added successfully"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyvec3i",children:"VRAddPropertyVec3i"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-cpp",children:"int VRAddPropertyVec3i(\r\n    HMeta metaNode,\r\n    const char * propertyName,\r\n    int defaultX,\r\n    int defaultY,\r\n    int defaultZ\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds an integer vec3 property to a metanode."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propertyName"})," name of the property to add"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultX"})," the default value of the x element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultY"})," the default value of the y element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultZ"})," the default value of the z element on new nodes"]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Return"}),": 0 if the property is added successfully"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyvec3irange",children:"VRAddPropertyVec3iRange"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-cpp",children:"int VRAddPropertyVec3iRange(\r\n    HMeta metaNode,\r\n    const char * propertyName,\r\n    int defaultX,\r\n    int defaultY,\r\n    int defaultZ,\r\n    int minX,\r\n    int minY,\r\n    int minZ,\r\n    int maxX,\r\n    int maxY,\r\n    int maxZ\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds an integer vec3 property to a metanode with range hints."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propertyName"})," name of the property to add"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultX"})," the default value of the x element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultY"})," the default value of the y element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultZ"})," the default value of the z element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minX"})," the min value of the x element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minY"})," the min value of the y element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minZ"})," the min value of the z element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxX"})," the max value of the x element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxY"})," the max value of the y element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxZ"})," the max value of the z element on new nodes"]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Return"}),": 0 if the property is added successfully"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyvec3w",children:"VRAddPropertyVec3w"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-cpp",children:"int VRAddPropertyVec3w(\r\n    HMeta metaNode,\r\n    const char * propertyName,\r\n    double defaultX,\r\n    double defaultY,\r\n    double defaultZ\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a world float vec3 property to a metanode. Defaults are specified as double and truncated to float if the world float type is single precision."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propertyName"})," name of the property to add"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultX"})," the default value of the x element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultY"})," the default value of the y element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultZ"})," the default value of the z element on new nodes"]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Return"}),": 0 if the property is added successfully"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyvec3wrange",children:"VRAddPropertyVec3wRange"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-cpp",children:"int VRAddPropertyVec3wRange(\r\n    HMeta metaNode,\r\n    const char * propertyName,\r\n    double defaultX,\r\n    double defaultY,\r\n    double defaultZ,\r\n    double minX,\r\n    double minY,\r\n    double minZ,\r\n    double maxX,\r\n    double maxY,\r\n    double maxZ\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a world float vec3 property to a metanode with range hints Defaults and range are specified as double and truncated to float if the world float type is single precision."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propertyName"})," name of the property to add"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultX"})," the default value of the x element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultY"})," the default value of the y element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultZ"})," the default value of the z element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minX"})," the min value of the x element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minY"})," the min value of the y element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minZ"})," the min value of the z element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxX"})," the max value of the x element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxY"})," the max value of the y element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxZ"})," the max value of the z element on new nodes"]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Return"}),": 0 if the property is added successfully"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyvec4d",children:"VRAddPropertyVec4d"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-cpp",children:"int VRAddPropertyVec4d(\r\n    HMeta metaNode,\r\n    const char * propertyName,\r\n    double defaultX,\r\n    double defaultY,\r\n    double defaultZ,\r\n    double defaultW\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a double vec4 property to a metanode."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propertyName"})," name of the property to add"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultX"})," the default value of the x element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultY"})," the default value of the y element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultZ"})," the default value of the z element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultW"})," the default value of the w element on new nodes"]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Return"}),": 0 if the property is added successfully"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyvec4drange",children:"VRAddPropertyVec4dRange"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-cpp",children:"int VRAddPropertyVec4dRange(\r\n    HMeta metaNode,\r\n    const char * propertyName,\r\n    double defaultX,\r\n    double defaultY,\r\n    double defaultZ,\r\n    double defaultW,\r\n    double minX,\r\n    double minY,\r\n    double minZ,\r\n    double minW,\r\n    double maxX,\r\n    double maxY,\r\n    double maxZ,\r\n    double maxW\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a double vec4 property to a metanode with range hints."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propertyName"})," name of the property to add"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultX"})," the default value of the x element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultY"})," the default value of the y element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultZ"})," the default value of the z element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultW"})," the default value of the w element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minX"})," the min value of the x element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minY"})," the min value of the y element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minZ"})," the min value of the z element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minW"})," the min value of the w element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxX"})," the max value of the x element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxY"})," the max value of the y element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxZ"})," the max value of the z element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxW"})," the max value of the w element on new nodes"]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Return"}),": 0 if the property is added successfully"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyvec4f",children:"VRAddPropertyVec4f"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-cpp",children:"int VRAddPropertyVec4f(\r\n    HMeta metaNode,\r\n    const char * propertyName,\r\n    float defaultX,\r\n    float defaultY,\r\n    float defaultZ,\r\n    float defaultW\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a float vec4 property to a metanode."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propertyName"})," name of the property to add"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultX"})," the default value of the x element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultY"})," the default value of the y element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultZ"})," the default value of the z element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultW"})," the default value of the w element on new nodes"]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Return"}),": 0 if the property is added successfully"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyvec4frange",children:"VRAddPropertyVec4fRange"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-cpp",children:"int VRAddPropertyVec4fRange(\r\n    HMeta metaNode,\r\n    const char * propertyName,\r\n    float defaultX,\r\n    float defaultY,\r\n    float defaultZ,\r\n    float defaultW,\r\n    float minX,\r\n    float minY,\r\n    float minZ,\r\n    float minW,\r\n    float maxX,\r\n    float maxY,\r\n    float maxZ,\r\n    float maxW\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a float vec4 property to a metanode with range hints."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propertyName"})," name of the property to add"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultX"})," the default value of the x element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultY"})," the default value of the y element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultZ"})," the default value of the z element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultW"})," the default value of the w element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minX"})," the min value of the x element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minY"})," the min value of the y element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minZ"})," the min value of the z element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minW"})," the min value of the w element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxX"})," the max value of the x element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxY"})," the max value of the y element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxZ"})," the max value of the z element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxW"})," the max value of the w element on new nodes"]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Return"}),": 0 if the property is added successfully"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyvec4i",children:"VRAddPropertyVec4i"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-cpp",children:"int VRAddPropertyVec4i(\r\n    HMeta metaNode,\r\n    const char * propertyName,\r\n    int defaultX,\r\n    int defaultY,\r\n    int defaultZ,\r\n    int defaultW\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds an integer vec4 property to a metanode."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propertyName"})," name of the property to add"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultX"})," the default value of the x element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultY"})," the default value of the y element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultZ"})," the default value of the z element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultW"})," the default value of the w element on new nodes"]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Return"}),": 0 if the property is added successfully"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyvec4irange",children:"VRAddPropertyVec4iRange"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-cpp",children:"int VRAddPropertyVec4iRange(\r\n    HMeta metaNode,\r\n    const char * propertyName,\r\n    int defaultX,\r\n    int defaultY,\r\n    int defaultZ,\r\n    int defaultW,\r\n    int minX,\r\n    int minY,\r\n    int minZ,\r\n    int minW,\r\n    int maxX,\r\n    int maxY,\r\n    int maxZ,\r\n    int maxW\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds an integer vec4 property to a metanode with range hints."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propertyName"})," name of the property to add"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultX"})," the default value of the x element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultY"})," the default value of the y element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultZ"})," the default value of the z element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultW"})," the default value of the w element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minX"})," the min value of the x element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minY"})," the min value of the y element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minZ"})," the min value of the z element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minW"})," the min value of the w element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxX"})," the max value of the x element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxY"})," the max value of the y element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxZ"})," the max value of the z element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxW"})," the max value of the w element on new nodes"]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Return"}),": 0 if the property is added successfully"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyvec4w",children:"VRAddPropertyVec4w"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-cpp",children:"int VRAddPropertyVec4w(\r\n    HMeta metaNode,\r\n    const char * propertyName,\r\n    double defaultX,\r\n    double defaultY,\r\n    double defaultZ,\r\n    double defaultW\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a world float vec4 property to a metanode. Defaults are specified as double and truncated to float if the world float type is single precision."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propertyName"})," name of the property to add"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultX"})," the default value of the x element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultY"})," the default value of the y element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultZ"})," the default value of the z element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultW"})," the default value of the w element on new nodes"]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Return"}),": 0 if the property is added successfully"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyvec4wrange",children:"VRAddPropertyVec4wRange"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-cpp",children:"int VRAddPropertyVec4wRange(\r\n    HMeta metaNode,\r\n    const char * propertyName,\r\n    double defaultX,\r\n    double defaultY,\r\n    double defaultZ,\r\n    double defaultW,\r\n    double minX,\r\n    double minY,\r\n    double minZ,\r\n    double minW,\r\n    double maxX,\r\n    double maxY,\r\n    double maxZ,\r\n    double maxW\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a world float vec4 property to a metanode with range hints."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propertyName"})," name of the property to add"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultX"})," the default value of the x element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultY"})," the default value of the y element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultZ"})," the default value of the z element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultW"})," the default value of the w element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minX"})," the min value of the x element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minY"})," the min value of the y element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minZ"})," the min value of the z element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minW"})," the min value of the w element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxX"})," the max value of the x element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxY"})," the max value of the y element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxZ"})," the max value of the z element on new nodes"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxW"})," the max value of the w element on new nodes"]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Return"}),": 0 if the property is added successfully"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyvectorbool",children:"VRAddPropertyVectorBool"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-cpp",children:"int VRAddPropertyVectorBool(\r\n    HMeta metaNode,\r\n    const char * propertyName\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a boolean vector property to a metanode (resizable container)"}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propertyName"})," name of the property to add"]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Return"}),": 0 if the property is added successfully"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyvectorchar",children:"VRAddPropertyVectorChar"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-cpp",children:"int VRAddPropertyVectorChar(\r\n    HMeta metaNode,\r\n    const char * propertyName\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a character vector property to a metanode (resizable container)"}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propertyName"})," name of the property to add"]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Return"}),": 0 if the property is added successfully"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyvectordouble",children:"VRAddPropertyVectorDouble"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-cpp",children:"int VRAddPropertyVectorDouble(\r\n    HMeta metaNode,\r\n    const char * propertyName\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a double vector property to a metanode (resizable container)"}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propertyName"})," name of the property to add"]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Return"}),": 0 if the property is added successfully"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyvectorfloat",children:"VRAddPropertyVectorFloat"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-cpp",children:"int VRAddPropertyVectorFloat(\r\n    HMeta metaNode,\r\n    const char * propertyName\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a float vector property to a metanode (resizable container)"}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propertyName"})," name of the property to add"]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Return"}),": 0 if the property is added successfully"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyvectorint",children:"VRAddPropertyVectorInt"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-cpp",children:"int VRAddPropertyVectorInt(\r\n    HMeta metaNode,\r\n    const char * propertyName\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds an integer vector property to a metanode (resizable container)"}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propertyName"})," name of the property to add"]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Return"}),": 0 if the property is added successfully"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyvectorstring",children:"VRAddPropertyVectorString"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-cpp",children:"int VRAddPropertyVectorString(\r\n    HMeta metaNode,\r\n    const char * propertyName\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a string vector property to a metanode (resizable container)"}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propertyName"})," name of the property to add"]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Return"}),": 0 if the property is added successfully"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyvectorworldfloat",children:"VRAddPropertyVectorWorldFloat"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-cpp",children:"int VRAddPropertyVectorWorldFloat(\r\n    HMeta metaNode,\r\n    const char * propertyName\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a world float vector property to a metanode (resizable container)"}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propertyName"})," name of the property to add"]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Return"}),": 0 if the property is added successfully"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyworldfloat",children:"VRAddPropertyWorldFloat"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-cpp",children:"int VRAddPropertyWorldFloat(\r\n    HMeta metaNode,\r\n    const char * propertyName,\r\n    double defaultValue\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a world float property to a metanode."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propertyName"})," name of the property to add"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultValue"})," the default value on new nodes. Truncated according to world precision."]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Return"}),": 0 if the property is added successfully"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyworldfloatrange",children:"VRAddPropertyWorldFloatRange"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-cpp",children:"int VRAddPropertyWorldFloatRange(\r\n    HMeta metaNode,\r\n    const char * propertyName,\r\n    double defaultValue,\r\n    double minValue,\r\n    double maxValue\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a world float property to a metanode, with min/max range hints."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propertyName"})," name of the property to add"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultValue"})," the default value on new nodes. Truncated according to world precision."]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minValue"})," the minimum value hint, truncated according to world precision"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxValue"})," the maximum value hint, truncated according to world precision"]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Return"}),": 0 if the property is added successfully"]}),"\n",(0,d.jsx)(r.h3,{id:"vrgetpropertiescount",children:"VRGetPropertiesCount"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-cpp",children:"int VRGetPropertiesCount(\r\n    HMeta metaNode\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Gets the number of properties on a metanode."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to query"]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Return"}),": the number of properties on the metanode, or -1 on error (0 is a valid number of properties)"]}),"\n",(0,d.jsx)(r.h3,{id:"vrsetpropertycached",children:"VRSetPropertyCached"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-cpp",children:"int VRSetPropertyCached(\r\n    HMeta metaNode,\r\n    const char * propertyName,\r\n    char cached\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Sets a property as cached (contents are replicated in the disk cache)"}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propertyName"})," name of the property to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"cached"})," any value greater than 0 makes the property cached"]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Return"}),": 0 if property is successfully changed"]}),"\n",(0,d.jsx)(r.h3,{id:"vrsetpropertycloned",children:"VRSetPropertyCloned"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-cpp",children:"int VRSetPropertyCloned(\r\n    HMeta metaNode,\r\n    const char * propertyName,\r\n    char saved\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Sets a property as cloned (whether the property value should be copied when cloning a node)"}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propertyName"})," name of the property to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"saved"})," any value greater than 0 makes the property saved"]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Return"}),": 0 if property is successfully changed"]}),"\n",(0,d.jsx)(r.h3,{id:"vrsetpropertyinternal",children:"VRSetPropertyInternal"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-cpp",children:"int VRSetPropertyInternal(\r\n    HMeta metaNode,\r\n    const char * propertyName,\r\n    char internal\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Sets a property as internal (provides a hint to node property user interface to not display the property editor)"}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propertyName"})," name of the property to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"internal"})," any value greater than 0 makes the property internal"]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Return"}),": 0 if property is successfully changed"]}),"\n",(0,d.jsx)(r.h3,{id:"vrsetpropertypurged",children:"VRSetPropertyPurged"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-cpp",children:"int VRSetPropertyPurged(\r\n    HMeta metaNode,\r\n    const char * propertyName,\r\n    char purged\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Sets a property as purged (contents are ejected from memory and cached to disk)"}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propertyName"})," name of the property to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"purged"})," any value greater than 0 makes the property purged"]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Return"}),": 0 if property is successfully changed"]}),"\n",(0,d.jsx)(r.h3,{id:"vrsetpropertyreadonly",children:"VRSetPropertyReadOnly"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-cpp",children:"int VRSetPropertyReadOnly(\r\n    HMeta metaNode,\r\n    const char * propertyName,\r\n    char readOnly\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Sets a property as read-only (provides a hint to node property user interface to make the editor read only)"}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propertyName"})," name of the property to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"readOnly"})," any value greater than 0 makes the property read only"]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Return"}),": 0 if property is successfully changed"]}),"\n",(0,d.jsx)(r.h3,{id:"vrsetpropertysaved",children:"VRSetPropertySaved"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-cpp",children:"int VRSetPropertySaved(\r\n    HMeta metaNode,\r\n    const char * propertyName,\r\n    char saved\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Sets a property as saved (whether or not the value is saved to VRText/VRNative documents)"}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaNode"})," handle to the metanode to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propertyName"})," name of the property to modify"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"saved"})," any value greater than 0 makes the property saved"]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Return"}),": 0 if property is successfully changed"]})]})}function h(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,d.jsx)(r,{...e,children:(0,d.jsx)(c,{...e})}):c(e)}},28453:(e,r,n)=>{n.d(r,{R:()=>a,x:()=>l});var t=n(96540);const d={},s=t.createContext(d);function a(e){const r=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:a(e.components),t.createElement(s.Provider,{value:r},e.children)}}}]);
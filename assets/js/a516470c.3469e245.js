"use strict";(self.webpackChunkvirtalis_docs=self.webpackChunkvirtalis_docs||[]).push([[3688],{5443:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"visionary-render-programming/reference/lua-api/modules/metanodes","title":"Metanodes","description":"Functions for interacting with metanodes.","source":"@site/docs/visionary-render-programming/reference/lua-api/modules/metanodes.mdx","sourceDirName":"visionary-render-programming/reference/lua-api/modules","slug":"/visionary-render-programming/reference/lua-api/modules/metanodes","permalink":"/visionary-render-programming/reference/lua-api/modules/metanodes","draft":false,"unlisted":false,"editUrl":"https://github.com/virtalis/docs/tree/master/docs/visionary-render-programming/reference/lua-api/modules/metanodes.mdx","tags":[],"version":"current","frontMatter":{"title":"Metanodes","summary":"Functions for interacting with metanodes."},"sidebar":"visionaryRenderProgrammingSidebar","previous":{"title":"Maths","permalink":"/visionary-render-programming/reference/lua-api/modules/maths"},"next":{"title":"Nodes","permalink":"/visionary-render-programming/reference/lua-api/modules/nodes"}}');var d=n(74848),s=n(28453);const a={title:"Metanodes",summary:"Functions for interacting with metanodes."},i="Metanodes",l={},o=[{value:"Functions",id:"functions",level:2},{value:"Functions Documentation",id:"functions-documentation",level:2},{value:"vrAddPropertyArrayBool",id:"vraddpropertyarraybool",level:3},{value:"vrAddPropertyArrayChar",id:"vraddpropertyarraychar",level:3},{value:"vrAddPropertyArrayDouble",id:"vraddpropertyarraydouble",level:3},{value:"vrAddPropertyArrayFloat",id:"vraddpropertyarrayfloat",level:3},{value:"vrAddPropertyArrayInt",id:"vraddpropertyarrayint",level:3},{value:"vrAddPropertyArrayWorldFloat",id:"vraddpropertyarrayworldfloat",level:3},{value:"vrAddPropertyBool",id:"vraddpropertybool",level:3},{value:"vrAddPropertyChar",id:"vraddpropertychar",level:3},{value:"vrAddPropertyDouble",id:"vraddpropertydouble",level:3},{value:"vrAddPropertyFloat",id:"vraddpropertyfloat",level:3},{value:"vrAddPropertyInt",id:"vraddpropertyint",level:3},{value:"vrAddPropertyLink",id:"vraddpropertylink",level:3},{value:"vrAddPropertyMat3d",id:"vraddpropertymat3d",level:3},{value:"vrAddPropertyMat3f",id:"vraddpropertymat3f",level:3},{value:"vrAddPropertyMat3w",id:"vraddpropertymat3w",level:3},{value:"vrAddPropertyMat4d",id:"vraddpropertymat4d",level:3},{value:"vrAddPropertyMat4f",id:"vraddpropertymat4f",level:3},{value:"vrAddPropertyMat4w",id:"vraddpropertymat4w",level:3},{value:"vrAddPropertyObserver",id:"vraddpropertyobserver",level:3},{value:"vrAddPropertyString",id:"vraddpropertystring",level:3},{value:"vrAddPropertyVec2d",id:"vraddpropertyvec2d",level:3},{value:"vrAddPropertyVec2f",id:"vraddpropertyvec2f",level:3},{value:"vrAddPropertyVec2i",id:"vraddpropertyvec2i",level:3},{value:"vrAddPropertyVec2w",id:"vraddpropertyvec2w",level:3},{value:"vrAddPropertyVec3d",id:"vraddpropertyvec3d",level:3},{value:"vrAddPropertyVec3f",id:"vraddpropertyvec3f",level:3},{value:"vrAddPropertyVec3i",id:"vraddpropertyvec3i",level:3},{value:"vrAddPropertyVec3w",id:"vraddpropertyvec3w",level:3},{value:"vrAddPropertyVec4d",id:"vraddpropertyvec4d",level:3},{value:"vrAddPropertyVec4f",id:"vraddpropertyvec4f",level:3},{value:"vrAddPropertyVec4i",id:"vraddpropertyvec4i",level:3},{value:"vrAddPropertyVec4w",id:"vraddpropertyvec4w",level:3},{value:"vrAddPropertyVectorBool",id:"vraddpropertyvectorbool",level:3},{value:"vrAddPropertyVectorChar",id:"vraddpropertyvectorchar",level:3},{value:"vrAddPropertyVectorDouble",id:"vraddpropertyvectordouble",level:3},{value:"vrAddPropertyVectorFloat",id:"vraddpropertyvectorfloat",level:3},{value:"vrAddPropertyVectorInt",id:"vraddpropertyvectorint",level:3},{value:"vrAddPropertyVectorString",id:"vraddpropertyvectorstring",level:3},{value:"vrAddPropertyVectorWorldFloat",id:"vraddpropertyvectorworldfloat",level:3},{value:"vrAddPropertyWorldFloat",id:"vraddpropertyworldfloat",level:3},{value:"vrCreateMetaNode",id:"vrcreatemetanode",level:3},{value:"vrFinishMetaNode",id:"vrfinishmetanode",level:3},{value:"vrGatherMetaNode",id:"vrgathermetanode",level:3},{value:"vrMetaNodeExists",id:"vrmetanodeexists",level:3},{value:"vrMetaNodeGetProperty",id:"vrmetanodegetproperty",level:3},{value:"vrMetaNodeGetPropertyByIndex",id:"vrmetanodegetpropertybyindex",level:3},{value:"vrMetaNodeGetPropertyCount",id:"vrmetanodegetpropertycount",level:3}];function h(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(r.header,{children:(0,d.jsx)(r.h1,{id:"metanodes",children:"Metanodes"})}),"\n",(0,d.jsx)(r.p,{children:"Functions for interacting with metanodes."}),"\n",(0,d.jsx)(r.h2,{id:"functions",children:"Functions"}),"\n",(0,d.jsxs)(r.table,{children:[(0,d.jsx)(r.thead,{children:(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.th,{children:"Type"}),(0,d.jsx)(r.th,{children:"Name"})]})}),(0,d.jsxs)(r.tbody,{children:[(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"void"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyarraybool",children:"vrAddPropertyArrayBool"})}),"(string metaName, string propName, number length, boolean ... )",(0,d.jsx)("br",{}),"Adds a new boolean array property to an unfinished metanode."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"void"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyarraychar",children:"vrAddPropertyArrayChar"})}),"(string metaName, string propName, number length, number ... )",(0,d.jsx)("br",{}),"Adds a new character array property to an unfinished metanode."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"void"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyarraydouble",children:"vrAddPropertyArrayDouble"})}),"(string metaName, string propName, number length, number ... )",(0,d.jsx)("br",{}),"Adds a new double array property to an unfinished metanode."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"void"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyarrayfloat",children:"vrAddPropertyArrayFloat"})}),"(string metaName, string propName, number length, number ... )",(0,d.jsx)("br",{}),"Adds a new float array property to an unfinished metanode."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"void"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyarrayint",children:"vrAddPropertyArrayInt"})}),"(string metaName, string propName, number length, number ... )",(0,d.jsx)("br",{}),"Adds a new integer array property to an unfinished metanode."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"void"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyarrayworldfloat",children:"vrAddPropertyArrayWorldFloat"})}),"(string metaName, string propName, number length, number ... )",(0,d.jsx)("br",{}),"Adds a new world float array property to an unfinished metanode."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"void"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertybool",children:"vrAddPropertyBool"})}),"(string metaName, string propName, boolean defaultVal =false)",(0,d.jsx)("br",{}),"Adds a new boolean property to an unfinished metanode."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"void"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertychar",children:"vrAddPropertyChar"})}),"(string metaName, string propName, number defaultVal =0, number minVal =VR_CHAR_MIN, number maxVal =VR_CHAR_MAX)",(0,d.jsx)("br",{}),"Adds a new character property to an unfinished metanode."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"void"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertydouble",children:"vrAddPropertyDouble"})}),"(string metaName, string propName, number defaultVal =0.0, number minVal =VR_DOUBLE_MIN, number maxVal =VR_DOUBLE_MAX)",(0,d.jsx)("br",{}),"Adds a new double property to an unfinished metanode."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"void"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyfloat",children:"vrAddPropertyFloat"})}),"(string metaName, string propName, number defaultVal =0.0, number minVal =VR_FLOAT_MIN, number maxVal =VR_FLOAT_MAX)",(0,d.jsx)("br",{}),"Adds a new float property to an unfinished metanode."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"void"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyint",children:"vrAddPropertyInt"})}),"(string metaName, string propName, number defaultVal =0, number minVal =VR_INT_MIN, number maxVal =VR_INT_MAX)",(0,d.jsx)("br",{}),"Adds a new integer property to an unfinished metanode."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"void"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertylink",children:"vrAddPropertyLink"})}),"(string metaName, string propName, string filter =0)",(0,d.jsx)("br",{}),"Adds a new link property to an unfinished metanode."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"void"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertymat3d",children:"vrAddPropertyMat3d"})}),"(string metaName, string propName)",(0,d.jsx)("br",{}),"Adds a new mat3d property to an unfinished metanode."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"void"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertymat3f",children:"vrAddPropertyMat3f"})}),"(string metaName, string propName)",(0,d.jsx)("br",{}),"Adds a new mat3f property to an unfinished metanode."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"void"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertymat3w",children:"vrAddPropertyMat3w"})}),"(string metaName, string propName)",(0,d.jsx)("br",{}),"Adds a new mat3w property to an unfinished metanode."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"void"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertymat4d",children:"vrAddPropertyMat4d"})}),"(string metaName, string propName)",(0,d.jsx)("br",{}),"Adds a new mat4d property to an unfinished metanode."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"void"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertymat4f",children:"vrAddPropertyMat4f"})}),"(string metaName, string propName)",(0,d.jsx)("br",{}),"Adds a new mat4f property to an unfinished metanode."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"void"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertymat4w",children:"vrAddPropertyMat4w"})}),"(string metaName, string propName)",(0,d.jsx)("br",{}),"Adds a new mat4w property to an unfinished metanode."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"void"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyobserver",children:"vrAddPropertyObserver"})}),"(string key, Any valueChangedCallback, string metaName, string propNames, ",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/lua-api/classes/vrnode",children:"vrnode"})," user =nil)",(0,d.jsx)("br",{}),"Adds an observer of one or more properties of a metanode. The callback function will be executed once per update whenever the value of a specified property is changed."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"void"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertystring",children:"vrAddPropertyString"})}),"(string metaName, string propName, string defaultVal =0)",(0,d.jsx)("br",{}),"Adds a new string property to an unfinished metanode."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"void"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyvec2d",children:"vrAddPropertyVec2d"})}),"(string metaName, string propName, number defaultX =0.0, number defaultY =0.0, number minX =VR_DOUBLE_MIN, number minY =VR_DOUBLE_MIN, number maxX =VR_DOUBLE_MAX, number maxY =VR_DOUBLE_MAX)",(0,d.jsx)("br",{}),"Adds a new vec2d property to an unfinished metanode."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"void"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyvec2f",children:"vrAddPropertyVec2f"})}),"(string metaName, string propName, number defaultX =0.0, number defaultY =0.0, number minX =VR_FLOAT_MIN, number minY =VR_FLOAT_MIN, number maxX =VR_FLOAT_MAX, number maxY =VR_FLOAT_MAX)",(0,d.jsx)("br",{}),"Adds a new vec2f property to an unfinished metanode."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"void"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyvec2i",children:"vrAddPropertyVec2i"})}),"(string metaName, string propName, number defaultX =0, number defaultY =0, number minX =VR_INT_MIN, number minY =VR_INT_MIN, number maxX =VR_INT_MAX, number maxY =VR_INT_MAX)",(0,d.jsx)("br",{}),"Adds a new vec2i property to an unfinished metanode."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"void"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyvec2w",children:"vrAddPropertyVec2w"})}),"(string metaName, string propName, number defaultX =0.0, number defaultY =0.0, number minX =VR_WORLD_FLOAT_MIN, number minY =VR_WORLD_FLOAT_MIN, number maxX =VR_WORLD_FLOAT_MAX, number maxY =VR_WORLD_FLOAT_MAX)",(0,d.jsx)("br",{}),"Adds a new vec2w property to an unfinished metanode."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"void"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyvec3d",children:"vrAddPropertyVec3d"})}),"(string metaName, string propName, number defaultX =0.0, number defaultY =0.0, number defaultZ =0.0, number minX =VR_DOUBLE_MIN, number minY =VR_DOUBLE_MIN, number minZ =VR_DOUBLE_MIN, number maxX =VR_DOUBLE_MAX, number maxY =VR_DOUBLE_MAX, number maxZ =VR_DOUBLE_MAX)",(0,d.jsx)("br",{}),"Adds a new vec3d property to an unfinished metanode."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"void"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyvec3f",children:"vrAddPropertyVec3f"})}),"(string metaName, string propName, number defaultX =0.0, number defaultY =0.0, number defaultZ =0.0, number minX =VR_FLOAT_MIN, number minY =VR_FLOAT_MIN, number minZ =VR_FLOAT_MIN, number maxX =VR_FLOAT_MAX, number maxY =VR_FLOAT_MAX, number maxZ =VR_FLOAT_MAX)",(0,d.jsx)("br",{}),"Adds a new vec3f property to an unfinished metanode."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"void"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyvec3i",children:"vrAddPropertyVec3i"})}),"(string metaName, string propName, number defaultX =0, number defaultY =0, number defaultZ =0, number minX =VR_INT_MIN, number minY =VR_INT_MIN, number minZ =VR_INT_MIN, number maxX =VR_INT_MAX, number maxY =VR_INT_MAX, number maxZ =VR_INT_MAX)",(0,d.jsx)("br",{}),"Adds a new vec3i property to an unfinished metanode."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"void"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyvec3w",children:"vrAddPropertyVec3w"})}),"(string metaName, string propName, number defaultX =0.0, number defaultY =0.0, number defaultZ =0.0, number minX =VR_WORLD_FLOAT_MIN, number minY =VR_WORLD_FLOAT_MIN, number minZ =VR_WORLD_FLOAT_MIN, number maxX =VR_WORLD_FLOAT_MAX, number maxY =VR_WORLD_FLOAT_MAX, number maxZ =VR_WORLD_FLOAT_MAX)",(0,d.jsx)("br",{}),"Adds a new vec3w property to an unfinished metanode."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"void"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyvec4d",children:"vrAddPropertyVec4d"})}),"(string metaName, string propName, number defaultX =0.0, number defaultY =0.0, number defaultZ =0.0, number defaultW =0.0, number minX =VR_DOUBLE_MIN, number minY =VR_DOUBLE_MIN, number minZ =VR_DOUBLE_MIN, number minW =VR_DOUBLE_MIN, number maxX =VR_DOUBLE_MAX, number maxY =VR_DOUBLE_MAX, number maxZ =VR_DOUBLE_MAX, number maxW =VR_DOUBLE_MAX)",(0,d.jsx)("br",{}),"Adds a new vec4d property to an unfinished metanode."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"void"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyvec4f",children:"vrAddPropertyVec4f"})}),"(string metaName, string propName, number defaultX =0.0, number defaultY =0.0, number defaultZ =0.0, number defaultW =0.0, number minX =VR_FLOAT_MIN, number minY =VR_FLOAT_MIN, number minZ =VR_FLOAT_MIN, number minW =VR_FLOAT_MIN, number maxX =VR_FLOAT_MAX, number maxY =VR_FLOAT_MAX, number maxZ =VR_FLOAT_MAX, number maxW =VR_FLOAT_MAX)",(0,d.jsx)("br",{}),"Adds a new vec4f property to an unfinished metanode."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"void"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyvec4i",children:"vrAddPropertyVec4i"})}),"(string metaName, string propName, number defaultX =0, number defaultY =0, number defaultZ =0, number defaultW =0, number minX =VR_INT_MIN, number minY =VR_INT_MIN, number minZ =VR_INT_MIN, number minW =VR_INT_MIN, number maxX =VR_INT_MAX, number maxY =VR_INT_MAX, number maxZ =VR_INT_MAX, number maxW =VR_INT_MAX)",(0,d.jsx)("br",{}),"Adds a new vec4i property to an unfinished metanode."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"void"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyvec4w",children:"vrAddPropertyVec4w"})}),"(string metaName, string propName, number defaultX =0.0, number defaultY =0.0, number defaultZ =0.0, number defaultW =0.0, number minX =VR_WORLD_FLOAT_MIN, number minY =VR_WORLD_FLOAT_MIN, number minZ =VR_WORLD_FLOAT_MIN, number minW =VR_WORLD_FLOAT_MIN, number maxX =VR_WORLD_FLOAT_MAX, number maxY =VR_WORLD_FLOAT_MAX, number maxZ =VR_WORLD_FLOAT_MAX, number maxW =VR_WORLD_FLOAT_MAX)",(0,d.jsx)("br",{}),"Adds a new vec4w property to an unfinished metanode."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"void"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyvectorbool",children:"vrAddPropertyVectorBool"})}),"(string metaName, string propName)",(0,d.jsx)("br",{}),"Adds a new boolean vector property to an unfinished metanode."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"void"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyvectorchar",children:"vrAddPropertyVectorChar"})}),"(string metaName, string propName)",(0,d.jsx)("br",{}),"Adds a new character vector property to an unfinished metanode."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"void"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyvectordouble",children:"vrAddPropertyVectorDouble"})}),"(string metaName, string propName)",(0,d.jsx)("br",{}),"Adds a new double vector property to an unfinished metanode."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"void"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyvectorfloat",children:"vrAddPropertyVectorFloat"})}),"(string metaName, string propName)",(0,d.jsx)("br",{}),"Adds a new float vector property to an unfinished metanode."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"void"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyvectorint",children:"vrAddPropertyVectorInt"})}),"(string metaName, string propName)",(0,d.jsx)("br",{}),"Adds a new integer vector property to an unfinished metanode."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"void"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyvectorstring",children:"vrAddPropertyVectorString"})}),"(string metaName, string propName)",(0,d.jsx)("br",{}),"Adds a new string vector property to an unfinished metanode."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"void"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyvectorworldfloat",children:"vrAddPropertyVectorWorldFloat"})}),"(string metaName, string propName)",(0,d.jsx)("br",{}),"Adds a new world float vector property to an unfinished metanode."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"void"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vraddpropertyworldfloat",children:"vrAddPropertyWorldFloat"})}),"(string metaName, string propName, number defaultVal =0.0, number minVal =VR_WORLD_FLOAT_MIN, number maxVal =VR_WORLD_FLOAT_MAX)",(0,d.jsx)("br",{}),"Adds a new world float property to an unfinished metanode."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"void"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vrcreatemetanode",children:"vrCreateMetaNode"})}),"(string metaName, number flags =0)",(0,d.jsx)("br",{}),"Creates a new metanode."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"void"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vrfinishmetanode",children:"vrFinishMetaNode"})}),"(string metaName)",(0,d.jsx)("br",{}),"Finishes a metanode (call this after creating it and adding properties, etc.)"]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"table"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vrgathermetanode",children:"vrGatherMetaNode"})}),"(string metaName, ",(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/lua-api/classes/vrnode",children:"vrnode"})," node =nil)",(0,d.jsx)("br",{}),"Returns a list of all nodes of given type in the scene and optionally under a given node."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"boolean"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vrmetanodeexists",children:"vrMetaNodeExists"})}),"(string metaName, boolean versioned =false)",(0,d.jsx)("br",{}),"Returns true if there is a metanode with the given name."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/lua-api/classes/multi",children:"MULTI"}),"< string, number, string, number >"]}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vrmetanodegetproperty",children:"vrMetaNodeGetProperty"})}),"(string metaName, string propName)",(0,d.jsx)("br",{}),"Gets the name, type and type description of a MetaNode property."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/lua-api/classes/multi",children:"MULTI"}),"< string, number, string, boolean, number >"]}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vrmetanodegetpropertybyindex",children:"vrMetaNodeGetPropertyByIndex"})}),"(string metaName, number idx)",(0,d.jsx)("br",{}),"Gets the name, type and type description of a MetaNode property."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"number"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#vrmetanodegetpropertycount",children:"vrMetaNodeGetPropertyCount"})}),"(string metaName)",(0,d.jsx)("br",{}),"Gets the number of properties defined by a MetaNode."]})]})]})]}),"\n",(0,d.jsx)(r.h2,{id:"functions-documentation",children:"Functions Documentation"}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyarraybool",children:"vrAddPropertyArrayBool"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-lua",children:"void vrAddPropertyArrayBool(\r\n    string metaName,\r\n    string propName,\r\n    number length,\r\n    boolean ... \r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a new boolean array property to an unfinished metanode."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaName"})," The name of the metanode"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propName"})," The name of the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"length"})," The length of the array"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"..."})," The default value(s) to apply to the array elements"]}),"\n"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyarraychar",children:"vrAddPropertyArrayChar"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-lua",children:"void vrAddPropertyArrayChar(\r\n    string metaName,\r\n    string propName,\r\n    number length,\r\n    number ... \r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a new character array property to an unfinished metanode."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaName"})," The name of the metanode"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propName"})," The name of the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"length"})," The length of the array"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"..."})," The default value(s) to apply to the array elements"]}),"\n"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyarraydouble",children:"vrAddPropertyArrayDouble"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-lua",children:"void vrAddPropertyArrayDouble(\r\n    string metaName,\r\n    string propName,\r\n    number length,\r\n    number ... \r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a new double array property to an unfinished metanode."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaName"})," The name of the metanode"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propName"})," The name of the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"length"})," The length of the array"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"..."})," The default value(s) to apply to the array elements"]}),"\n"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyarrayfloat",children:"vrAddPropertyArrayFloat"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-lua",children:"void vrAddPropertyArrayFloat(\r\n    string metaName,\r\n    string propName,\r\n    number length,\r\n    number ... \r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a new float array property to an unfinished metanode."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaName"})," The name of the metanode"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propName"})," The name of the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"length"})," The length of the array"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"..."})," The default value(s) to apply to the array elements"]}),"\n"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyarrayint",children:"vrAddPropertyArrayInt"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-lua",children:"void vrAddPropertyArrayInt(\r\n    string metaName,\r\n    string propName,\r\n    number length,\r\n    number ... \r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a new integer array property to an unfinished metanode."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaName"})," The name of the metanode"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propName"})," The name of the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"length"})," The length of the array"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"..."})," The default value(s) to apply to the array elements"]}),"\n"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyarrayworldfloat",children:"vrAddPropertyArrayWorldFloat"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-lua",children:"void vrAddPropertyArrayWorldFloat(\r\n    string metaName,\r\n    string propName,\r\n    number length,\r\n    number ... \r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a new world float array property to an unfinished metanode."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaName"})," The name of the metanode"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propName"})," The name of the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"length"})," The length of the array"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"..."})," The default value(s) to apply to the array elements"]}),"\n"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertybool",children:"vrAddPropertyBool"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-lua",children:"void vrAddPropertyBool(\r\n    string metaName,\r\n    string propName,\r\n    boolean defaultVal =false\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a new boolean property to an unfinished metanode."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaName"})," The name of the metanode"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propName"})," The name of the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultVal"})," The default value to apply to the property"]}),"\n"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertychar",children:"vrAddPropertyChar"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-lua",children:"void vrAddPropertyChar(\r\n    string metaName,\r\n    string propName,\r\n    number defaultVal =0,\r\n    number minVal =VR_CHAR_MIN,\r\n    number maxVal =VR_CHAR_MAX\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a new character property to an unfinished metanode."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaName"})," The name of the metanode"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propName"})," The name of the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultVal"})," The default value to apply to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minVal"})," The minimum value that can be assigned to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxVal"})," The maximum value that can be assigned to the property"]}),"\n"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertydouble",children:"vrAddPropertyDouble"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-lua",children:"void vrAddPropertyDouble(\r\n    string metaName,\r\n    string propName,\r\n    number defaultVal =0.0,\r\n    number minVal =VR_DOUBLE_MIN,\r\n    number maxVal =VR_DOUBLE_MAX\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a new double property to an unfinished metanode."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaName"})," The name of the metanode"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propName"})," The name of the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultVal"})," The default value to apply to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minVal"})," The minimum value that can be assigned to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxVal"})," The maximum value that can be assigned to the property"]}),"\n"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyfloat",children:"vrAddPropertyFloat"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-lua",children:"void vrAddPropertyFloat(\r\n    string metaName,\r\n    string propName,\r\n    number defaultVal =0.0,\r\n    number minVal =VR_FLOAT_MIN,\r\n    number maxVal =VR_FLOAT_MAX\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a new float property to an unfinished metanode."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaName"})," The name of the metanode"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propName"})," The name of the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultVal"})," The default value to apply to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minVal"})," The minimum value that can be assigned to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxVal"})," The maximum value that can be assigned to the property"]}),"\n"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyint",children:"vrAddPropertyInt"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-lua",children:"void vrAddPropertyInt(\r\n    string metaName,\r\n    string propName,\r\n    number defaultVal =0,\r\n    number minVal =VR_INT_MIN,\r\n    number maxVal =VR_INT_MAX\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a new integer property to an unfinished metanode."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaName"})," The name of the metanode"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propName"})," The name of the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultVal"})," The default value to apply to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minVal"})," The minimum value that can be assigned to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxVal"})," The maximum value that can be assigned to the property"]}),"\n"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertylink",children:"vrAddPropertyLink"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-lua",children:"void vrAddPropertyLink(\r\n    string metaName,\r\n    string propName,\r\n    string filter =0\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a new link property to an unfinished metanode."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaName"})," The name of the metanode"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propName"})," The name of the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"filter"}),' A comma-separated list of metanode types that can be linked to (e.g. "Assembly" or "Visual,Sequence")']}),"\n"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertymat3d",children:"vrAddPropertyMat3d"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-lua",children:"void vrAddPropertyMat3d(\r\n    string metaName,\r\n    string propName\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a new mat3d property to an unfinished metanode."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaName"})," The name of the metanode"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propName"})," The name of the property"]}),"\n"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertymat3f",children:"vrAddPropertyMat3f"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-lua",children:"void vrAddPropertyMat3f(\r\n    string metaName,\r\n    string propName\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a new mat3f property to an unfinished metanode."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaName"})," The name of the metanode"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propName"})," The name of the property"]}),"\n"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertymat3w",children:"vrAddPropertyMat3w"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-lua",children:"void vrAddPropertyMat3w(\r\n    string metaName,\r\n    string propName\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a new mat3w property to an unfinished metanode."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaName"})," The name of the metanode"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propName"})," The name of the property"]}),"\n"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertymat4d",children:"vrAddPropertyMat4d"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-lua",children:"void vrAddPropertyMat4d(\r\n    string metaName,\r\n    string propName\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a new mat4d property to an unfinished metanode."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaName"})," The name of the metanode"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propName"})," The name of the property"]}),"\n"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertymat4f",children:"vrAddPropertyMat4f"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-lua",children:"void vrAddPropertyMat4f(\r\n    string metaName,\r\n    string propName\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a new mat4f property to an unfinished metanode."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaName"})," The name of the metanode"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propName"})," The name of the property"]}),"\n"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertymat4w",children:"vrAddPropertyMat4w"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-lua",children:"void vrAddPropertyMat4w(\r\n    string metaName,\r\n    string propName\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a new mat4w property to an unfinished metanode."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaName"})," The name of the metanode"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propName"})," The name of the property"]}),"\n"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyobserver",children:"vrAddPropertyObserver"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-lua",children:"void vrAddPropertyObserver(\r\n    string key,\r\n    Any valueChangedCallback,\r\n    string metaName,\r\n    string propNames,\r\n    vrnode user =nil\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds an observer of one or more properties of a metanode. The callback function will be executed once per update whenever the value of a specified property is changed."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"key"})," A unique key for this observer. This can be passed to the vrRemoveObserver function to remove this observer"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"valueChangedCallback"}),' A Lua function to execute whenever a specified property is changed. This function should have a signature like "function(node, value1, ...)" - i.e. with a value argument for each observed property. It can be a string name of a global function or a Lua function object']}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaName"}),' The name of the metanode to observe for property changes (i.e. "Assembly")']}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propNames"}),' A comma-separated list of properties to observe (e.g. "Enabled" or "Enabled,Transform")']}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"user"})," The user associated with this observer (optional - defaults to current user)"]}),"\n"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertystring",children:"vrAddPropertyString"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-lua",children:"void vrAddPropertyString(\r\n    string metaName,\r\n    string propName,\r\n    string defaultVal =0\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a new string property to an unfinished metanode."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaName"})," The name of the metanode"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propName"})," The name of the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultVal"})," The default value to apply to the property"]}),"\n"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyvec2d",children:"vrAddPropertyVec2d"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-lua",children:"void vrAddPropertyVec2d(\r\n    string metaName,\r\n    string propName,\r\n    number defaultX =0.0,\r\n    number defaultY =0.0,\r\n    number minX =VR_DOUBLE_MIN,\r\n    number minY =VR_DOUBLE_MIN,\r\n    number maxX =VR_DOUBLE_MAX,\r\n    number maxY =VR_DOUBLE_MAX\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a new vec2d property to an unfinished metanode."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaName"})," The name of the metanode"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propName"})," The name of the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultX"})," The default x value to apply to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultY"})," The default y value to apply to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minX"})," The minimum x value that can be assigned to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minY"})," The minimum y value that can be assigned to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxX"})," The maximum x value that can be assigned to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxY"})," The maximum y value that can be assigned to the property"]}),"\n"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyvec2f",children:"vrAddPropertyVec2f"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-lua",children:"void vrAddPropertyVec2f(\r\n    string metaName,\r\n    string propName,\r\n    number defaultX =0.0,\r\n    number defaultY =0.0,\r\n    number minX =VR_FLOAT_MIN,\r\n    number minY =VR_FLOAT_MIN,\r\n    number maxX =VR_FLOAT_MAX,\r\n    number maxY =VR_FLOAT_MAX\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a new vec2f property to an unfinished metanode."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaName"})," The name of the metanode"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propName"})," The name of the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultX"})," The default x value to apply to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultY"})," The default y value to apply to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minX"})," The minimum x value that can be assigned to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minY"})," The minimum y value that can be assigned to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxX"})," The maximum x value that can be assigned to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxY"})," The maximum y value that can be assigned to the property"]}),"\n"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyvec2i",children:"vrAddPropertyVec2i"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-lua",children:"void vrAddPropertyVec2i(\r\n    string metaName,\r\n    string propName,\r\n    number defaultX =0,\r\n    number defaultY =0,\r\n    number minX =VR_INT_MIN,\r\n    number minY =VR_INT_MIN,\r\n    number maxX =VR_INT_MAX,\r\n    number maxY =VR_INT_MAX\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a new vec2i property to an unfinished metanode."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaName"})," The name of the metanode"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propName"})," The name of the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultX"})," The default x value to apply to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultY"})," The default y value to apply to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minX"})," The minimum x value that can be assigned to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minY"})," The minimum y value that can be assigned to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxX"})," The maximum x value that can be assigned to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxY"})," The maximum y value that can be assigned to the property"]}),"\n"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyvec2w",children:"vrAddPropertyVec2w"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-lua",children:"void vrAddPropertyVec2w(\r\n    string metaName,\r\n    string propName,\r\n    number defaultX =0.0,\r\n    number defaultY =0.0,\r\n    number minX =VR_WORLD_FLOAT_MIN,\r\n    number minY =VR_WORLD_FLOAT_MIN,\r\n    number maxX =VR_WORLD_FLOAT_MAX,\r\n    number maxY =VR_WORLD_FLOAT_MAX\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a new vec2w property to an unfinished metanode."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaName"})," The name of the metanode"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propName"})," The name of the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultX"})," The default x value to apply to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultY"})," The default y value to apply to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minX"})," The minimum x value that can be assigned to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minY"})," The minimum y value that can be assigned to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxX"})," The maximum x value that can be assigned to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxY"})," The maximum y value that can be assigned to the property"]}),"\n"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyvec3d",children:"vrAddPropertyVec3d"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-lua",children:"void vrAddPropertyVec3d(\r\n    string metaName,\r\n    string propName,\r\n    number defaultX =0.0,\r\n    number defaultY =0.0,\r\n    number defaultZ =0.0,\r\n    number minX =VR_DOUBLE_MIN,\r\n    number minY =VR_DOUBLE_MIN,\r\n    number minZ =VR_DOUBLE_MIN,\r\n    number maxX =VR_DOUBLE_MAX,\r\n    number maxY =VR_DOUBLE_MAX,\r\n    number maxZ =VR_DOUBLE_MAX\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a new vec3d property to an unfinished metanode."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaName"})," The name of the metanode"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propName"})," The name of the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultX"})," The default x value to apply to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultY"})," The default y value to apply to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultZ"})," The default z value to apply to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minX"})," The minimum x value that can be assigned to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minY"})," The minimum y value that can be assigned to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minZ"})," The minimum z value that can be assigned to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxX"})," The maximum x value that can be assigned to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxY"})," The maximum y value that can be assigned to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxZ"})," The maximum z value that can be assigned to the property"]}),"\n"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyvec3f",children:"vrAddPropertyVec3f"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-lua",children:"void vrAddPropertyVec3f(\r\n    string metaName,\r\n    string propName,\r\n    number defaultX =0.0,\r\n    number defaultY =0.0,\r\n    number defaultZ =0.0,\r\n    number minX =VR_FLOAT_MIN,\r\n    number minY =VR_FLOAT_MIN,\r\n    number minZ =VR_FLOAT_MIN,\r\n    number maxX =VR_FLOAT_MAX,\r\n    number maxY =VR_FLOAT_MAX,\r\n    number maxZ =VR_FLOAT_MAX\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a new vec3f property to an unfinished metanode."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaName"})," The name of the metanode"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propName"})," The name of the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultX"})," The default x value to apply to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultY"})," The default y value to apply to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultZ"})," The default z value to apply to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minX"})," The minimum x value that can be assigned to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minY"})," The minimum y value that can be assigned to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minZ"})," The minimum z value that can be assigned to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxX"})," The maximum x value that can be assigned to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxY"})," The maximum y value that can be assigned to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxZ"})," The maximum z value that can be assigned to the property"]}),"\n"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyvec3i",children:"vrAddPropertyVec3i"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-lua",children:"void vrAddPropertyVec3i(\r\n    string metaName,\r\n    string propName,\r\n    number defaultX =0,\r\n    number defaultY =0,\r\n    number defaultZ =0,\r\n    number minX =VR_INT_MIN,\r\n    number minY =VR_INT_MIN,\r\n    number minZ =VR_INT_MIN,\r\n    number maxX =VR_INT_MAX,\r\n    number maxY =VR_INT_MAX,\r\n    number maxZ =VR_INT_MAX\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a new vec3i property to an unfinished metanode."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaName"})," The name of the metanode"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propName"})," The name of the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultX"})," The default x value to apply to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultY"})," The default y value to apply to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultZ"})," The default z value to apply to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minX"})," The minimum x value that can be assigned to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minY"})," The minimum y value that can be assigned to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minZ"})," The minimum z value that can be assigned to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxX"})," The maximum x value that can be assigned to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxY"})," The maximum y value that can be assigned to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxZ"})," The maximum z value that can be assigned to the property"]}),"\n"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyvec3w",children:"vrAddPropertyVec3w"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-lua",children:"void vrAddPropertyVec3w(\r\n    string metaName,\r\n    string propName,\r\n    number defaultX =0.0,\r\n    number defaultY =0.0,\r\n    number defaultZ =0.0,\r\n    number minX =VR_WORLD_FLOAT_MIN,\r\n    number minY =VR_WORLD_FLOAT_MIN,\r\n    number minZ =VR_WORLD_FLOAT_MIN,\r\n    number maxX =VR_WORLD_FLOAT_MAX,\r\n    number maxY =VR_WORLD_FLOAT_MAX,\r\n    number maxZ =VR_WORLD_FLOAT_MAX\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a new vec3w property to an unfinished metanode."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaName"})," The name of the metanode"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propName"})," The name of the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultX"})," The default x value to apply to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultY"})," The default y value to apply to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultZ"})," The default z value to apply to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minX"})," The minimum x value that can be assigned to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minY"})," The minimum y value that can be assigned to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minZ"})," The minimum z value that can be assigned to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxX"})," The maximum x value that can be assigned to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxY"})," The maximum y value that can be assigned to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxZ"})," The maximum z value that can be assigned to the property"]}),"\n"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyvec4d",children:"vrAddPropertyVec4d"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-lua",children:"void vrAddPropertyVec4d(\r\n    string metaName,\r\n    string propName,\r\n    number defaultX =0.0,\r\n    number defaultY =0.0,\r\n    number defaultZ =0.0,\r\n    number defaultW =0.0,\r\n    number minX =VR_DOUBLE_MIN,\r\n    number minY =VR_DOUBLE_MIN,\r\n    number minZ =VR_DOUBLE_MIN,\r\n    number minW =VR_DOUBLE_MIN,\r\n    number maxX =VR_DOUBLE_MAX,\r\n    number maxY =VR_DOUBLE_MAX,\r\n    number maxZ =VR_DOUBLE_MAX,\r\n    number maxW =VR_DOUBLE_MAX\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a new vec4d property to an unfinished metanode."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaName"})," The name of the metanode"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propName"})," The name of the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultX"})," The default x value to apply to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultY"})," The default y value to apply to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultZ"})," The default z value to apply to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultW"})," The default w value to apply to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minX"})," The minimum x value that can be assigned to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minY"})," The minimum y value that can be assigned to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minZ"})," The minimum z value that can be assigned to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minW"})," The minimum w value that can be assigned to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxX"})," The maximum x value that can be assigned to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxY"})," The maximum y value that can be assigned to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxZ"})," The maximum z value that can be assigned to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxW"})," The maximum w value that can be assigned to the property"]}),"\n"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyvec4f",children:"vrAddPropertyVec4f"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-lua",children:"void vrAddPropertyVec4f(\r\n    string metaName,\r\n    string propName,\r\n    number defaultX =0.0,\r\n    number defaultY =0.0,\r\n    number defaultZ =0.0,\r\n    number defaultW =0.0,\r\n    number minX =VR_FLOAT_MIN,\r\n    number minY =VR_FLOAT_MIN,\r\n    number minZ =VR_FLOAT_MIN,\r\n    number minW =VR_FLOAT_MIN,\r\n    number maxX =VR_FLOAT_MAX,\r\n    number maxY =VR_FLOAT_MAX,\r\n    number maxZ =VR_FLOAT_MAX,\r\n    number maxW =VR_FLOAT_MAX\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a new vec4f property to an unfinished metanode."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaName"})," The name of the metanode"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propName"})," The name of the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultX"})," The default x value to apply to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultY"})," The default y value to apply to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultZ"})," The default z value to apply to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultW"})," The default w value to apply to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minX"})," The minimum x value that can be assigned to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minY"})," The minimum y value that can be assigned to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minZ"})," The minimum z value that can be assigned to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minW"})," The minimum w value that can be assigned to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxX"})," The maximum x value that can be assigned to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxY"})," The maximum y value that can be assigned to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxZ"})," The maximum z value that can be assigned to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxW"})," The maximum w value that can be assigned to the property"]}),"\n"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyvec4i",children:"vrAddPropertyVec4i"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-lua",children:"void vrAddPropertyVec4i(\r\n    string metaName,\r\n    string propName,\r\n    number defaultX =0,\r\n    number defaultY =0,\r\n    number defaultZ =0,\r\n    number defaultW =0,\r\n    number minX =VR_INT_MIN,\r\n    number minY =VR_INT_MIN,\r\n    number minZ =VR_INT_MIN,\r\n    number minW =VR_INT_MIN,\r\n    number maxX =VR_INT_MAX,\r\n    number maxY =VR_INT_MAX,\r\n    number maxZ =VR_INT_MAX,\r\n    number maxW =VR_INT_MAX\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a new vec4i property to an unfinished metanode."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaName"})," The name of the metanode"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propName"})," The name of the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultX"})," The default x value to apply to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultY"})," The default y value to apply to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultZ"})," The default z value to apply to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultW"})," The default w value to apply to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minX"})," The minimum x value that can be assigned to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minY"})," The minimum y value that can be assigned to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minZ"})," The minimum z value that can be assigned to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minW"})," The minimum w value that can be assigned to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxX"})," The maximum x value that can be assigned to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxY"})," The maximum y value that can be assigned to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxZ"})," The maximum z value that can be assigned to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxW"})," The maximum w value that can be assigned to the property"]}),"\n"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyvec4w",children:"vrAddPropertyVec4w"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-lua",children:"void vrAddPropertyVec4w(\r\n    string metaName,\r\n    string propName,\r\n    number defaultX =0.0,\r\n    number defaultY =0.0,\r\n    number defaultZ =0.0,\r\n    number defaultW =0.0,\r\n    number minX =VR_WORLD_FLOAT_MIN,\r\n    number minY =VR_WORLD_FLOAT_MIN,\r\n    number minZ =VR_WORLD_FLOAT_MIN,\r\n    number minW =VR_WORLD_FLOAT_MIN,\r\n    number maxX =VR_WORLD_FLOAT_MAX,\r\n    number maxY =VR_WORLD_FLOAT_MAX,\r\n    number maxZ =VR_WORLD_FLOAT_MAX,\r\n    number maxW =VR_WORLD_FLOAT_MAX\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a new vec4w property to an unfinished metanode."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaName"})," The name of the metanode"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propName"})," The name of the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultX"})," The default x value to apply to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultY"})," The default y value to apply to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultZ"})," The default z value to apply to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultW"})," The default w value to apply to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minX"})," The minimum x value that can be assigned to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minY"})," The minimum y value that can be assigned to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minZ"})," The minimum z value that can be assigned to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minW"})," The minimum w value that can be assigned to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxX"})," The maximum x value that can be assigned to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxY"})," The maximum y value that can be assigned to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxZ"})," The maximum z value that can be assigned to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxW"})," The maximum w value that can be assigned to the property"]}),"\n"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyvectorbool",children:"vrAddPropertyVectorBool"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-lua",children:"void vrAddPropertyVectorBool(\r\n    string metaName,\r\n    string propName\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a new boolean vector property to an unfinished metanode."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaName"})," The name of the metanode"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propName"})," The name of the property"]}),"\n"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyvectorchar",children:"vrAddPropertyVectorChar"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-lua",children:"void vrAddPropertyVectorChar(\r\n    string metaName,\r\n    string propName\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a new character vector property to an unfinished metanode."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaName"})," The name of the metanode"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propName"})," The name of the property"]}),"\n"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyvectordouble",children:"vrAddPropertyVectorDouble"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-lua",children:"void vrAddPropertyVectorDouble(\r\n    string metaName,\r\n    string propName\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a new double vector property to an unfinished metanode."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaName"})," The name of the metanode"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propName"})," The name of the property"]}),"\n"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyvectorfloat",children:"vrAddPropertyVectorFloat"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-lua",children:"void vrAddPropertyVectorFloat(\r\n    string metaName,\r\n    string propName\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a new float vector property to an unfinished metanode."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaName"})," The name of the metanode"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propName"})," The name of the property"]}),"\n"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyvectorint",children:"vrAddPropertyVectorInt"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-lua",children:"void vrAddPropertyVectorInt(\r\n    string metaName,\r\n    string propName\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a new integer vector property to an unfinished metanode."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaName"})," The name of the metanode"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propName"})," The name of the property"]}),"\n"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyvectorstring",children:"vrAddPropertyVectorString"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-lua",children:"void vrAddPropertyVectorString(\r\n    string metaName,\r\n    string propName\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a new string vector property to an unfinished metanode."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaName"})," The name of the metanode"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propName"})," The name of the property"]}),"\n"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyvectorworldfloat",children:"vrAddPropertyVectorWorldFloat"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-lua",children:"void vrAddPropertyVectorWorldFloat(\r\n    string metaName,\r\n    string propName\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a new world float vector property to an unfinished metanode."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaName"})," The name of the metanode"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propName"})," The name of the property"]}),"\n"]}),"\n",(0,d.jsx)(r.h3,{id:"vraddpropertyworldfloat",children:"vrAddPropertyWorldFloat"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-lua",children:"void vrAddPropertyWorldFloat(\r\n    string metaName,\r\n    string propName,\r\n    number defaultVal =0.0,\r\n    number minVal =VR_WORLD_FLOAT_MIN,\r\n    number maxVal =VR_WORLD_FLOAT_MAX\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Adds a new world float property to an unfinished metanode."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaName"})," The name of the metanode"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"propName"})," The name of the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"defaultVal"})," The default value to apply to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"minVal"})," The minimum value that can be assigned to the property"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"maxVal"})," The maximum value that can be assigned to the property"]}),"\n"]}),"\n",(0,d.jsx)(r.h3,{id:"vrcreatemetanode",children:"vrCreateMetaNode"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-lua",children:"void vrCreateMetaNode(\r\n    string metaName,\r\n    number flags =0\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Creates a new metanode."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaName"})," The name of the metanode"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"flags"})," The flags to apply to the metanode"]}),"\n"]}),"\n",(0,d.jsx)(r.h3,{id:"vrfinishmetanode",children:"vrFinishMetaNode"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-lua",children:"void vrFinishMetaNode(\r\n    string metaName\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Finishes a metanode (call this after creating it and adding properties, etc.)"}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaName"})," The name of the metanode"]}),"\n"]}),"\n",(0,d.jsx)(r.h3,{id:"vrgathermetanode",children:"vrGatherMetaNode"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-lua",children:"table vrGatherMetaNode(\r\n    string metaName,\r\n    vrnode node =nil\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Returns a list of all nodes of given type in the scene and optionally under a given node."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaName"})," The type of node to list"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"node"})," The node to start searching from"]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Return"}),": Array of nodes of the specified type"]}),"\n",(0,d.jsx)(r.h3,{id:"vrmetanodeexists",children:"vrMetaNodeExists"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-lua",children:"boolean vrMetaNodeExists(\r\n    string metaName,\r\n    boolean versioned =false\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Returns true if there is a metanode with the given name."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaName"})," The metanode name to query"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"versioned"})," Whether to query versioned metanode names"]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Return"}),": True if exists"]}),"\n",(0,d.jsx)(r.h3,{id:"vrmetanodegetproperty",children:"vrMetaNodeGetProperty"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-lua",children:"MULTI< string, number, string, number > vrMetaNodeGetProperty(\r\n    string metaName,\r\n    string propName\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Gets the name, type and type description of a MetaNode property."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Return"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsx)(r.li,{children:"The name of the property"}),"\n",(0,d.jsx)(r.li,{children:"The type of the property"}),"\n",(0,d.jsx)(r.li,{children:"The description of the type of property"}),"\n",(0,d.jsx)(r.li,{children:"The number of elements in the property (e.g. greater than 1 for arrays)"}),"\n"]}),"\n",(0,d.jsx)(r.h3,{id:"vrmetanodegetpropertybyindex",children:"vrMetaNodeGetPropertyByIndex"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-lua",children:"MULTI< string, number, string, boolean, number > vrMetaNodeGetPropertyByIndex(\r\n    string metaName,\r\n    number idx\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Gets the name, type and type description of a MetaNode property."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaName"})," The name of the metanode"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"idx"})," The index of the property (zero based)."]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Return"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsx)(r.li,{children:"The name of the property"}),"\n",(0,d.jsx)(r.li,{children:"The type of the property"}),"\n",(0,d.jsx)(r.li,{children:"The description of the type of property"}),"\n",(0,d.jsx)(r.li,{children:"Whether the property can be saved in a file"}),"\n",(0,d.jsx)(r.li,{children:"The number of elements in the property (e.g. greater than 1 for arrays)"}),"\n"]}),"\n",(0,d.jsx)(r.h3,{id:"vrmetanodegetpropertycount",children:"vrMetaNodeGetPropertyCount"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-lua",children:"number vrMetaNodeGetPropertyCount(\r\n    string metaName\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"Gets the number of properties defined by a MetaNode."}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"metaName"})," The name of the metanode"]}),"\n"]}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Return"}),": The number of properties on the metanode"]})]})}function m(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,d.jsx)(r,{...e,children:(0,d.jsx)(h,{...e})}):h(e)}},28453:(e,r,n)=>{n.d(r,{R:()=>a,x:()=>i});var t=n(96540);const d={},s=t.createContext(d);function a(e){const r=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:a(e.components),t.createElement(s.Provider,{value:r},e.children)}}}]);
"use strict";(self.webpackChunkvirtalis_docs=self.webpackChunkvirtalis_docs||[]).push([[9368],{66604:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>a,contentTitle:()=>l,default:()=>o,frontMatter:()=>d,metadata:()=>r,toc:()=>h});const r=JSON.parse('{"id":"visionary-render-programming/scripts/metanodes/material","title":"Material","description":"Materials describe the appearance of models in the scene.","source":"@site/docs/visionary-render-programming/scripts/metanodes/material.mdx","sourceDirName":"visionary-render-programming/scripts/metanodes","slug":"/visionary-render-programming/scripts/metanodes/material","permalink":"/visionary-render-programming/scripts/metanodes/material","draft":false,"unlisted":false,"editUrl":"https://github.com/virtalis/docs/tree/master/docs/visionary-render-programming/scripts/metanodes/material.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"visionaryRenderProgrammingSidebar","previous":{"title":"LOD and GeoGroup","permalink":"/visionary-render-programming/scripts/metanodes/lod-and-geogroup"},"next":{"title":"Metadata","permalink":"/visionary-render-programming/scripts/metanodes/metadata"}}');var n=i(74848),s=i(28453);const d={},l="Material",a={},h=[{value:"Properties",id:"properties",level:2},{value:"Blend Modes",id:"blend-modes",level:3},{value:"Line Patterns",id:"line-patterns",level:3},{value:"Examples",id:"examples",level:2},{value:"Example 1",id:"example-1",level:3},{value:"Example 2",id:"example-2",level:3},{value:"Example 3",id:"example-3",level:3}];function c(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"material",children:"Material"})}),"\n",(0,n.jsx)(t.p,{children:"Materials describe the appearance of models in the scene."}),"\n",(0,n.jsx)(t.h2,{id:"properties",children:"Properties"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Property"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"Diffuse"}),(0,n.jsx)(t.td,{children:"vrvec3"}),(0,n.jsx)(t.td,{children:"Main material colour, RGB values (0.0 - 1.0)"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"Reflectivity"}),(0,n.jsx)(t.td,{children:"number"}),(0,n.jsx)(t.td,{children:"How reflective the material is (0.0 - 1.0)"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"Smoothness"}),(0,n.jsx)(t.td,{children:"number"}),(0,n.jsx)(t.td,{children:"How smooth the material is (0.0 - 1.0)"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"Metalness"}),(0,n.jsx)(t.td,{children:"number"}),(0,n.jsx)(t.td,{children:"How metallic the material is (0.0 - 1.0)"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"Ambient"}),(0,n.jsx)(t.td,{children:"number"}),(0,n.jsx)(t.td,{children:"How much ambient light the material reflects (0.0 - 1.0)"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"Emissive"}),(0,n.jsx)(t.td,{children:"vrvec3"}),(0,n.jsx)(t.td,{children:"The colour emitted by the material, RGB values (0.0 - 1.0)"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"EmissiveIntensity"}),(0,n.jsx)(t.td,{children:"number"}),(0,n.jsx)(t.td,{children:"Emissive multiplier (0.0 - 10000.0)"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"Opacity"}),(0,n.jsx)(t.td,{children:"number"}),(0,n.jsx)(t.td,{children:"How opaque the material is (0.0 - 1.0). Values other than 1 require BlendMode to be set to something other than None."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"DiffuseMap"}),(0,n.jsx)(t.td,{children:"vrnode"}),(0,n.jsx)(t.td,{children:"Link to colour texture in the tree"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"SmoothnessMap"}),(0,n.jsx)(t.td,{children:"vrnode"}),(0,n.jsx)(t.td,{children:"Link to monochrome texture in the tree"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"ReflectivityMap"}),(0,n.jsx)(t.td,{children:"vrnode"}),(0,n.jsx)(t.td,{children:"Link to monochrome texture in the tree"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"AmbientMap"}),(0,n.jsx)(t.td,{children:"vrnode"}),(0,n.jsx)(t.td,{children:"Link to monochrome texture in the tree"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"EmissiveMap"}),(0,n.jsx)(t.td,{children:"vrnode"}),(0,n.jsx)(t.td,{children:"Link to colour texture in the tree"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"OpacityMap"}),(0,n.jsx)(t.td,{children:"vrnode"}),(0,n.jsx)(t.td,{children:"Link to monochrome texture in the tree"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"EnvironmentMap"}),(0,n.jsx)(t.td,{children:"vrnode"}),(0,n.jsx)(t.td,{children:"Link to colour texture in the tree"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"NormalMap"}),(0,n.jsx)(t.td,{children:"vrnode"}),(0,n.jsx)(t.td,{children:"Link to colour texture in the tree"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"BumpMap"}),(0,n.jsx)(t.td,{children:"vrnode"}),(0,n.jsx)(t.td,{children:"Link to colour texture in the tree"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"Enabled"}),(0,n.jsx)(t.td,{children:"boolean"}),(0,n.jsx)(t.td,{children:"Enabled or disabled (when disabled, any objects using this material are not rendered)"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"BlendMode"}),(0,n.jsx)(t.td,{children:"number"}),(0,n.jsx)(t.td,{children:"Which blend mode to use. See the blend mode table below."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"AlphaTest"}),(0,n.jsx)(t.td,{children:"boolean"}),(0,n.jsx)(t.td,{children:"Whether to enable alpha testing"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"AlphaTestRef"}),(0,n.jsx)(t.td,{children:"number"}),(0,n.jsx)(t.td,{children:"The opacity value below which the fragment is discarded"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"AlphaToCoverage"}),(0,n.jsx)(t.td,{children:"boolean"}),(0,n.jsx)(t.td,{children:"Whether to enable screendoor transparency"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"BumpScale"}),(0,n.jsx)(t.td,{children:"number"}),(0,n.jsx)(t.td,{children:"Scales the bump or normal map (0.0 - 20.0)"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"ReliefMapping"}),(0,n.jsx)(t.td,{children:"boolean"}),(0,n.jsx)(t.td,{children:"Whether to enable relief mapping"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"TwoSidedLighting"}),(0,n.jsx)(t.td,{children:"boolean"}),(0,n.jsx)(t.td,{children:"Whether to enable two sided lighting for objects using this material"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"MapMatrix"}),(0,n.jsx)(t.td,{children:"vrmatrix4"}),(0,n.jsx)(t.td,{children:"Transform to apply to texture coordinates on objects that this material is applied to"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"LineWidth"}),(0,n.jsx)(t.td,{children:"number"}),(0,n.jsx)(t.td,{children:"Specify the width of lines drawn with this material (0.0 - 20.0)"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"LinePattern"}),(0,n.jsx)(t.td,{children:"number"}),(0,n.jsx)(t.td,{children:"The pattern to use to draw lines. See the line pattern table below."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"Lit"}),(0,n.jsx)(t.td,{children:"boolean"}),(0,n.jsx)(t.td,{children:"Specify whether this material is affected by scene lighting"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"NightEmissive"}),(0,n.jsx)(t.td,{children:"boolean"}),(0,n.jsx)(t.td,{children:"Specify whether this material is affected by night time"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"HalfLambert"}),(0,n.jsx)(t.td,{children:"boolean"}),(0,n.jsx)(t.td,{children:"Specify whether to use half lambert diffuse lighting mode"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"PreviewShape"}),(0,n.jsx)(t.td,{children:"vrnode"}),(0,n.jsx)(t.td,{children:"Specify a custom shape (Model node) to use to preview this material, instead of the default sphere"})]})]})]}),"\n",(0,n.jsx)(t.h3,{id:"blend-modes",children:"Blend Modes"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"__StdMaterial_BlendNone"})}),(0,n.jsx)(t.td,{children:"No alpha blending at all (Opacity property changes have no effect)"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"__StdMaterial_BlendAlpha"})}),(0,n.jsx)(t.td,{children:"Alpha blending"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"__StdMaterial_BlendAdditive"})}),(0,n.jsx)(t.td,{children:"Additive blending"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"__StdMaterial_BlendMultiplicative"})}),(0,n.jsx)(t.td,{children:"Multiplicative blending"})]})]})]}),"\n",(0,n.jsx)(t.h3,{id:"line-patterns",children:"Line Patterns"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"__StdMaterial_LinePatternFullLine"})}),(0,n.jsx)(t.td,{children:"Draws solid lines"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"__StdMaterial_LinePatternNoLine"})}),(0,n.jsx)(t.td,{children:"Doesn't draw lines at all"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"__StdMaterial_LinePatternDoubleDashed"})}),(0,n.jsx)(t.td,{children:"Draws double-dashed lines"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"__StdMaterial_LinePatternDashedLine"})}),(0,n.jsx)(t.td,{children:"Draws dashed lines"})]})]})]}),"\n",(0,n.jsx)(t.h2,{id:"examples",children:"Examples"}),"\n",(0,n.jsx)(t.h3,{id:"example-1",children:"Example 1"}),"\n",(0,n.jsx)(t.p,{children:"This script will change the opacity value (0.0 to 1.0) of the material pointed to by the variable HighLight. The HighLight variable points at the Material assembly within the Library tree view. When the opacty level if greater than or equal to 1.0 it then begins to decrement the opacity level. If the opacity level is less than or equal to 0.0 it then increments the opacity level."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-lua",children:'-- Drag/Drop section BEGINS - Do not edit between BEGINS and ENDS.\r\nlocal Highlight = __Script.dragdrop.Highlight\r\nlocal Delta = __Script.dragdrop.Direction\r\n-- Drag/Drop section ENDS\r\n\r\n-- Highlight is a StdMaterial node\r\n-- Delta is a MetaDataFloat node\r\n\r\nprint("Material ", Highlight)\r\nprint("Colour ", Highlight.Diffuse)\r\nprint("Ambient ", Highlight.Ambient)\r\nprint("Opacity ", Highlight.Opacity)\r\nprint("Smoothness ", Highlight.Smoothness)\r\nprint("Metalicness ", Highlight.Metalness)\r\nprint("Reflectivity ", Highlight.Reflectivity)\r\n\r\n-- initialise the delta variable\r\nif Delta.Value == 0 then\r\n   Delta.Value = 0.1\r\nend\r\n\r\n-- get the material opacity\r\nlocal opacity = Highlight.Opacity\r\n\r\n-- update the opacity depending on direction\r\nopacity = opacity + Delta.Value\r\n\r\n-- check the opacity value is not beyond the limits\r\nif opacity <= 0.0 then\r\n   Delta.Value = 0.1\r\n   opacity = 0.0\r\nelseif opacity >= 1.0 then\r\n   Delta.Value = -0.1\r\n   opacity = 1.0\r\nend\r\n\r\n-- set the new opacity value\r\nHighlight.Opacity = opacity\n'})}),"\n",(0,n.jsx)(t.h3,{id:"example-2",children:"Example 2"}),"\n",(0,n.jsx)(t.p,{children:"Simple script which changes the Emissive value of the material pointed to by the Chess_table variable. The Emissive value is defined in an array of 3 floating point number between 0.0 and .0 for the red, green and blue components."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-lua",children:"-- Drag/Drop section BEGINS - Do not edit between BEGINS and ENDS.\r\nlocal table = __Script.dragdrop.table\r\n-- Drag/Drop section ENDS\r\n\r\n-- get Emissive colour\r\nlocal emissive = table.Emissive\r\n\r\n-- set material Diffuse to same as emissive\r\ntable.Diffuse = emissive\r\n\r\n-- set emissive RGB values\r\nemissive[1] = 0.0\r\nemissive[2] = 1.0\r\nemissive[3] = 0.0\r\n\r\n-- print the DiffuseMap link\r\nprint(table.DiffuseMap)\r\n\r\n-- print the DiffuseMap filename\r\nprint(table.DiffuseMap.Filename)\n"})}),"\n",(0,n.jsx)(t.h3,{id:"example-3",children:"Example 3"}),"\n",(0,n.jsx)(t.p,{children:"This example demonstrates how to change how a texture is mapped onto a surface by modifying the MapMatrix. The MapMatrix is a 3x3 matrix which is applied to the texture coordinates of the assembly it is applied to. This is accessed using the same method as the Assembly Transform."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-lua",children:"-- Drag/Drop section BEGINS - Do not edit between BEGINS and ENDS.\r\nlocal table = __Script.dragdrop.table\r\n-- Drag/Drop section ENDS\r\n\r\n-- increment the Y offset position by 0.01\r\ntable.MapMatrix.Position.Y = table.MapMatrix.Position.Y + 0.01\n"})})]})}function o(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},28453:(e,t,i)=>{i.d(t,{R:()=>d,x:()=>l});var r=i(96540);const n={},s=r.createContext(n);function d(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:d(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);
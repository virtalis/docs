"use strict";(self.webpackChunkvirtalis_docs=self.webpackChunkvirtalis_docs||[]).push([[7856],{14164:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"visionary-render-programming/plugins/getting-started/api","title":"API","description":"The API functions can be accessed from the following DLLs:","source":"@site/docs/visionary-render-programming/plugins/getting-started/api.mdx","sourceDirName":"visionary-render-programming/plugins/getting-started","slug":"/visionary-render-programming/plugins/getting-started/api","permalink":"/visionary-render-programming/plugins/getting-started/api","draft":false,"unlisted":false,"editUrl":"https://github.com/virtalis/docs/tree/master/docs/visionary-render-programming/plugins/getting-started/api.mdx","tags":[],"version":"current","lastUpdatedAt":1730817102000,"sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"visionaryRenderProgrammingSidebar","previous":{"title":"Native Plugins","permalink":"/visionary-render-programming/plugins/getting-started/native-plugins"},"next":{"title":"Write to the Application Log","permalink":"/visionary-render-programming/plugins/tutorials/app-log"}}');var i=r(74848),o=r(28453);const s={sidebar_position:4},a="API",d={},l=[{value:"Using the Wrangler",id:"using-the-wrangler",level:2},{value:"Example Code",id:"example-code",level:3},{value:"Loading a DLL Manually",id:"loading-a-dll-manually",level:2},{value:"Example Code",id:"example-code-1",level:3}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"api",children:"API"})}),"\n",(0,i.jsx)(n.p,{children:"The API functions can be accessed from the following DLLs:"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Name"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"vrtree.dll"})}),(0,i.jsxs)(n.td,{children:["This DLL contains the core VR API functions, such as ",(0,i.jsx)(n.code,{children:"VRConnect"})," and ",(0,i.jsx)(n.code,{children:"VRUpdate"}),"."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"vrtree-exchange.dll"})}),(0,i.jsxs)(n.td,{children:["This DLL contains the VR Exchange API functions, such as ",(0,i.jsx)(n.code,{children:"VRXImport"})," and ",(0,i.jsx)(n.code,{children:"VRXExport"}),". These are used to directly interact with other installed importer and exporter plugins."]})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"using-the-wrangler",children:"Using the Wrangler"}),"\n",(0,i.jsxs)(n.p,{children:["The API includes a C/C++ wrangler (",(0,i.jsx)(n.code,{children:"vrtree-linker"}),") for all of the functions provided by VRTree. It also includes fall-back dummy implementations for cases where the version of ",(0,i.jsx)(n.code,{children:"vrtree.dll"})," differs from the version expected by the plugin. These don't perform any operation and exist to prevent your plugins from crashing by calling a null function pointer."]}),"\n",(0,i.jsx)(n.h3,{id:"example-code",children:"Example Code"}),"\n",(0,i.jsxs)(n.p,{children:["When using the wrangler with C/C++, the ",(0,i.jsx)(n.code,{children:"VRPLUGIN_LOADVRTREE"})," macro will take care of all the work for you. It is usually best to call this from the ",(0,i.jsx)(n.code,{children:"VRPInit"})," function. The following example shows how to do this:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"#include <vrtree_api.h>\r\n\r\nusing namespace vrtree_cpp;\r\n\r\nPLUGIN_ENTRY_POINT int VRTREE_APIENTRY VRPInit()\r\n{\r\n  // Query the vrtree DLL for API entry points and load them.\r\n  VRPLUGIN_LOADVRTREE;\r\n\r\n  // Get a handle to this user's node.\r\n  HNodeR user = VRGetThisUser();\r\n\r\n  if (user) {\r\n    // Do something with the node...\r\n  }\r\n  return 0;\r\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"loading-a-dll-manually",children:"Loading a DLL Manually"}),"\n",(0,i.jsxs)(n.p,{children:["The wrangler can be unsuitable if you are using a language other than C/C++ or want to selectively probe for API functions. In this case, you can use the ",(0,i.jsx)(n.a,{href:"https://docs.microsoft.com/en-us/cpp/build/loadlibrary-and-afxloadlibrary?view=vs-2019",children:"LoadLibrary"})," and ",(0,i.jsx)(n.a,{href:"https://docs.microsoft.com/en-us/windows/win32/api/libloaderapi/nf-libloaderapi-getprocaddress",children:"GetProcAddress"})," functions on Windows."]}),"\n",(0,i.jsx)(n.h3,{id:"example-code-1",children:"Example Code"}),"\n",(0,i.jsx)(n.p,{children:"The VR Exchange API doesn't have a wrangler yet so has to be loaded manually. The following example shows how to do this:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'#include <vrtree_api.h>\r\n\r\nusing namespace vrtree_cpp;\r\n\r\nPLUGIN_ENTRY_POINT int VRTREE_APIENTRY VRPInit()\r\n{\r\n  // Map the VRTree Exchange DLL into the address space of this process and get a handle to it.\r\n  HMODULE hExchangeDLL = LoadLibrary("vrtree-exchange.dll");\r\n\r\n  if (hExchangeDLL) {\r\n    // Typedef a pointer to the VRXImportFunc function. It accepts 4 arguments and returns a uint32_t.\r\n    typedef uint32_t(*VRXImportFunc)(const char*, HNode, HNode, const char*);\r\n\r\n    // Get the address of VRXImportFunc from the __vrexport_VRXImport DLL and store it in a pointer.\r\n    // Note that we have to add "__vrexport_" to the function name.\r\n    VRXImportFunc importFunc = (VRXImportFunc)GetProcAddress(hExchangeDLL, "__vrexport_VRXImport");\r\n\r\n    if (importFunc) {\r\n      // Use the pointer to call the function as normal with some relevant arguments.\r\n      importFunc("path/to/file/to/import", ...);\r\n    }\r\n  }\r\n  return 0;\r\n}\n'})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>a});var t=r(96540);const i={},o=t.createContext(i);function s(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);
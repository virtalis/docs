"use strict";(self.webpackChunkvirtalis_docs=self.webpackChunkvirtalis_docs||[]).push([[706],{50033:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>d,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"visionary-render-programming/reference/c-api/classes/metanodes/meta-view-shader","title":"Meta_ViewShader","description":"Module: Metanodes / Definitions","source":"@site/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-view-shader.mdx","sourceDirName":"visionary-render-programming/reference/c-api/classes/metanodes","slug":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-view-shader","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-view-shader","draft":false,"unlisted":false,"editUrl":"https://github.com/virtalis/docs/tree/master/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-view-shader.mdx","tags":[],"version":"current","lastUpdatedAt":1730817102000,"frontMatter":{"title":"Meta_ViewShader","summary":"A ViewShader represents a shader object, expected to be used by a Meta_ViewFilter."},"sidebar":"visionaryRenderProgrammingSidebar","previous":{"title":"Meta_ViewFilter","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-view-filter"},"next":{"title":"Meta_View","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-view"}}');var i=t(74848),n=t(28453);const d={title:"Meta_ViewShader",summary:"A ViewShader represents a shader object, expected to be used by a Meta_ViewFilter."},a="Meta_ViewShader",o={},c=[{value:"Public Types",id:"public-types",level:2},{value:"Detailed Description",id:"detailed-description",level:2},{value:"Public Types Documentation",id:"public-types-documentation",level:2},{value:"enum IDX",id:"enum-idx",level:3},{value:"enum StereoMode",id:"enum-stereomode",level:3},{value:"enum Target",id:"enum-target",level:3}];function l(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,n.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"meta_viewshader",children:"Meta_ViewShader"})}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Module:"})," ",(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/",children:"Metanodes"})})," ",(0,i.jsx)(r.strong,{children:"/"})," ",(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/definitions",children:"Definitions"})})]}),"\n",(0,i.jsxs)(r.p,{children:["A ViewShader represents a shader object, expected to be used by a ",(0,i.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-view-filter",children:"Meta_ViewFilter"}),".  ",(0,i.jsx)(r.a,{href:"#detailed-description",children:"More..."})]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.code,{children:"#include <meta_division.hpp>"})}),"\n",(0,i.jsx)(r.h2,{id:"public-types",children:"Public Types"}),"\n",(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.th,{children:"Type"}),(0,i.jsx)(r.th,{children:"Name"})]})}),(0,i.jsxs)(r.tbody,{children:[(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"enum"}),(0,i.jsxs)(r.td,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"#enum-idx",children:"IDX"})})," { Idx_SourceCode, Idx_Description, Idx_Target, Idx_StereoMode }",(0,i.jsx)("br",{}),"Property Index."]})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"enum"}),(0,i.jsxs)(r.td,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"#enum-stereomode",children:"StereoMode"})})," { StereoMode_Any, StereoMode_MonoOnly, StereoMode_StereoOnly }",(0,i.jsx)("br",{}),"Values for Idx_StereoMode."]})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"enum"}),(0,i.jsxs)(r.td,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"#enum-target",children:"Target"})})," { Target_Viewport, Target_ViewportAfterHDR, Target_Window }",(0,i.jsx)("br",{}),"Values for Idx_Target."]})]})]})]}),"\n",(0,i.jsx)(r.h2,{id:"detailed-description",children:"Detailed Description"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-cpp",children:"struct Meta_ViewShader;\n"})}),"\n",(0,i.jsxs)(r.p,{children:["A ViewShader represents a shader object, expected to be used by a ",(0,i.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-view-filter",children:"Meta_ViewFilter"}),"."]}),"\n",(0,i.jsxs)(r.p,{children:["The inputs to the shader will be set by this nodes children, each of which are expected to be one of the Meta_ShaderABC metanodes (e.g. Meta_ShaderVec3f, ",(0,i.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-shader-sampler",children:"Meta_ShaderSampler"})," etc.)."]}),"\n",(0,i.jsx)(r.p,{children:"Expected Implementation Details:-"}),"\n",(0,i.jsxs)(r.p,{children:["When the SourceCode property changes a search for ",(0,i.jsx)(r.code,{children:"#pragma rex <param ..."})," statements within it is initiated, which in turn will extract the expected inputs for the shader. Meta_MaterialPrameter nodes corresponding to these parameters will be created as children of the ",(0,i.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-view-shader",children:"Meta_ViewShader"})," with their defined default values, allowing the user to easily configure the shader from the property panel or a script. If these #pragma's are missing in the source the user will have to manually create the child ",(0,i.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-material-parameter",children:"Meta_MaterialParameter"})," nodes and set their values."]}),"\n",(0,i.jsx)(r.h2,{id:"public-types-documentation",children:"Public Types Documentation"}),"\n",(0,i.jsx)(r.h3,{id:"enum-idx",children:"enum IDX"}),"\n",(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.th,{children:"Enumerator"}),(0,i.jsx)(r.th,{children:"Value"}),(0,i.jsx)(r.th,{children:"Description"})]})}),(0,i.jsxs)(r.tbody,{children:[(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"Idx_SourceCode"}),(0,i.jsx)(r.td,{}),(0,i.jsx)(r.td,{children:"string - the source code of the shader. Usually a full GLSL shader but could be just a GLSL function used by a bigger shader."})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"Idx_Description"}),(0,i.jsx)(r.td,{}),(0,i.jsx)(r.td,{children:"string - friendly description of what the shader does, for presenting to the user."})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"Idx_Target"}),(0,i.jsx)(r.td,{}),(0,i.jsx)(r.td,{children:"Target (int)- determines when the shader runs and which buffers it has access to."})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"Idx_StereoMode"}),(0,i.jsx)(r.td,{}),(0,i.jsx)(r.td,{children:"StereoMode (int) - specifies whether the shader applies to mono or stereo views, or both."})]})]})]}),"\n",(0,i.jsx)(r.p,{children:"Property Index."}),"\n",(0,i.jsx)(r.h3,{id:"enum-stereomode",children:"enum StereoMode"}),"\n",(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.th,{children:"Enumerator"}),(0,i.jsx)(r.th,{children:"Value"}),(0,i.jsx)(r.th,{children:"Description"})]})}),(0,i.jsxs)(r.tbody,{children:[(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"StereoMode_Any"}),(0,i.jsx)(r.td,{}),(0,i.jsxs)(r.td,{children:["The filter is applied regardless of whether stereo is enabled. (Symbols - C: ",(0,i.jsx)(r.code,{children:'"StereoModeAny"'}),", Lua: ",(0,i.jsx)(r.code,{children:"__ViewShader_StereoModeAny"}),")"]})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"StereoMode_MonoOnly"}),(0,i.jsx)(r.td,{}),(0,i.jsxs)(r.td,{children:["The filter is applied only when rendering in mono. (Symbols - C: ",(0,i.jsx)(r.code,{children:'"StereoModeMonoOnly"'}),", Lua: ",(0,i.jsx)(r.code,{children:"__ViewShader_StereoModeMonoOnly"}),")"]})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"StereoMode_StereoOnly"}),(0,i.jsx)(r.td,{}),(0,i.jsxs)(r.td,{children:["The filter is applied only when rendering in stereo. (Symbols - C: ",(0,i.jsx)(r.code,{children:'"StereoModeStereoOnly"'}),", Lua: ",(0,i.jsx)(r.code,{children:"__ViewShader_StereoModeStereoOnly"}),")"]})]})]})]}),"\n",(0,i.jsx)(r.p,{children:"Values for Idx_StereoMode."}),"\n",(0,i.jsx)(r.h3,{id:"enum-target",children:"enum Target"}),"\n",(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.th,{children:"Enumerator"}),(0,i.jsx)(r.th,{children:"Value"}),(0,i.jsx)(r.th,{children:"Description"})]})}),(0,i.jsxs)(r.tbody,{children:[(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"Target_Viewport"}),(0,i.jsx)(r.td,{}),(0,i.jsxs)(r.td,{children:["The filter is applied to each viewport immediately after it is drawn, and can use all buffers. (Symbols - C: ",(0,i.jsx)(r.code,{children:'"TargetViewport"'}),", Lua: ",(0,i.jsx)(r.code,{children:"__ViewShader_TargetViewport"}),")"]})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"Target_ViewportAfterHDR"}),(0,i.jsx)(r.td,{}),(0,i.jsxs)(r.td,{children:["The filter is applied to each viewport after the HDR pass (Symbols - C: ",(0,i.jsx)(r.code,{children:'"TargetViewportAfterHDR"'}),", Lua: ",(0,i.jsx)(r.code,{children:"__ViewShader_TargetViewportAfterHDR"}),")"]})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"Target_Window"}),(0,i.jsx)(r.td,{}),(0,i.jsxs)(r.td,{children:["The filter is applied to the entire window after everything including the GUI is drawn, but can use only the colour buffer. (Symbols - C: ",(0,i.jsx)(r.code,{children:'"TargetWindow"'}),", Lua: ",(0,i.jsx)(r.code,{children:"__ViewShader_TargetWindow"}),")"]})]})]})]}),"\n",(0,i.jsx)(r.p,{children:"Values for Idx_Target."})]})}function h(e={}){const{wrapper:r}={...(0,n.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},28453:(e,r,t)=>{t.d(r,{R:()=>d,x:()=>a});var s=t(96540);const i={},n=s.createContext(i);function d(e){const r=s.useContext(n);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),s.createElement(n.Provider,{value:r},e.children)}}}]);
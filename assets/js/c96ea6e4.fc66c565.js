"use strict";(self.webpackChunkvirtalis_docs=self.webpackChunkvirtalis_docs||[]).push([[2266],{26025:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"visionary-render-programming/scripts/metanodes/metadata","title":"Metadata","description":"Visionary Render allows user data to be stored within the scene. This data is in the form of numbers, arrays of numbers, strings and links. The Lua scripting system can be used to create, access and modify these values. These values are available to all scripts within the loaded scene and are saved as part of the scene.","source":"@site/docs/visionary-render-programming/scripts/metanodes/metadata.mdx","sourceDirName":"visionary-render-programming/scripts/metanodes","slug":"/visionary-render-programming/scripts/metanodes/metadata","permalink":"/visionary-render-programming/scripts/metanodes/metadata","draft":false,"unlisted":false,"editUrl":"https://github.com/virtalis/docs/tree/master/docs/visionary-render-programming/scripts/metanodes/metadata.mdx","tags":[],"version":"current","lastUpdatedAt":1730817102000,"frontMatter":{},"sidebar":"visionaryRenderProgrammingSidebar","previous":{"title":"Material","permalink":"/visionary-render-programming/scripts/metanodes/material"},"next":{"title":"Movie","permalink":"/visionary-render-programming/scripts/metanodes/movie"}}');var r=t(74848),s=t(28453);const i={},o="Metadata",l={},d=[{value:"Example",id:"example",level:2},{value:"Attribute Tables",id:"attribute-tables",level:2},{value:"Example",id:"example-1",level:3}];function c(e){const a={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(a.header,{children:(0,r.jsx)(a.h1,{id:"metadata",children:"Metadata"})}),"\n",(0,r.jsx)(a.p,{children:"Visionary Render allows user data to be stored within the scene. This data is in the form of numbers, arrays of numbers, strings and links. The Lua scripting system can be used to create, access and modify these values. These values are available to all scripts within the loaded scene and are saved as part of the scene."}),"\n",(0,r.jsx)(a.h2,{id:"example",children:"Example"}),"\n",(0,r.jsx)(a.p,{children:"The example below shows a MetaGroup assembly and its children:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-lua",children:"-- Drag/Drop section BEGINS - Do not edit between BEGINS and ENDS.\r\nlocal TableTop = __Script.dragdrop.TableTop\r\n-- Drag/Drop section ENDS\r\n\r\n-- print out the current number of wins, losses, and draws\r\nprint(TableTop.MetaData.wins)\r\nprint(TableTop.MetaData.loses)\r\nprint(TableTop.MetaData.draws)\r\n\r\n-- calculate number of games\r\nlocal total = TableTop.MetaData.wins + TableTop.MetaData.loses + TableTop.MetaData.draws\r\n\r\n-- calculate percentage wins\r\nlocal p_wins = TableTop.MetaData.wins / total\r\n\r\n-- print percentage wins\r\nprint(p_wins)\r\n\r\n-- set the metadata back on the tabletop\r\nTableTop.MetaData.total = total\r\nTableTop.MetaData.percentage_wins = p_wins\n"})}),"\n",(0,r.jsx)(a.p,{children:"Access to these values in the example is through the Metadata assembly but they could be directly modified if they had been dragged and dropped into the script editor individually.\r\nThey can be modified as with any other assembly property."}),"\n",(0,r.jsx)(a.p,{children:"If the scene is saved, then these values are saved with it."}),"\n",(0,r.jsx)(a.p,{children:"This example demonstrates how a script can dynamically create metadata nodes within the scene. It checks for the existence of a MetaData value and if that value is not present it creates it. The script gets the first child of the MetaData assembly then goes through all of its siblings looking at the assembly\u2019s name. The script uses the function vrnode::find to look for an existing node matching the name. If the node does not exist it then calls vrCreateNode with the type of node to create, its name and the parent node. It then initialises that metadata value to 0."}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-lua",children:'-- Drag/Drop section BEGINS - Do not edit between BEGINS and ENDS.\r\nlocal TableTop = __Script.dragdrop.TableTop\r\n-- Drag/Drop section ENDS\r\n\r\nlocal found = nil\r\nlocal name = "goals"\r\n\r\n-- check to see if the goals value already exists\r\nlocal goals = TableTop.MetaData:find(name)\r\n\r\n-- if it doesn\'t exist, create it\r\nif not goals then\r\n   print("Creating goals metadata")\r\n   goals = vrCreateNode("MetaDataInt", name, TableTop.MetaData)\r\n   goals.Value = 0\r\nend\r\n\r\n-- now increment goals by 1\r\ngoals.Value = goals.Value + 1\n'})}),"\n",(0,r.jsx)(a.h2,{id:"attribute-tables",children:"Attribute Tables"}),"\n",(0,r.jsx)(a.p,{children:"The new, more performant attribute tables (generated during CAD import) can also be accessed from Lua."}),"\n",(0,r.jsx)(a.p,{children:"Values can be accessed directly by key as if it was a property of the attribute table node. Keys and values are always stored as strings, but Lua is quite good at transparently converting these to numbers where appropriate."}),"\n",(0,r.jsx)(a.h3,{id:"example-1",children:"Example"}),"\n",(0,r.jsxs)(a.p,{children:["Dragging an assembly (e.g ",(0,r.jsx)(a.code,{children:"048-037-16B"}),") into the script editor allows us to access its attributes:"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-lua",children:'print(Assembly__048_037_16B.Metadata.PTC_WM_ITERATION) --prints "6"\n'})}),"\n",(0,r.jsx)(a.p,{children:"Although not generally encouraged for imported CAD attribute data, Lua can also set these values. E.g. to increment the value we printed before:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-lua",children:"Assembly__048_037_16B.Metadata.PTC_WM_ITERATION = Assembly__048_037_16B.Metadata.PTC_WM_ITERATION + 1\n"})}),"\n",(0,r.jsx)(a.p,{children:"Each key/value pair in an attribute table uses two properties on the node. These can also be controlled to a limited extent by using vrNodeGetValueByIndex and vrNodeSetValueByIndex"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-lua",children:"-- count the total number of properties\r\nlocal propertyCount = vrMetaNodeGetPropertyCount(Assembly__048_037_16B.Metadata:type())\r\nlocal current = 0\r\n\r\n-- print all the keys in the attribute table\r\nwhile current < propertyCount do\r\n  print(vrNodeGetValueByIndex(Assembly__048_037_16B.Metadata, current))\r\n  current = current + 2\r\nend\n"})})]})}function p(e={}){const{wrapper:a}={...(0,s.R)(),...e.components};return a?(0,r.jsx)(a,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,a,t)=>{t.d(a,{R:()=>i,x:()=>o});var n=t(96540);const r={},s=n.createContext(r);function i(e){const a=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function o(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),n.createElement(s.Provider,{value:a},e.children)}}}]);
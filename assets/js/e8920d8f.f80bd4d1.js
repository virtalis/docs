"use strict";(self.webpackChunkvirtalis_docs=self.webpackChunkvirtalis_docs||[]).push([[35107],{10917:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>d,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"visionary-render-programming/reference/c-api/classes/metanodes/meta-scene-lod","title":"Meta_SceneLOD","description":"Module: Metanodes / Definitions","source":"@site/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-scene-lod.mdx","sourceDirName":"visionary-render-programming/reference/c-api/classes/metanodes","slug":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-scene-lod","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-scene-lod","draft":false,"unlisted":false,"editUrl":"https://github.com/virtalis/docs/tree/master/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-scene-lod.mdx","tags":[],"version":"current","lastUpdatedAt":1730817102000,"frontMatter":{"title":"Meta_SceneLOD","summary":"A SceneLOD is a LOD that can be applied to Assembly hierarchies rather than individual models."},"sidebar":"visionaryRenderProgrammingSidebar","previous":{"title":"Meta_SceneList","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-scene-list"},"next":{"title":"Meta_ScrollBarStyle","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-scroll-bar-style"}}');var i=r(74848),t=r(28453);const d={title:"Meta_SceneLOD",summary:"A SceneLOD is a LOD that can be applied to Assembly hierarchies rather than individual models."},a="Meta_SceneLOD",c={},l=[{value:"Public Types",id:"public-types",level:2},{value:"Detailed Description",id:"detailed-description",level:2},{value:"Public Types Documentation",id:"public-types-documentation",level:2},{value:"enum IDX",id:"enum-idx",level:3}];function o(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"meta_scenelod",children:"Meta_SceneLOD"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Module:"})," ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/",children:"Metanodes"})})," ",(0,i.jsx)(n.strong,{children:"/"})," ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/definitions",children:"Definitions"})})]}),"\n",(0,i.jsxs)(n.p,{children:["A SceneLOD is a LOD that can be applied to Assembly hierarchies rather than individual models.  ",(0,i.jsx)(n.a,{href:"#detailed-description",children:"More..."})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"#include <meta_importables.hpp>"})}),"\n",(0,i.jsx)(n.h2,{id:"public-types",children:"Public Types"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Name"})]})}),(0,i.jsx)(n.tbody,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"enum"}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"#enum-idx",children:"IDX"})})," { Idx_Enabled, Idx_InOut, Idx_MeasureFromParent }",(0,i.jsx)("br",{}),"Property index."]})]})})]}),"\n",(0,i.jsx)(n.h2,{id:"detailed-description",children:"Detailed Description"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"struct Meta_SceneLOD;\n"})}),"\n",(0,i.jsx)(n.p,{children:"A SceneLOD is a LOD that can be applied to Assembly hierarchies rather than individual models."}),"\n",(0,i.jsx)(n.p,{children:"Same as a LODNode except its reference point is implicitly the centre of its bounding sphere."}),"\n",(0,i.jsx)(n.h2,{id:"public-types-documentation",children:"Public Types Documentation"}),"\n",(0,i.jsx)(n.h3,{id:"enum-idx",children:"enum IDX"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Enumerator"}),(0,i.jsx)(n.th,{children:"Value"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Idx_Enabled"}),(0,i.jsx)(n.td,{}),(0,i.jsx)(n.td,{children:"bool - When enabled, the child assemblies are drawn according to the InOut distance"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Idx_InOut"}),(0,i.jsx)(n.td,{}),(0,i.jsxs)(n.td,{children:["vec2 - X = distance from view at which this LOD is active, Y = distance at which the LOD is hidden. e.g. (1,5) is visible when the view is between 1 and 5 metres from the object. Use ",(0,i.jsx)(n.code,{children:"Y=-1"})," for infinity (LOD never disappears)"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Idx_MeasureFromParent"}),(0,i.jsx)(n.td,{}),(0,i.jsx)(n.td,{children:"bool - When true, the reference point is the centre of the parent assembly bounding sphere."})]})]})]}),"\n",(0,i.jsx)(n.p,{children:"Property index."})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>d,x:()=>a});var s=r(96540);const i={},t=s.createContext(i);function d(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);
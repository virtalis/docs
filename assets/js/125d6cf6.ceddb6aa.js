"use strict";(self.webpackChunkvirtalis_docs=self.webpackChunkvirtalis_docs||[]).push([[95160],{48011:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"visionary-render-programming/reference/c-api/classes/metanodes/meta-surface-shader-definition","title":"Meta_SurfaceShaderDefinition","description":"Module: Metanodes / Definitions","source":"@site/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-surface-shader-definition.mdx","sourceDirName":"visionary-render-programming/reference/c-api/classes/metanodes","slug":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-surface-shader-definition","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-surface-shader-definition","draft":false,"unlisted":false,"editUrl":"https://github.com/virtalis/docs/tree/master/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-surface-shader-definition.mdx","tags":[],"version":"current","lastUpdatedAt":1730820727000,"frontMatter":{"title":"Meta_SurfaceShaderDefinition","summary":"A SurfaceShaderDefinition represents a shader object, expected to be used by a Meta_SurfaceShaderInstance."},"sidebar":"visionaryRenderProgrammingSidebar","previous":{"title":"Meta_StdMaterial","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-std-material"},"next":{"title":"Meta_SurfaceShaderInstance","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-surface-shader-instance"}}');var t=n(74848),s=n(28453);const a={title:"Meta_SurfaceShaderDefinition",summary:"A SurfaceShaderDefinition represents a shader object, expected to be used by a Meta_SurfaceShaderInstance."},d="Meta_SurfaceShaderDefinition",c={},o=[{value:"Public Types",id:"public-types",level:2},{value:"Public Functions",id:"public-functions",level:2},{value:"Detailed Description",id:"detailed-description",level:2},{value:"Public Types Documentation",id:"public-types-documentation",level:2},{value:"enum Version",id:"enum-version",level:3},{value:"enum IDX",id:"enum-idx",level:3},{value:"Public Functions Documentation",id:"public-functions-documentation",level:2},{value:"Meta_SurfaceShaderDefinition",id:"meta_surfaceshaderdefinition-1",level:3}];function l(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"meta_surfaceshaderdefinition",children:"Meta_SurfaceShaderDefinition"})}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Module:"})," ",(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/",children:"Metanodes"})})," ",(0,t.jsx)(r.strong,{children:"/"})," ",(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/definitions",children:"Definitions"})})]}),"\n",(0,t.jsxs)(r.p,{children:["A SurfaceShaderDefinition represents a shader object, expected to be used by a Meta_SurfaceShaderInstance.  ",(0,t.jsx)(r.a,{href:"#detailed-description",children:"More..."})]}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.code,{children:"#include <meta_division.hpp>"})}),"\n",(0,t.jsx)(r.h2,{id:"public-types",children:"Public Types"}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"Type"}),(0,t.jsx)(r.th,{children:"Name"})]})}),(0,t.jsxs)(r.tbody,{children:[(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"enum"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"#enum-version",children:"Version"})})," { CurrentVersion =1 }"]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"enum"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"#enum-idx",children:"IDX"})})," { Idx_Version, Idx_Filename, Idx_SourceCode }"]})]})]})]}),"\n",(0,t.jsx)(r.h2,{id:"public-functions",children:"Public Functions"}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"Type"}),(0,t.jsx)(r.th,{children:"Name"})]})}),(0,t.jsx)(r.tbody,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"#meta_surfaceshaderdefinition-1",children:"Meta_SurfaceShaderDefinition"})}),"()"]})]})})]}),"\n",(0,t.jsx)(r.h2,{id:"detailed-description",children:"Detailed Description"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-cpp",children:"struct Meta_SurfaceShaderDefinition;\n"})}),"\n",(0,t.jsx)(r.p,{children:"A SurfaceShaderDefinition represents a shader object, expected to be used by a Meta_SurfaceShaderInstance."}),"\n",(0,t.jsxs)(r.p,{children:["The inputs to the shader will be set by this nodes ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-material-parameter",children:"Meta_MaterialParameter"})," children."]}),"\n",(0,t.jsx)(r.p,{children:"Expected Implementation Details:-"}),"\n",(0,t.jsxs)(r.p,{children:["When the SourceCode property changes a search for ",(0,t.jsx)(r.code,{children:"<params>"})," defined within it is initiated, which in turn will extract the expected inputs for the shader. ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-material-parameter",children:"Meta_MaterialParameter"})," nodes corresponding to these parameters will be created as children of the ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-surface-shader-definition",children:"Meta_SurfaceShaderDefinition"})," with their defined default values, allowing the user to easily configure the shader from the property panel or a script. If these #pragma's are missing in the source the user will have to manually create the child ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-material-parameter",children:"Meta_MaterialParameter"})," nodes and set their values."]}),"\n",(0,t.jsx)(r.h2,{id:"public-types-documentation",children:"Public Types Documentation"}),"\n",(0,t.jsx)(r.h3,{id:"enum-version",children:"enum Version"}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"Enumerator"}),(0,t.jsx)(r.th,{children:"Value"}),(0,t.jsx)(r.th,{children:"Description"})]})}),(0,t.jsx)(r.tbody,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"CurrentVersion"}),(0,t.jsx)(r.td,{children:"=1"}),(0,t.jsx)(r.td,{})]})})]}),"\n",(0,t.jsx)(r.h3,{id:"enum-idx",children:"enum IDX"}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"Enumerator"}),(0,t.jsx)(r.th,{children:"Value"}),(0,t.jsx)(r.th,{children:"Description"})]})}),(0,t.jsxs)(r.tbody,{children:[(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Idx_Version"}),(0,t.jsx)(r.td,{}),(0,t.jsx)(r.td,{children:"version number of this metanode, for potential future upgrade hooks"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Idx_Filename"}),(0,t.jsx)(r.td,{}),(0,t.jsx)(r.td,{children:'path to a ".surf" shader file on disk'})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Idx_SourceCode"}),(0,t.jsx)(r.td,{}),(0,t.jsx)(r.td,{children:"source code, populated by the GUI or loaded from a file using the Filename property"})]})]})]}),"\n",(0,t.jsx)(r.h2,{id:"public-functions-documentation",children:"Public Functions Documentation"}),"\n",(0,t.jsx)(r.h3,{id:"meta_surfaceshaderdefinition-1",children:"Meta_SurfaceShaderDefinition"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-cpp",children:"inline Meta_SurfaceShaderDefinition()\n"})})]})}function h(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},28453:(e,r,n)=>{n.d(r,{R:()=>a,x:()=>d});var i=n(96540);const t={},s=i.createContext(t);function a(e){const r=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function d(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),i.createElement(s.Provider,{value:r},e.children)}}}]);
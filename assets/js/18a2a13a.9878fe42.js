"use strict";(self.webpackChunkvirtalis_docs=self.webpackChunkvirtalis_docs||[]).push([[8095],{14069:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>d,toc:()=>c});const d=JSON.parse('{"id":"visionary-render-programming/reference/c-api/classes/metanodes/meta-reflection-probe","title":"Meta_ReflectionProbe","description":"Module: Metanodes / Definitions","source":"@site/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-reflection-probe.mdx","sourceDirName":"visionary-render-programming/reference/c-api/classes/metanodes","slug":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-reflection-probe","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-reflection-probe","draft":false,"unlisted":false,"editUrl":"https://github.com/virtalis/docs/tree/master/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-reflection-probe.mdx","tags":[],"version":"current","frontMatter":{"title":"Meta_ReflectionProbe","summary":"A ReflectionProbe represents a local skybox providing dynamic reflections of the surrounding environment."},"sidebar":"visionaryRenderProgrammingSidebar","previous":{"title":"Meta_RecycleBin","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-recycle-bin"},"next":{"title":"Meta_RenderScene","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-render-scene"}}');var s=n(74848),t=n(28453);const i={title:"Meta_ReflectionProbe",summary:"A ReflectionProbe represents a local skybox providing dynamic reflections of the surrounding environment."},o="Meta_ReflectionProbe",l={},c=[{value:"Public Types",id:"public-types",level:2},{value:"Detailed Description",id:"detailed-description",level:2},{value:"Public Types Documentation",id:"public-types-documentation",level:2},{value:"enum IDX",id:"enum-idx",level:3},{value:"enum ProbeMode",id:"enum-probemode",level:3},{value:"enum ProxyType",id:"enum-proxytype",level:3},{value:"enum UpdateMode",id:"enum-updatemode",level:3}];function a(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"meta_reflectionprobe",children:"Meta_ReflectionProbe"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Module:"})," ",(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/",children:"Metanodes"})})," ",(0,s.jsx)(r.strong,{children:"/"})," ",(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/definitions",children:"Definitions"})})]}),"\n",(0,s.jsxs)(r.p,{children:["A ReflectionProbe represents a local skybox providing dynamic reflections of the surrounding environment.  ",(0,s.jsx)(r.a,{href:"#detailed-description",children:"More..."})]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.code,{children:"#include <meta_division.hpp>"})}),"\n",(0,s.jsx)(r.h2,{id:"public-types",children:"Public Types"}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Type"}),(0,s.jsx)(r.th,{children:"Name"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"enum"}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"#enum-idx",children:"IDX"})})," { Idx_Enabled, Idx_Resolution, Idx_ProxyType, Idx_ProxySize, Idx_Shadows, Idx_UpdateMode, Idx_UpdateAndStoreNow, Idx_Texture, Idx_Mode, Idx_BakedTexture }",(0,s.jsx)("br",{}),"Property index."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"enum"}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"#enum-probemode",children:"ProbeMode"})})," { Probe_Bake, Probe_Custom }",(0,s.jsx)("br",{}),"Values for Idx_Mode."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"enum"}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"#enum-proxytype",children:"ProxyType"})})," { Proxy_None, Proxy_Ellipsoid, Proxy_Box }",(0,s.jsx)("br",{}),"Values for Idx_ProxyType."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"enum"}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"#enum-updatemode",children:"UpdateMode"})})," { Update_Auto, Update_Always, Update_Manual }",(0,s.jsx)("br",{}),"Values for Idx_UpdateMode."]})]})]})]}),"\n",(0,s.jsx)(r.h2,{id:"detailed-description",children:"Detailed Description"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"struct Meta_ReflectionProbe;\n"})}),"\n",(0,s.jsx)(r.p,{children:"A ReflectionProbe represents a local skybox providing dynamic reflections of the surrounding environment."}),"\n",(0,s.jsxs)(r.p,{children:["These are positioned in the scene by adding them as a child of an ",(0,s.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-assembly",children:"Assembly"})," node and transforming that."]}),"\n",(0,s.jsx)(r.h2,{id:"public-types-documentation",children:"Public Types Documentation"}),"\n",(0,s.jsx)(r.h3,{id:"enum-idx",children:"enum IDX"}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Enumerator"}),(0,s.jsx)(r.th,{children:"Value"}),(0,s.jsx)(r.th,{children:"Description"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Idx_Enabled"}),(0,s.jsx)(r.td,{}),(0,s.jsx)(r.td,{children:"bool - If enabled, the light probe cubemap will be dynamically updated and used as an environment map on intersecting scene geometry."})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Idx_Resolution"}),(0,s.jsx)(r.td,{}),(0,s.jsx)(r.td,{children:"int - Resolution of each cubemap face."})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Idx_ProxyType"}),(0,s.jsx)(r.td,{}),(0,s.jsx)(r.td,{children:"ProxyType (int) - The type of proxy geometry to use."})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Idx_ProxySize"}),(0,s.jsx)(r.td,{}),(0,s.jsx)(r.td,{children:"vec3f - The world-space size of the light probes proxy geometry, everything inside this geometry will use the light probes cubemap as an environment map."})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Idx_Shadows"}),(0,s.jsx)(r.td,{}),(0,s.jsx)(r.td,{children:"bool - Whether or not to render shadows into the probe."})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Idx_UpdateMode"}),(0,s.jsx)(r.td,{}),(0,s.jsx)(r.td,{children:"UpdateMode (int) - Describes how the probe should update itself."})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Idx_UpdateAndStoreNow"}),(0,s.jsx)(r.td,{}),(0,s.jsx)(r.td,{children:"bool - Transient property used as an event to trigger the manual rendering of the baked texture. Resets back to false after updating."})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Idx_Texture"}),(0,s.jsx)(r.td,{}),(0,s.jsxs)(r.td,{children:["link - The custom texture used when ",(0,s.jsx)(r.code,{children:"Mode==Probe_Custom"})]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Idx_Mode"}),(0,s.jsx)(r.td,{}),(0,s.jsx)(r.td,{children:"ProbeMode (int) - Whether the probes image is rendered in-engine or comes from an external image file."})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Idx_BakedTexture"}),(0,s.jsx)(r.td,{}),(0,s.jsxs)(r.td,{children:["link - The baked texture used when ",(0,s.jsx)(r.code,{children:"Mode==Probe_Bake"})]})]})]})]}),"\n",(0,s.jsx)(r.p,{children:"Property index."}),"\n",(0,s.jsx)(r.h3,{id:"enum-probemode",children:"enum ProbeMode"}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Enumerator"}),(0,s.jsx)(r.th,{children:"Value"}),(0,s.jsx)(r.th,{children:"Description"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Probe_Bake"}),(0,s.jsx)(r.td,{}),(0,s.jsxs)(r.td,{children:["Render the probe image using the scene geometry. (Symbols - C: ",(0,s.jsx)(r.code,{children:'"Probe_Bake"'}),", Lua: ",(0,s.jsx)(r.code,{children:"__LightProbe_Probe_Bake"}),")"]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Probe_Custom"}),(0,s.jsx)(r.td,{}),(0,s.jsxs)(r.td,{children:["Use the Idx_Texture image instead of rendering. (Symbols - C: ",(0,s.jsx)(r.code,{children:'"Probe_Custom"'}),", Lua: ",(0,s.jsx)(r.code,{children:"__LightProbe_Probe_Custom"}),")"]})]})]})]}),"\n",(0,s.jsx)(r.p,{children:"Values for Idx_Mode."}),"\n",(0,s.jsx)(r.h3,{id:"enum-proxytype",children:"enum ProxyType"}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Enumerator"}),(0,s.jsx)(r.th,{children:"Value"}),(0,s.jsx)(r.th,{children:"Description"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Proxy_None"}),(0,s.jsx)(r.td,{}),(0,s.jsxs)(r.td,{children:["No proxy geometry (Symbols - C: ",(0,s.jsx)(r.code,{children:'"Proxy_None"'}),", Lua: ",(0,s.jsx)(r.code,{children:"__LightProbe_Proxy_None"}),")"]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Proxy_Ellipsoid"}),(0,s.jsx)(r.td,{}),(0,s.jsxs)(r.td,{children:["Ellipsoid proxy (Symbols - C: ",(0,s.jsx)(r.code,{children:'"Proxy_Ellipsoid"'}),", Lua: ",(0,s.jsx)(r.code,{children:"__LightProbe_Proxy_Ellipsoid"}),")"]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Proxy_Box"}),(0,s.jsx)(r.td,{}),(0,s.jsxs)(r.td,{children:["Box proxy (Symbols - C: ",(0,s.jsx)(r.code,{children:'"Proxy_Box"'}),", Lua: ",(0,s.jsx)(r.code,{children:"__LightProbe_Proxy_Box"}),")"]})]})]})]}),"\n",(0,s.jsx)(r.p,{children:"Values for Idx_ProxyType."}),"\n",(0,s.jsx)(r.h3,{id:"enum-updatemode",children:"enum UpdateMode"}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Enumerator"}),(0,s.jsx)(r.th,{children:"Value"}),(0,s.jsx)(r.th,{children:"Description"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Update_Auto"}),(0,s.jsx)(r.td,{}),(0,s.jsxs)(r.td,{children:["Update when the probe, or something in the scene changes; moves, is enabled/disabled etc. (Symbols - C: ",(0,s.jsx)(r.code,{children:'"Update_Auto"'}),", Lua: ",(0,s.jsx)(r.code,{children:"__LightProbe_Update_Auto"}),")"]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Update_Always"}),(0,s.jsx)(r.td,{}),(0,s.jsxs)(r.td,{children:["Continually re-draw the cubemap regardless of whether or not anything changes; useful if the change isn't being picked up. (Symbols - C: ",(0,s.jsx)(r.code,{children:'"Update_Always"'}),", Lua: ",(0,s.jsx)(r.code,{children:"__LightProbe_Update_Always"}),")"]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Update_Manual"}),(0,s.jsx)(r.td,{}),(0,s.jsxs)(r.td,{children:['Only update when "UpdateAndStoreNow" property is set to true, which causes it to draw the cubemap and save the result in the texture pointed to by the "Texture" property (it will create one if null), then it sets the "UpdateAndStoreNow" property back to false. On load if this mode is active the probe will just use the content of the linked "Texture". (Symbols - C: ',(0,s.jsx)(r.code,{children:'"Update_Manual"'}),", Lua: ",(0,s.jsx)(r.code,{children:"__LightProbe_Update_Manual"}),")"]})]})]})]}),"\n",(0,s.jsx)(r.p,{children:"Values for Idx_UpdateMode."})]})}function h(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},28453:(e,r,n)=>{n.d(r,{R:()=>i,x:()=>o});var d=n(96540);const s={},t=d.createContext(s);function i(e){const r=d.useContext(t);return d.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),d.createElement(t.Provider,{value:r},e.children)}}}]);
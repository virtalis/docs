"use strict";(self.webpackChunkvirtalis_docs=self.webpackChunkvirtalis_docs||[]).push([[224],{35252:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"visionary-render-programming/reference/c-api/classes/metanodes/meta-annotation","title":"Meta_Annotation","description":"Module: Metanodes / Definitions","source":"@site/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-annotation.mdx","sourceDirName":"visionary-render-programming/reference/c-api/classes/metanodes","slug":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-annotation","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-annotation","draft":false,"unlisted":false,"editUrl":"https://github.com/virtalis/docs/tree/master/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-annotation.mdx","tags":[],"version":"current","frontMatter":{"title":"Meta_Annotation","summary":"An Annotation node is a method of associating information with an object in the scene."},"sidebar":"visionaryRenderProgrammingSidebar","previous":{"title":"Meta_AnnotationStyles","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-annotation-styles"},"next":{"title":"Meta_ApplicationMenuContainer","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-application-menu-container"}}');var s=t(74848),o=t(28453);const r={title:"Meta_Annotation",summary:"An Annotation node is a method of associating information with an object in the scene."},a="Meta_Annotation",d={},c=[{value:"Public Types",id:"public-types",level:2},{value:"Detailed Description",id:"detailed-description",level:2},{value:"Public Types Documentation",id:"public-types-documentation",level:2},{value:"enum IDX",id:"enum-idx",level:3}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"meta_annotation",children:"Meta_Annotation"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Module:"})," ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/",children:"Metanodes"})})," ",(0,s.jsx)(n.strong,{children:"/"})," ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/definitions",children:"Definitions"})})]}),"\n",(0,s.jsxs)(n.p,{children:["An Annotation node is a method of associating information with an object in the scene.  ",(0,s.jsx)(n.a,{href:"#detailed-description",children:"More..."})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"#include <meta_annotation.hpp>"})}),"\n",(0,s.jsx)(n.h2,{id:"public-types",children:"Public Types"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Name"})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"enum"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#enum-idx",children:"IDX"})})," { Idx_Enabled, Idx_TargetAssembly, Idx_DefaultViewpoint, Idx_CommentsVisible, Idx_CreatedBy, Idx_Position, Idx_Rotation, Idx_EnterSnapShot, Idx_LeaveSnapShot }"]})]})})]}),"\n",(0,s.jsx)(n.h2,{id:"detailed-description",children:"Detailed Description"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"struct Meta_Annotation;\n"})}),"\n",(0,s.jsx)(n.p,{children:"An Annotation node is a method of associating information with an object in the scene."}),"\n",(0,s.jsx)(n.p,{children:"It can contain multiple viewpoints, comments, and object states, all of which are applied when the annotation becomes active. Generally created by using the Review user interface, annotations can also be data driven, automatically documenting scene objects according to the requirements of the script or plugin writer."}),"\n",(0,s.jsxs)(n.p,{children:["Annotations can also be controlled by the ",(0,s.jsx)(n.code,{children:"vrAnnotation*"})," family of Lua functions."]}),"\n",(0,s.jsx)(n.h2,{id:"public-types-documentation",children:"Public Types Documentation"}),"\n",(0,s.jsx)(n.h3,{id:"enum-idx",children:"enum IDX"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Enumerator"}),(0,s.jsx)(n.th,{children:"Value"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_Enabled"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"bool - Enabled state of this annotation."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_TargetAssembly"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"link - Assembly that is being annotated. The annotation is positioned relative to this assembly."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_DefaultViewpoint"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"link - Assembly (viewpoint) to fly to by default when the annotation is activated."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_CommentsVisible"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"bool - Whether or not to display the comments associated with this annotation."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_CreatedBy"}),(0,s.jsx)(n.td,{}),(0,s.jsxs)(n.td,{children:["string - Name of the user who created this annotation. This defaults to the value of the ",(0,s.jsx)(n.code,{children:"Tools/Annotation/Comments/Author"})," setting, which itself defaults to the user's system username."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_Position"}),(0,s.jsx)(n.td,{}),(0,s.jsxs)(n.td,{children:["vec3 - The position of the annotation relative to the ",(0,s.jsx)(n.code,{children:"TargetAssembly"})," transform."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_Rotation"}),(0,s.jsx)(n.td,{}),(0,s.jsxs)(n.td,{children:["vec3 - The rotation of the annotation relative to the ",(0,s.jsx)(n.code,{children:"TargetAssembly"})," transform."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_EnterSnapShot"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_LeaveSnapShot"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{})]})]})]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var i=t(96540);const s={},o=i.createContext(s);function r(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);
"use strict";(self.webpackChunkvirtalis_docs=self.webpackChunkvirtalis_docs||[]).push([[96633],{8375:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>n,toc:()=>o});const n=JSON.parse('{"id":"visionary-render-programming/reference/c-api/modules/metanodes/definitions","title":"Definitions","description":"Module: Metanodes","source":"@site/docs/visionary-render-programming/reference/c-api/modules/metanodes/definitions.mdx","sourceDirName":"visionary-render-programming/reference/c-api/modules/metanodes","slug":"/visionary-render-programming/reference/c-api/modules/metanodes/definitions","permalink":"/visionary-render-programming/reference/c-api/modules/metanodes/definitions","draft":false,"unlisted":false,"editUrl":"https://github.com/virtalis/docs/tree/master/docs/visionary-render-programming/reference/c-api/modules/metanodes/definitions.mdx","tags":[],"version":"current","lastUpdatedAt":1730820727000,"frontMatter":{"title":"Definitions","summary":"Listing of metanode structures, describing their purpose and listing their property index and any other supplementary enumerations."},"sidebar":"visionaryRenderProgrammingSidebar","previous":{"title":"Metanodes","permalink":"/visionary-render-programming/reference/c-api/modules/metanodes/"},"next":{"title":"Migrations","permalink":"/visionary-render-programming/reference/c-api/modules/metanodes/migrations"}}');var t=s(74848),a=s(28453);const i={title:"Definitions",summary:"Listing of metanode structures, describing their purpose and listing their property index and any other supplementary enumerations."},c="Definitions",d={},o=[{value:"Classes",id:"classes",level:2},{value:"Defines",id:"defines",level:2},{value:"Detailed Description",id:"detailed-description",level:2},{value:"Macros Documentation",id:"macros-documentation",level:2},{value:"define vrtree_API",id:"define-vrtree_api",level:3}];function l(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"definitions",children:"Definitions"})}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Module:"})," ",(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/",children:"Metanodes"})})]}),"\n",(0,t.jsxs)(r.p,{children:["Listing of metanode structures, describing their purpose and listing their property index and any other supplementary enumerations.  ",(0,t.jsx)(r.a,{href:"#detailed-description",children:"More..."})]}),"\n",(0,t.jsx)(r.h2,{id:"classes",children:"Classes"}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"Type"}),(0,t.jsx)(r.th,{children:"Name"})]})}),(0,t.jsxs)(r.tbody,{children:[(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-animation",children:"Meta_Animation"})})," ",(0,t.jsx)("br",{}),"An animation is a collection of keyframes and/or actions to apply to a target node."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-animation-action",children:"Meta_AnimationAction"})})," ",(0,t.jsx)("br",{}),"Animation keyframes for bool, int, float, double and world float properties."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-animation-frame-prs",children:"Meta_AnimationFramePRS"})})," ",(0,t.jsx)("br",{}),"A PRS frame is a keyframe with a position, rotation and scale at a specified time."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-animation-link",children:"Meta_AnimationLink"})})," ",(0,t.jsx)("br",{}),"An animation link permits a ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-animation",children:"Meta_Animation"})," node to be inserted into a track at a specified time. This level of indirection is necessary in order to reuse a single animation in multiple places."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-annotation",children:"Meta_Annotation"})})," ",(0,t.jsx)("br",{}),"An Annotation node is a method of associating information with an object in the scene."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-annotation-comment",children:"Meta_AnnotationComment"})})," ",(0,t.jsx)("br",{}),"An AnnotationComment contains a text comment made on an Annotation."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-annotation-list",children:"Meta_AnnotationList"})})," ",(0,t.jsx)("br",{}),"An AnnotationList node is a container for multiple Annotation nodes."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-annotation-styles",children:"Meta_AnnotationStyles"})})," ",(0,t.jsx)("br",{}),"AnnotationStyles is a container for GUI style nodes, applied to annotations. These are usually ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-model-marker-style",children:"Meta_ModelMarkerStyle"})," or similar and are saved with the scene so are customisable."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-application-menu-container",children:"Meta_ApplicationMenuContainer"})})," ",(0,t.jsx)("br",{}),"ApplicationMenuContainer is a container of ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-application-menu-entry",children:"Meta_ApplicationMenuEntry"})," nodes."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-application-menu-custom",children:"Meta_ApplicationMenuCustom"})})," ",(0,t.jsx)("br",{}),"An ApplicationMenuCustom is used by context menus to populate the menu with dynamic data (for example, a list of nodes in the tree)"]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-application-menu-entry",children:"Meta_ApplicationMenuEntry"})})," ",(0,t.jsx)("br",{}),"An ApplicationMenuEntry is a menu entry that can appear in the context menu or main file menu."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-application-menu-header",children:"Meta_ApplicationMenuHeader"})})," ",(0,t.jsx)("br",{}),"An ApplicationMenuHeader inserts a header before its sibling items, using the name of the node as the caption."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-application-menu-separator",children:"Meta_ApplicationMenuSeparator"})})," ",(0,t.jsx)("br",{}),"An ApplicationMenuSeparator inserts a separator into a context menu or main menu."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-ar-marker",children:"Meta_ARMarker"})})})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-assembly",children:"Meta_Assembly"})})," ",(0,t.jsx)("br",{}),"An Assembly is the main node type in the scenegraph, used to build the transform hierarchy of the scene."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-assembly-prs",children:"Meta_AssemblyPRS"})})," ",(0,t.jsx)("br",{}),"An AssemblyPRS node is used to store hints for matrix edit gui controls."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-assembly-track",children:"Meta_AssemblyTrack"})})," ",(0,t.jsx)("br",{}),"An assembly track is a collection of animations to apply to the transform of a specified node Valid child types: ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-animation",children:"Meta_Animation"}),", ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-animation-link",children:"Meta_AnimationLink"}),"."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-audio-buffer",children:"Meta_AudioBuffer"})})," ",(0,t.jsx)("br",{}),"An AudioBuffer represents sound data that can be played by multiple sources."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-audio-sound",children:"Meta_AudioSound"})})," ",(0,t.jsx)("br",{}),'An AudioSound represents a "one-shot" playback method for ',(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-audio-buffer",children:"Meta_AudioBuffer"})," nodes."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-audio-stream",children:"Meta_AudioStream"})})," ",(0,t.jsx)("br",{}),"A container for AudioStreamBuffer nodes."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-audio-stream-buffer",children:"Meta_AudioStreamBuffer"})})," ",(0,t.jsx)("br",{}),"A packet of audio data."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-audio-track",children:"Meta_AudioTrack"})})," ",(0,t.jsx)("br",{}),"An AudioTrack provides full control over playback and looping of data in a ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-audio-buffer",children:"Meta_AudioBuffer"}),"."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-billboard",children:"Meta_Billboard"})})," ",(0,t.jsx)("br",{}),"A Billboard allows its children to be rendered in various alignment and sizing modes."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-bone",children:"Meta_Bone"})})," ",(0,t.jsx)("br",{}),"A Bone is a component of an inverse kinematics (IK) system."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-buffered-stack",children:"Meta_BufferedStack"})})," ",(0,t.jsx)("br",{}),"A BufferedStack is a stack that renders its contents into a texture internally to improve performance."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-button",children:"Meta_Button"})})," ",(0,t.jsx)("br",{}),"A Button is a clickable GUI object which can trigger actions via ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-event-handler",children:"Meta_EventHandler"})," children, or a ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-gui-property-link",children:"Meta_GUIPropertyLink"}),"."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-button-group",children:"Meta_ButtonGroup"})})," ",(0,t.jsx)("br",{}),"A ButtonGroup is an invisible object referenced by ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-button",children:"Meta_Button"})," to specify radio groups (mutually exclusive toggles)"]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-camera",children:"Meta_Camera"})})," ",(0,t.jsx)("br",{}),"A Camera represents a body position in the world, which viewports can render from."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-camera-collision-guard",children:"Meta_CameraCollisionGuard"})})," ",(0,t.jsx)("br",{}),"A CameraCollisionGuard prevents script event dispatch unless the camera is within Radius metres of the parent assembly."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-chroma-key-texture",children:"Meta_ChromaKeyTexture"})})," ",(0,t.jsx)("br",{}),"A ChromaKey texture can beused to change a colour in a ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-movie",children:"Meta_Movie"})," or ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-texture",children:"Meta_Texture"})," to some other colour (which can be transparent)."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-collision",children:"Meta_Collision"})})," ",(0,t.jsx)("br",{}),"A Collision node adds greater control over object collisions in the scene and allows the dispatching of script events in response to collisions."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-collision-guard",children:"Meta_CollisionGuard"})})," ",(0,t.jsx)("br",{}),"A CollisionGuard prevents script event dispatch unless the specified assembly is the one being collided with."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-coloured-button-style",children:"Meta_ColouredButtonStyle"})})," ",(0,t.jsx)("br",{}),"A ColouredButtonStyle provides flat ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-button",children:"Meta_Button"})," colours as well as button content layout controls."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-coloured-label-style",children:"Meta_ColouredLabelStyle"})})})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-coloured-panel-style",children:"Meta_ColouredPanelStyle"})})," ",(0,t.jsx)("br",{}),"A ColouredPanelStyle provides a background colour for a panel or stack."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-coloured-separator-style",children:"Meta_ColouredSeparatorStyle"})})," ",(0,t.jsx)("br",{}),"A ColouredSeparatorStyle provides styling options for ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-separator",children:"Meta_Separator"}),"."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-component-track",children:"Meta_ComponentTrack"})})," ",(0,t.jsx)("br",{}),"A component track is a collection of animations to apply to a component of a vector property."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-container",children:"Meta_Container"})})," ",(0,t.jsx)("br",{}),"A Container is a generic container for other nodes."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-convex-decomposition",children:"Meta_ConvexDecomposition"})})," ",(0,t.jsx)("br",{}),"A ConvexDecomposition is used to store pre-computed convex decomposition data as part of the scene."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-deformable",children:"Meta_Deformable"})})})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-dimension",children:"Meta_Dimension"})})," ",(0,t.jsx)("br",{}),"A Dimension references two ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-measuring-point",children:"Meta_MeasuringPoint"})," nodes and calculates the distances between them. It also provides scene visuals depicting the dimensions."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-dummy-hmd-viewport",children:"Meta_DummyHMDViewport"})})," ",(0,t.jsx)("br",{}),"A dummy viewport type that passes through the image for testing."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-dynamic-section",children:"Meta_DynamicSection"})})," ",(0,t.jsx)("br",{}),"A DynamicSection is a cutting plane that can be placed in the scene."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-dynamic-section-list",children:"Meta_DynamicSectionList"})})," ",(0,t.jsx)("br",{}),"A container of Dynamic Sections."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-environment",children:"Meta_Environment"})})," ",(0,t.jsx)("br",{}),"[Meta_Environment contains a background scene and separates it from the rest of the data, so that an imported CAD model can be dropped into a variety of ready-made environments."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-event-function",children:"Meta_EventFunction"})})," ",(0,t.jsx)("br",{}),"An EventFunction is attached to a ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-event-handler",children:"Meta_EventHandler"}),", and refers to a named function registered via the C API."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-event-handler",children:"Meta_EventHandler"})})," ",(0,t.jsx)("br",{}),"An EventHandler can be attached to any other node to trigger script execution."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-event-script",children:"Meta_EventScript"})})," ",(0,t.jsx)("br",{}),"An EventScript is attached to a ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-event-handler",children:"Meta_EventHandler"}),", and contains Lua script to execute when the event is triggered."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-eyes",children:"Meta_Eyes"})})," ",(0,t.jsx)("br",{}),"An Eyes node allows tweaks to tracked setups to improve the viewing experience."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-filter",children:"Meta_Filter"})})," ",(0,t.jsx)("br",{}),"A Filter prevents itself and any descendants from appearing in the Scenes tree view."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-font",children:"Meta_Font"})})," ",(0,t.jsx)("br",{}),"A Font provides text rendering for Buttons and other UI elements that display text."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-font-list",children:"Meta_FontList"})})," ",(0,t.jsx)("br",{}),"A FontList is automatically populated with instances of ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-typeface",children:"Meta_Typeface"})," for every font detected on the system."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-geo-group",children:"Meta_GeoGroup"})})," ",(0,t.jsx)("br",{}),"A GeoGroup contains a collection of polygons which share a single material. It may contain multiple ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-mesh",children:"Meta_Mesh"})," nodes."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-gesture",children:"Meta_Gesture"})})," ",(0,t.jsx)("br",{}),"A Gesture contains data for matching a gesture or pose."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-gesture-guard",children:"Meta_GestureGuard"})})," ",(0,t.jsx)("br",{}),"A GestureGuard prevents script event dispatch unless the specified gesture is matched."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-gradient",children:"Meta_Gradient"})})," ",(0,t.jsx)("br",{}),"A Gradient is a type of 2D texture that is automatically generated by adding ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-gradient-point",children:"Meta_GradientPoint"})," children."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-gradient-panel-style",children:"Meta_GradientPanelStyle"})})," ",(0,t.jsx)("br",{}),"A GradientPanelStyle provides a simple background gradient for a panel or stack."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-gradient-point",children:"Meta_GradientPoint"})})," ",(0,t.jsx)("br",{}),"A GradientPoint is used to describe a colour point in a ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-gradient",children:"Meta_Gradient"}),"."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-group",children:"Meta_Group"})})," ",(0,t.jsx)("br",{}),"A Group can contain any number of child ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-group-member",children:"Meta_GroupMember"})," or ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-snapshot",children:"Meta_Snapshot"})," nodes, and a ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-meta-data-int",children:"Meta_MetaDataInt"})," for every metanode represented by one or more group members."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-group-list",children:"Meta_GroupList"})})," ",(0,t.jsx)("br",{}),"A GroupList is a container intended to be a direct child of the Scenes node. It contains ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-group",children:"Meta_Group"})," nodes."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-group-member",children:"Meta_GroupMember"})})," ",(0,t.jsx)("br",{}),"A GroupMember is a child of a ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-group",children:"Meta_Group"})," and links to a node that is a member of the group."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-gui",children:"Meta_GUI"})})," ",(0,t.jsx)("br",{}),"A GUI is a container for other GUI elements such as buttons and stacks. It controls how the GUI is drawn."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-gui-group-hint",children:"Meta_GuiGroupHint"})})," ",(0,t.jsx)("br",{}),"Contains the description of a Gui layout group - that is, a collection of controls whose interfaces should display based on a value condition or a rollout button. If a property is to be a member of the group, it should be linked to by the GuiHints group property. Groups can be linked to other groups, in which case they are sub-groups."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-gui-hints",children:"Meta_GuiHints"})})," ",(0,t.jsx)("br",{}),"Extra GUI hints, if further hints for a user interface are desired. e.g. its caption, help topic, tooltip, group layout, etc. Not specifically related to the usage of the property, but hints as to how it is intended to be seen by a user. A UI implementation is free to ignore this if it wants..."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-gui-hints-link",children:"Meta_GuiHintsLink"})})," ",(0,t.jsx)("br",{}),"Contains a link to a gui hints node. This can be placed on a node or property to specify that it should use the hints of another node/property to avoid the need to copy large amounts of hints."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-gui-material",children:"Meta_GUIMaterial"})})," ",(0,t.jsx)("br",{}),"A GUIMaterial is a material that can specify its draw layer, so it may appear above or below other types of object."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-gui-option-hint",children:"Meta_GuiOptionHint"})})," ",(0,t.jsx)("br",{}),'Contains the description of an "option" - a value that can be used in an int property. This effectively describes the contents of multiple choice controls (e.g. dropdown boxes) when the value of the property would only make sense as one of a number of preset values. These should be placed under a ',(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-gui-hints",children:"Meta_GuiHints"})," node."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-gui-order-hint",children:"Meta_GuiOrderHint"})})," ",(0,t.jsx)("br",{}),"Contains a link to a child node of the owner of the GuiHints. There may be many of these under a ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-gui-hints",children:"Meta_GuiHints"})," node, a UI should prioritise its display so that properties of the linked item are displayed in the order that the GuiOrderHints appear in the tree, followed by any other properties not referenced by GuiOrderHints. For example, if Assembly::Enabled should be first, followed by Assembly::Transform, there would be two GuiOrderHints, the first linking to the Enabled MetaValue, the second to the Transform MetaValue. Node semantics specifying these nodes should override any ordering in the metanode semantics."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-gui-property-link",children:"Meta_GUIPropertyLink"})})," ",(0,t.jsx)("br",{}),"A GUIPropertyLink is a simple way of connecting ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-button",children:"Meta_Button"}),", [Meta_Slider, and [Meta_ScrollBar toggle / change events to other node properties without using a ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-event-handler",children:"Meta_EventHandler"}),". This is a two-way link."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-haptic-device",children:"Meta_HapticDevice"})})," ",(0,t.jsx)("br",{}),"A HapticDevice represents a connection to a device such as a Phantom Omni. Only one instance is required in a scene."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-haptic-node",children:"Meta_HapticNode"})})," ",(0,t.jsx)("br",{}),"A HapticNode is added to ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-assembly",children:"Meta_Assembly"})," much the same way as ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-collision",children:"Meta_Collision"}),", and allows the assembly to be felt by haptic devices."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-hololens-remoting-viewport",children:"Meta_HololensRemotingViewport"})})})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-image-marker-style",children:"Meta_ImageMarkerStyle"})})," ",(0,t.jsx)("br",{}),"An ImageMarkerStyle provides styling for a marker, using a custom texture instead of the default sphere."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-image-panel",children:"Meta_ImagePanel"})})," ",(0,t.jsx)("br",{}),"An ImagePanel displays an image on a GUI in the scene."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-index-prim",children:"Meta_IndexPrim"})})," ",(0,t.jsx)("br",{}),"An IndexPrim indexes vertices from ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-vertex-attrib",children:"Meta_VertexAttrib"})," siblings."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-key-code-guard",children:"Meta_KeyCodeGuard"})})," ",(0,t.jsx)("br",{}),"A KeyCodeGuard prevents script event dispatch unless the specified key is pressed."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-key-state-guard",children:"Meta_KeyStateGuard"})})," ",(0,t.jsx)("br",{}),"A KeyStateGuard prevents script event dispatch unless the key is currently being pressed."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-label",children:"Meta_Label"})})," ",(0,t.jsx)("br",{}),"A Label is a GUI object that displays some text."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-library",children:"Meta_Library"})})," ",(0,t.jsx)("br",{}),"A Library provides an organisational structure for assets such as models and materials in a scene."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-library-list",children:"Meta_LibraryList"})})," ",(0,t.jsx)("br",{}),"The LibraryList represents the Libraries node in the tree."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-light",children:"Meta_Light"})})," ",(0,t.jsx)("br",{}),"A Light lights the scene. It is intended to be a child of a ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-assembly",children:"Meta_Assembly"})," so it can be positioned in the scene."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-light-list",children:"Meta_LightList"})})," ",(0,t.jsx)("br",{}),"A LightList contains ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-light",children:"Meta_Light"})," nodes and is intended to exist on the Scenes root node for the purposes of being saved into scene overlay files."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-light-probe",children:"Meta_LightProbe"})})," ",(0,t.jsx)("br",{}),"A LightProbe represents a local skybox providing dynamic reflections of the surrounding environment."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-lod",children:"Meta_LOD"})})," ",(0,t.jsx)("br",{}),"A LOD represents one level of detail of a model, rendered based on its distance from the viewer. It contains ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-geo-group",children:"Meta_GeoGroup"})," children."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-look-at",children:"Meta_LookAt"})})," ",(0,t.jsx)("br",{}),"A LookAt node contains settings and child ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-look-at-target",children:"Meta_LookAtTarget"})," nodes, required when a ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-assembly",children:"Meta_Assembly"})," contraint type is set to LookAt."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-look-at-target",children:"Meta_LookAtTarget"})})," ",(0,t.jsx)("br",{}),"A LookAtTarget specifies a node for LookAt to look at."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-marker",children:"Meta_Marker"})})," ",(0,t.jsx)("br",{}),"A Marker is a 3D icon used to represent a clickable / draggable object in the scene - defaults to a sphere."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-material-argument",children:"Meta_MaterialArgument"})})," ",(0,t.jsx)("br",{}),"A MaterialArgument defines an argument for a ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-material-parameter",children:"Meta_MaterialParameter"}),"."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-material-parameter",children:"Meta_MaterialParameter"})})," ",(0,t.jsx)("br",{}),"A MaterialParameter defines a single MDL function input."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-material-selector",children:"Meta_MaterialSelector"})})," ",(0,t.jsx)("br",{}),"A MaterialSelector gathers all materials in the scene and presents them in a list."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-measuring-point",children:"Meta_MeasuringPoint"})})," ",(0,t.jsx)("br",{}),"A MeasuringPoint is a point in space, used by a ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-dimension",children:"Meta_Dimension"})," to perform measurements."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-mesh",children:"Meta_Mesh"})})," ",(0,t.jsx)("br",{}),"A Mesh is a collection of vertices and lists which can be rendered as a polyhedral object."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-message-queue",children:"Meta_MessageQueue"})})})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-meta-base",children:"Meta_MetaBase"})})," ",(0,t.jsx)("br",{}),"If a MetaNode has a MetaBase child, the name of that child is the name of another metanode that this one is a clone of."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-meta-data-bool",children:"Meta_MetaDataBool"})})," ",(0,t.jsx)("br",{}),"A MetaDataBool stores a boolean value."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-meta-data-colour",children:"Meta_MetaDataColour"})})," ",(0,t.jsx)("br",{}),"A MetaDataColour stores a colour (like a ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-meta-data-float3",children:"Meta_MetaDataFloat3"}),", but with colour semantics on the value property)"]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-meta-data-double",children:"Meta_MetaDataDouble"})})," ",(0,t.jsx)("br",{}),"A MetaDataDouble stores a double-precision floating point value."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-meta-data-double3",children:"Meta_MetaDataDouble3"})})," ",(0,t.jsx)("br",{}),"A MetaDataDouble3 stores three double-precision floating point values."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-meta-data-double4",children:"Meta_MetaDataDouble4"})})," ",(0,t.jsx)("br",{}),"A MetaDataDouble4 stores four double-precision floating point values."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-meta-data-float",children:"Meta_MetaDataFloat"})})," ",(0,t.jsx)("br",{}),"A MetaDataFloat stores a single floating point value."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-meta-data-float2",children:"Meta_MetaDataFloat2"})})," ",(0,t.jsx)("br",{}),"A MetaDataFloat2 stores two floating point values."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-meta-data-float3",children:"Meta_MetaDataFloat3"})})," ",(0,t.jsx)("br",{}),"A MetaDataFloat3 stores three floating point values."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-meta-data-float4",children:"Meta_MetaDataFloat4"})})," ",(0,t.jsx)("br",{}),"A MetaDataFloat4 stores four floating point values."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-meta-data-int",children:"Meta_MetaDataInt"})})," ",(0,t.jsx)("br",{}),"A MetaDataInt stores a single integer value."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-meta-data-int2",children:"Meta_MetaDataInt2"})})," ",(0,t.jsx)("br",{}),"A MetaDataInt2 stores two integer values."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-meta-data-link",children:"Meta_MetaDataLink"})})," ",(0,t.jsx)("br",{}),"A MetaDataLink stores a direct link to another node anywhere in the tree."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-meta-data-property-mask",children:"Meta_MetaDataPropertyMask"})})," ",(0,t.jsx)("br",{}),"A MetaDataPropertyMask contains is a 256-bit value to store bits corresponding to up to 256 properties of a node."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-meta-data-string",children:"Meta_MetaDataString"})})," ",(0,t.jsx)("br",{}),"A MetaDataString stores a string."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-meta-group",children:"Meta_MetaGroup"})})," ",(0,t.jsx)("br",{}),"A MetaGroup defines a group of metadata and associated metadata types."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-meta-node",children:"Meta_MetaNode"})})," ",(0,t.jsx)("br",{}),"A MetaNode provides a description of other metanodes."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-meta-root",children:"Meta_MetaRoot"})})," ",(0,t.jsx)("br",{}),"The MetaRoot node contains all the metanode definition nodes."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-meta-value",children:"Meta_MetaValue"})})," ",(0,t.jsx)("br",{}),"A MetaValue provides a description of a property on a metanode."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-model",children:"Meta_Model"})})," ",(0,t.jsx)("br",{}),"A Model represents instancable geometry, and is a container for collections of ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-lod",children:"Meta_LOD"})," or ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-geo-group",children:"Meta_GeoGroup"})," nodes."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-model-marker-style",children:"Meta_ModelMarkerStyle"})})," ",(0,t.jsx)("br",{}),"A ModelMarkerStyle provides styling for a marker, using a custom model instead of the default sphere."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-movie",children:"Meta_Movie"})})," ",(0,t.jsx)("br",{}),"A Movie represents a video playback controller, which can be used like a ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-texture",children:"Meta_Texture"})," for display on materials and other surfaces."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-net-player-texture",children:"Meta_NetPlayerTexture"})})," ",(0,t.jsx)("br",{}),"A NetPlayerTexture is video streaming player from a remote Visionary Render application."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-node-selector",children:"Meta_NodeSelector"})})})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-ocean",children:"Meta_Ocean"})})," ",(0,t.jsx)("br",{}),"An Ocean draws water."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-ocean-rotor-wash",children:"Meta_OceanRotorWash"})})," ",(0,t.jsx)("br",{}),"An OceanRotorWash node draws rotor wash when an assembly hovers above the ocean surface."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-ocean-wake",children:"Meta_OceanWake"})})," ",(0,t.jsx)("br",{}),"An OceanWake draws wakes behind vessels moving across the ocean surface."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-oculus-viewport",children:"Meta_OculusViewport"})})," ",(0,t.jsx)("br",{}),"An OculusViewport represents a viewport occupying a specified rectangle of a window (range 0 to 1) which renders the 3D scene using the projection and distortion calculated by the Oculus SDK."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-open-vr-viewport",children:"Meta_OpenVRViewport"})})," ",(0,t.jsx)("br",{}),"An OpenVRViewport represents a viewport occupying a specified rectangle of a window (range 0 to 1) which renders the 3D scene using the projection and distortion calculated by the OpenVR SDK."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-open-xr-viewport",children:"Meta_OpenXRViewport"})})," ",(0,t.jsx)("br",{}),"An OpenXRViewport represents a viewport occupying a specified rectangle of a window (range 0 to 1) which renders the 3D scene using the projection and distortion calculated by the OpenXR SDK."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-op-progress",children:"Meta_OpProgress"})})})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-op-progress-yield",children:"Meta_OpProgressYield"})})})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-panel",children:"Meta_Panel"})})," ",(0,t.jsx)("br",{}),"A Panel is a fixed size container for GUI items."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-particle-system",children:"Meta_ParticleSystem"})})," ",(0,t.jsx)("br",{}),"A ParticleSystem emits particles. It gets its transform from a parent ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-assembly",children:"Meta_Assembly"}),"."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-permission",children:"Meta_Permission"})})," ",(0,t.jsx)("br",{}),"A Permission represents the user's ability to perform a restricted task."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-physical-screen",children:"Meta_PhysicalScreen"})})," ",(0,t.jsx)("br",{}),"A PhysicalScreen describes the physical location of a projection screen as part of a view configuration."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-pivot",children:"Meta_Pivot"})})," ",(0,t.jsx)("br",{}),"A Pivot modifies the origin point of an assembly."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-point-cloud",children:"Meta_PointCloud"})})," ",(0,t.jsx)("br",{}),"A PointCloud renders a file containing points, generated using the point cloud converter utility."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-pointer-controller",children:"Meta_PointerController"})})," ",(0,t.jsx)("br",{}),"A PointerController casts a ray to collide with scene and gui objects. It is used to provide lasers on tracked controllers."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-pose-guard",children:"Meta_PoseGuard"})})," ",(0,t.jsx)("br",{}),"A PoseGuard prevents script event dispatch unless the specified pose is matched."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-pose-state-guard",children:"Meta_PoseStateGuard"})})," ",(0,t.jsx)("br",{}),"A PoseStateGuard prevents script event dispatch unless the specified pose is maintained."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-precision",children:"Meta_Precision"})})," ",(0,t.jsx)("br",{}),"A Precision represents the tolerance value used by importer formats to tessellate a surface. Use validitymask to check which values are set."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-property-track",children:"Meta_PropertyTrack"})})," ",(0,t.jsx)("br",{}),"A property track is a collection of animations to apply to a property of a specified node."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-prop-semantics",children:"Meta_PropSemantics"})})," ",(0,t.jsx)("br",{}),"Metanode that contains a basic description of what a property is intended to be used for. e.g. Is it a colour (for a vec4f property), or a file (for a string property). This can be used as the node which is attached to the meta-metanodes with the semantics macros, or attached to anything else that needs some hints for a user interface."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-prop-semantics-link",children:"Meta_PropSemanticsLink"})})," ",(0,t.jsx)("br",{}),"Contains a link to a prop semantics node. This can be placed on a node or property to specify that it should use the semantics of another node/property to avoid the need to copy large amounts of semantics."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-recycle-bin",children:"Meta_RecycleBin"})})," ",(0,t.jsx)("br",{}),"The RecycleBin is where deleted nodes are stored so they can be undone by the history stack."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-reflection-probe",children:"Meta_ReflectionProbe"})})," ",(0,t.jsx)("br",{}),"A ReflectionProbe represents a local skybox providing dynamic reflections of the surrounding environment."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-render-scene",children:"Meta_RenderScene"})})," ",(0,t.jsx)("br",{}),"A RenderScene is a container for SceneLink nodes."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-render-target",children:"Meta_RenderTarget"})})})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-render-to-texture",children:"Meta_RenderToTexture"})})," ",(0,t.jsx)("br",{}),"A RenderToTexture is a texture that is rendered into by a Viewport which should be a child node."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-rollout-stack",children:"Meta_RolloutStack"})})," ",(0,t.jsx)("br",{}),"A ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-rollout-stack",children:"Meta_RolloutStack"})," is a ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-stack",children:"Meta_Stack"})," with a button that rolls/unrolls the stack contents."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-root",children:"Meta_Root"})})," ",(0,t.jsx)("br",{}),"The Root node is the owner of all other nodes in the tree, which are added as descendants."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-rs-blend",children:"Meta_RSBlend"})})," ",(0,t.jsx)("br",{}),"RenderState Blend allows you to override the blend mode for descendants."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-scene-link",children:"Meta_SceneLink"})})," ",(0,t.jsx)("br",{}),"A SceneLink specifies a link to a branch of the tree to render."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-scene-list",children:"Meta_SceneList"})})," ",(0,t.jsx)("br",{}),"The SceneList represents the Scenes node in the tree."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-scene-lod",children:"Meta_SceneLOD"})})," ",(0,t.jsx)("br",{}),"A SceneLOD is a LOD that can be applied to Assembly hierarchies rather than individual models."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-scroll-bar",children:"Meta_ScrollBar"})})," ",(0,t.jsx)("br",{}),"A ScrollBar is a ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-slider",children:"Meta_Slider"})," wrapped in arrow button controls."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-scroll-bar-style",children:"Meta_ScrollBarStyle"})})," ",(0,t.jsx)("br",{}),"A ScrollBarStyle provides styling options for the various parts of a ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-scroll-bar",children:"Meta_ScrollBar"}),"."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-scrolling-stack",children:"Meta_ScrollingStack"})})," ",(0,t.jsx)("br",{}),"A ScrollingStack is a stack that adds scrollbars if its contents are larger than its size. It renders its contents to a texture like ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-buffered-stack",children:"Meta_BufferedStack"}),"."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-scrolling-stack-style",children:"Meta_ScrollingStackStyle"})})," ",(0,t.jsx)("br",{}),"A ScrollingStackStyle provides styling options for a ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-scrolling-stack",children:"Meta_ScrollingStack"}),"."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-separator",children:"Meta_Separator"})})," ",(0,t.jsx)("br",{}),"A Separator delineates GUI objects."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-sequence",children:"Meta_Sequence"})})," ",(0,t.jsx)("br",{}),"A sequence is a collection of tracks that animate target nodes Valid child types: ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-assembly-track",children:"Meta_AssemblyTrack"}),", ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-property-track",children:"Meta_PropertyTrack"}),", ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-sequence-track",children:"Meta_SequenceTrack"}),"."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-sequence-track",children:"Meta_SequenceTrack"})})," ",(0,t.jsx)("br",{}),"A sequence track permits a sequence to be played at a specified time in another sequence."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-shader-sampler",children:"Meta_ShaderSampler"})})," ",(0,t.jsx)("br",{}),"define special metanode for sampler uniform type. Sampler contains a reference to a texture node, along with offset and scale to apply to texture coordinates before sampling."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-shadow-bounds-override",children:"Meta_ShadowBoundsOverride"})})," ",(0,t.jsx)("br",{}),"A ShadowBoundsOverride allows a directional light's shadow bounds to be overridden depending on the camera position."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-simulation-terrain",children:"Meta_SimulationTerrain"})})," ",(0,t.jsx)("br",{}),"A SimulationTerrain controls the display of preprocessed height and image data."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-slider",children:"Meta_Slider"})})," ",(0,t.jsx)("br",{}),"A Slider is a GUI control that can be moved with a cursor by clicking the handle and dragging it."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-snapshot",children:"Meta_Snapshot"})})," ",(0,t.jsx)("br",{}),"A Group is a method of grouping other nodes together."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-spherical-marker-style",children:"Meta_SphericalMarkerStyle"})})," ",(0,t.jsx)("br",{}),"A SphericalMarkerStyle provides styling for the default ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-marker",children:"Meta_Marker"})," sphere model."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-stack",children:"Meta_Stack"})})," ",(0,t.jsx)("br",{}),"A Stack is a container that provides layout controls for its child objects."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-std-material",children:"Meta_StdMaterial"})})," ",(0,t.jsx)("br",{}),"A StdMaterial describes a standard material that can be applied to numerous 3D objects (geogroups, visuals, etc)"]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-surface-shader-definition",children:"Meta_SurfaceShaderDefinition"})})," ",(0,t.jsx)("br",{}),"A SurfaceShaderDefinition represents a shader object, expected to be used by a ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-surface-shader-instance",children:"Meta_SurfaceShaderInstance"}),"."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-surface-shader-instance",children:"Meta_SurfaceShaderInstance"})})," ",(0,t.jsx)("br",{}),"Meta_SurfaceShaderInstances are associated with Materials, when attached as a child of a material they will effect the vertex and/or fragment shaders of any visuals rendered with said material."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-system",children:"Meta_System"})})," ",(0,t.jsx)("br",{}),"The System node contains protected nodes required for the application to function."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-system-collision",children:"Meta_SystemCollision"})})," ",(0,t.jsx)("br",{}),"A SystemCollision node is used to override ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-visual",children:"Meta_Visual"})," system collision."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-text-box",children:"Meta_TextBox"})})})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-texture",children:"Meta_Texture"})})," ",(0,t.jsx)("br",{}),"A Texture contains image data that is referenced by materials."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-textured-button-style",children:"Meta_TexturedButtonStyle"})})," ",(0,t.jsx)("br",{}),"A TexturedButtonStyle provides controls for texturing a ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-button",children:"Meta_Button"})," as well as content layout controls."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-textured-label-style",children:"Meta_TexturedLabelStyle"})})})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-textured-panel-style",children:"Meta_TexturedPanelStyle"})})," ",(0,t.jsx)("br",{}),"A TexturedPanelStyle provides an image background for a panel or stack."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-time-interval-guard",children:"Meta_TimeIntervalGuard"})})," ",(0,t.jsx)("br",{}),"A TimeIntervalGuard prevents script event dispatch unless the specified interval has passed since the last time."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-tracked-ar-marker",children:"Meta_TrackedARMarker"})})," ",(0,t.jsx)("br",{}),"Represents an AR marker that is currently being tracked by a headset, for example."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-tracker-input",children:"Meta_TrackerInput"})})," ",(0,t.jsx)("br",{}),"A TrackerInput represents a link to a particular part of a device, and can read data from it and feed it to a ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-tracker-prs-link",children:"Meta_TrackerPRSLink"}),"."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-tracker-output",children:"Meta_TrackerOutput"})})," ",(0,t.jsx)("br",{}),"A TrackerOutput represents a link to a particular part of a device, and can send data to it directly."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-tracker-prs-link",children:"Meta_TrackerPRSLink"})})," ",(0,t.jsx)("br",{}),"A TrackerPRSLink connects to ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-tracker-input",children:"Meta_TrackerInput"})," nodes and translates their input data into a transformation matrix."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-transform",children:"Meta_Transform"})})," ",(0,t.jsx)("br",{}),"A Transform is a special node that when parented to a ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-visual",children:"Meta_Visual"})," overrides its local transform (distinctly from the Assembly)."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-transform-limits",children:"Meta_TransformLimits"})})," ",(0,t.jsx)("br",{}),"Defines limits that can be applied to constrain an Assembly's transform values."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-transform-link",children:"Meta_TransformLink"})})," ",(0,t.jsx)("br",{}),"A TransformLink synchronises the transform of the source node onto the target node (and optionally the other way)"]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-tree-view-item",children:"Meta_TreeViewItem"})})," ",(0,t.jsx)("br",{}),"A TreeViewItem is a simple base element for constructing tree-view style UIs."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-typeface",children:"Meta_Typeface"})})," ",(0,t.jsx)("br",{}),"A Typeface appears under a ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-font-list",children:"Meta_FontList"}),", containing the Typeface name of a font on the system."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-untargetted-viewport",children:"Meta_UntargettedViewport"})})," ",(0,t.jsx)("br",{}),"An UntargettedViewport represents a viewport occupying a specified rectangle of a window (range 0 to 1) which renders the 3D scene using the specified view and projection matrices."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-user",children:"Meta_User"})})," ",(0,t.jsx)("br",{}),"A User node represents a user, either the local user, or a member of a collaborative session."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-user-link",children:"Meta_UserLink"})})," ",(0,t.jsx)("br",{}),"A pointer type metanode that is not cleaned up by the group manager..."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-users-list",children:"Meta_UsersList"})})," ",(0,t.jsx)("br",{}),"The UsersList represents the Users node in the tree."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-vertex-attrib",children:"Meta_VertexAttrib"})})," ",(0,t.jsx)("br",{}),"A VertexAttrib node contains raw data describing a collection of vertices."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-vertex-prim",children:"Meta_VertexPrim"})})," ",(0,t.jsx)("br",{}),"A VertexPrim specifies a range of vertices in ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-vertex-attrib",children:"Meta_VertexAttrib"})," siblings to render from, requiring this data to be in primitive order (and possibly duplicated)"]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-view",children:"Meta_View"})})," ",(0,t.jsx)("br",{}),"a View can be inserted at any point in the scene, and will be rendered into either the framebuffer or any child RenderTarget's there may be."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-view-filter",children:"Meta_ViewFilter"})})," ",(0,t.jsx)("br",{}),"Meta_ViewFilter's are associated with Views, and correspond to a full-screen quad being drawn over the View executing a fragment shader function."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-viewpoint",children:"Meta_Viewpoint"})})," ",(0,t.jsx)("br",{}),"Meta_Viewpoint represents camera settings for a specific view on the scene. It should be a child of a ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-assembly",children:"Meta_Assembly"}),"."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-viewpoint-list",children:"Meta_ViewpointList"})})," ",(0,t.jsx)("br",{}),"A ViewpointList is a container for saved Viewpoints."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-viewpoint-selector",children:"Meta_ViewpointSelector"})})," ",(0,t.jsx)("br",{}),"A ViewpointSelector displays all viewpoints in the scene."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-viewport",children:"Meta_Viewport"})})," ",(0,t.jsx)("br",{}),"A Viewport occupies a specified rectangle of a window (range 0 to 1) which renders the 3D scene from the specified eye points looking at the specified screen rectangles."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-viewport-layout",children:"Meta_ViewportLayout"})})," ",(0,t.jsx)("br",{}),"A ViewportLayout is displayed by a Window and contains one or more Viewports."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-view-shader",children:"Meta_ViewShader"})})," ",(0,t.jsx)("br",{}),"A ViewShader represents a shader object, expected to be used by a ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-view-filter",children:"Meta_ViewFilter"}),"."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-visual",children:"Meta_Visual"})})," ",(0,t.jsx)("br",{}),"A Visual provides an instance of a ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-model",children:"Meta_Model"}),", and is attached as a child of a ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-assembly",children:"Meta_Assembly"})," to position it in the scene."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-water-material",children:"Meta_WaterMaterial"})})," ",(0,t.jsx)("br",{}),"A WaterMaterial provies ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-ocean",children:"Meta_Ocean"})," rendering on an object."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-window",children:"Meta_Window"})})," ",(0,t.jsx)("br",{}),"A Window represents an actual application window displaying some viewports."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-z-space-viewport",children:"Meta_ZSpaceViewport"})})," ",(0,t.jsx)("br",{}),"A ZSpaceViewport is a derivative of Viewport that specifically handles interaction with a zSpace device."]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"struct"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/trait-abstracttrait",children:"Trait-AbstractTrait"})})," ",(0,t.jsx)("br",{}),"Trait used to identify other traits, allowing all registered traits to be identified by Trait-AbstractTrait::IsType to distinguish them from regular metanodes for code that needs to know that."]})]})]})]}),"\n",(0,t.jsx)(r.h2,{id:"defines",children:"Defines"}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"Type"}),(0,t.jsx)(r.th,{children:"Name"})]})}),(0,t.jsx)(r.tbody,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"#define-vrtree_api",children:"vrtree_API"})})})]})})]}),"\n",(0,t.jsx)(r.h2,{id:"detailed-description",children:"Detailed Description"}),"\n",(0,t.jsx)(r.p,{children:"Listing of metanode structures, describing their purpose and listing their property index and any other supplementary enumerations."}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Note"}),":"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:["This documentation is generated from the application headers, where, conventionally, a ",(0,t.jsx)(r.code,{children:"Meta_"})," prefix is used, and an ",(0,t.jsx)(r.code,{children:"IDX"})," enum lists the properties in order, with an ",(0,t.jsx)(r.code,{children:"Idx_"})," prefix. So ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-animation#enum-interpolation",children:"Meta_Animation::Idx_Interpolation"})," refers to the ",(0,t.jsx)(r.code,{children:"Interpolation"})," property on the ",(0,t.jsx)(r.code,{children:"Animation"})," metanode."]}),"\n",(0,t.jsxs)(r.li,{children:["When applying this information to scripts and plugins, which operate on node and property names, omit the ",(0,t.jsx)(r.code,{children:"Meta_"})," and ",(0,t.jsx)(r.code,{children:"Idx_"})," prefixes"]}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:['Enum values that specify "symbols" are for int properties that expect a particular internal value. Since this value may change over time, in order to allow plugins to remain compatible between versions, it is recommended to use these symbols to set these values, rather than the raw integer values. The Lua symbol can be used as-is, as it is global in the Lua state. The C symbols can be used with ',(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/modules/nodes/properties#vrsetpropertyenum",children:"VRSetPropertyEnum"})," and related functions."]}),"\n",(0,t.jsx)(r.h2,{id:"macros-documentation",children:"Macros Documentation"}),"\n",(0,t.jsx)(r.h3,{id:"define-vrtree_api",children:"define vrtree_API"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-cpp",children:"#define vrtree_API \n"})})]})}function h(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},28453:(e,r,s)=>{s.d(r,{R:()=>i,x:()=>c});var n=s(96540);const t={},a=n.createContext(t);function i(e){const r=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),n.createElement(a.Provider,{value:r},e.children)}}}]);
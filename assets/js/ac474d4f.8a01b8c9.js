"use strict";(self.webpackChunkvirtalis_docs=self.webpackChunkvirtalis_docs||[]).push([[5502],{66483:(e,r,i)=>{i.r(r),i.d(r,{assets:()=>c,contentTitle:()=>o,default:()=>a,frontMatter:()=>s,metadata:()=>n,toc:()=>h});const n=JSON.parse('{"id":"visionary-render-programming/reference/c-api/classes/metanodes/meta-viewport","title":"Meta_Viewport","description":"Module: Metanodes / Definitions","source":"@site/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-viewport.mdx","sourceDirName":"visionary-render-programming/reference/c-api/classes/metanodes","slug":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-viewport","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-viewport","draft":false,"unlisted":false,"editUrl":"https://github.com/virtalis/docs/tree/master/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-viewport.mdx","tags":[],"version":"current","frontMatter":{"title":"Meta_Viewport","summary":"A Viewport occupies a specified rectangle of a window (range 0 to 1) which renders the 3D scene from the specified eye points looking at the specified screen rectangles."},"sidebar":"visionaryRenderProgrammingSidebar","previous":{"title":"Meta_ViewportLayout","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-viewport-layout"},"next":{"title":"Meta_Visual","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-visual"}}');var d=i(74848),t=i(28453);const s={title:"Meta_Viewport",summary:"A Viewport occupies a specified rectangle of a window (range 0 to 1) which renders the 3D scene from the specified eye points looking at the specified screen rectangles."},o="Meta_Viewport",c={},h=[{value:"Public Types",id:"public-types",level:2},{value:"Public Types Documentation",id:"public-types-documentation",level:2},{value:"enum EyeOverride",id:"enum-eyeoverride",level:3},{value:"enum IDX",id:"enum-idx",level:3},{value:"enum ProjectionMode",id:"enum-projectionmode",level:3}];function l(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,t.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(r.header,{children:(0,d.jsx)(r.h1,{id:"meta_viewport",children:"Meta_Viewport"})}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.strong,{children:"Module:"})," ",(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/",children:"Metanodes"})})," ",(0,d.jsx)(r.strong,{children:"/"})," ",(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/definitions",children:"Definitions"})})]}),"\n",(0,d.jsx)(r.p,{children:"A Viewport occupies a specified rectangle of a window (range 0 to 1) which renders the 3D scene from the specified eye points looking at the specified screen rectangles."}),"\n",(0,d.jsx)(r.p,{children:(0,d.jsx)(r.code,{children:"#include <meta_view.hpp>"})}),"\n",(0,d.jsx)(r.h2,{id:"public-types",children:"Public Types"}),"\n",(0,d.jsxs)(r.table,{children:[(0,d.jsx)(r.thead,{children:(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.th,{children:"Type"}),(0,d.jsx)(r.th,{children:"Name"})]})}),(0,d.jsxs)(r.tbody,{children:[(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"enum"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#enum-eyeoverride",children:"EyeOverride"})})," { EyeOverride_None = -1, EyeOverride_Mono = 0, EyeOverride_Left = 1, EyeOverride_Right = 2 }",(0,d.jsx)("br",{}),"Values for Idx_EyeOverride."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"enum"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#enum-idx",children:"IDX"})})," { Idx_Enabled, Idx_Rectangle, Idx_Camera, Idx_ProjectionMode, Idx_Screen_Mono, Idx_Screen_Left, Idx_Screen_Right, Idx_FOV, Idx_ScreenWidth, Idx_ScreenOffset, Idx_HMD, Idx_OrthographicZoom, Idx_EyeOverride, Idx_Mirror }",(0,d.jsx)("br",{}),"Property index."]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"enum"}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.strong,{children:(0,d.jsx)(r.a,{href:"#enum-projectionmode",children:"ProjectionMode"})})," { ProjectionMode_PhysicalScreen, ProjectionMode_FOVAndWidth, ProjectionMode_Orthographic }",(0,d.jsx)("br",{}),"Values for Idx_ProjectionMode."]})]})]})]}),"\n",(0,d.jsx)(r.h2,{id:"public-types-documentation",children:"Public Types Documentation"}),"\n",(0,d.jsx)(r.h3,{id:"enum-eyeoverride",children:"enum EyeOverride"}),"\n",(0,d.jsxs)(r.table,{children:[(0,d.jsx)(r.thead,{children:(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.th,{children:"Enumerator"}),(0,d.jsx)(r.th,{children:"Value"}),(0,d.jsx)(r.th,{children:"Description"})]})}),(0,d.jsxs)(r.tbody,{children:[(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"EyeOverride_None"}),(0,d.jsx)(r.td,{children:"-1"}),(0,d.jsxs)(r.td,{children:["No eye override, will draw both left and right as required (Symbols - C: ",(0,d.jsx)(r.code,{children:'"EyeOverrideNone"'}),", Lua: ",(0,d.jsx)(r.code,{children:"__Viewport_EyeOverrideNone"}),")"]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"EyeOverride_Mono"}),(0,d.jsx)(r.td,{children:"0"}),(0,d.jsxs)(r.td,{children:["Drawing is done as mono (Symbols - C: ",(0,d.jsx)(r.code,{children:'"EyeOverrideMono"'}),", Lua: ",(0,d.jsx)(r.code,{children:"__Viewport_EyeOverrideMono"}),")"]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"EyeOverride_Left"}),(0,d.jsx)(r.td,{children:"1"}),(0,d.jsxs)(r.td,{children:["Drawing is done only from the left eye (Symbols - C: ",(0,d.jsx)(r.code,{children:'"EyeOverrideLeft"'}),", Lua: ",(0,d.jsx)(r.code,{children:"__Viewport_EyeOverrideLeft"}),")"]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"EyeOverride_Right"}),(0,d.jsx)(r.td,{children:"2"}),(0,d.jsxs)(r.td,{children:["Drawing is done only from the right eye (Symbols - C: ",(0,d.jsx)(r.code,{children:'"EyeOverrideRight"'}),", Lua: ",(0,d.jsx)(r.code,{children:"__Viewport_EyeOverrideRight"}),")"]})]})]})]}),"\n",(0,d.jsx)(r.p,{children:"Values for Idx_EyeOverride."}),"\n",(0,d.jsx)(r.h3,{id:"enum-idx",children:"enum IDX"}),"\n",(0,d.jsxs)(r.table,{children:[(0,d.jsx)(r.thead,{children:(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.th,{children:"Enumerator"}),(0,d.jsx)(r.th,{children:"Value"}),(0,d.jsx)(r.th,{children:"Description"})]})}),(0,d.jsxs)(r.tbody,{children:[(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"Idx_Enabled"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"bool - When enabled, viewport is drawn to the screen"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"Idx_Rectangle"}),(0,d.jsx)(r.td,{}),(0,d.jsxs)(r.td,{children:["vec4f - The viewport bounds, scaled on the screen by the ViewportLayout size. (e.g. layout size ",(0,d.jsx)(r.code,{children:"2.0, 1.0"}),", and child viewport width ",(0,d.jsx)(r.code,{children:"1.0"})," will fill half the screen with the viewport)"]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"Idx_Camera"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"link - The camera from which the scene is rendered"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"Idx_ProjectionMode"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"ProjectionMode (int) - The projection mode"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"Idx_Screen_Mono"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"link - (for PhysicalScreen mode) Link to the physical screen for rendering mono"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"Idx_Screen_Left"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"link - (for PhysicalScreen mode) Link to the physical screen for rendering the left eye"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"Idx_Screen_Right"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"link - (for PhysicalScreen mode) Link to the physical screen for rendering the right eye"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"Idx_FOV"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"float - (for other modes) The field of view"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"Idx_ScreenWidth"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"float - (for other modes) The physical width of the screen being displayed on (for stereo separation calculations)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"Idx_ScreenOffset"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"vec2f - (for other modes) The screen offset"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"Idx_HMD"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"bool - (for other modes) Whether the viewport is being used in a HMD, which makes the viewport calculation affect the camera transform directly, rather than skewing the projection for wall-based setups"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"Idx_OrthographicZoom"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"float - (for Orthographic mode) The zoom factor"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"Idx_EyeOverride"}),(0,d.jsx)(r.td,{}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-viewport#enum-eyeoverride",children:"EyeOverride"})," (int) - Overrides the eye drawn by this viewport"]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"Idx_Mirror"}),(0,d.jsx)(r.td,{}),(0,d.jsx)(r.td,{children:"bool - When enabled, viewport is mirrored, which can be helpful for aligning tracker inputs with assemblies"})]})]})]}),"\n",(0,d.jsx)(r.p,{children:"Property index."}),"\n",(0,d.jsx)(r.h3,{id:"enum-projectionmode",children:"enum ProjectionMode"}),"\n",(0,d.jsxs)(r.table,{children:[(0,d.jsx)(r.thead,{children:(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.th,{children:"Enumerator"}),(0,d.jsx)(r.th,{children:"Value"}),(0,d.jsx)(r.th,{children:"Description"})]})}),(0,d.jsxs)(r.tbody,{children:[(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"ProjectionMode_PhysicalScreen"}),(0,d.jsx)(r.td,{}),(0,d.jsxs)(r.td,{children:["Projection is defined by eye position and physical screen node (Symbols - C: ",(0,d.jsx)(r.code,{children:'"ProjectionModePhysicalScreen"'}),", Lua: ",(0,d.jsx)(r.code,{children:"__Viewport_ProjectionModePhysicalScreen"}),")"]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"ProjectionMode_FOVAndWidth"}),(0,d.jsx)(r.td,{}),(0,d.jsxs)(r.td,{children:["Projection is defined by eye position, FOV, screen width and HMD flag (Symbols - C: ",(0,d.jsx)(r.code,{children:'"ProjectionModeFOVAndWidth"'}),", Lua: ",(0,d.jsx)(r.code,{children:"__Viewport_ProjectionModeFOVAndWidth"}),")"]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"ProjectionMode_Orthographic"}),(0,d.jsx)(r.td,{}),(0,d.jsxs)(r.td,{children:["Projection is orthographic, from the eye position (Symbols - C: ",(0,d.jsx)(r.code,{children:'"ProjectionModeOrthographic"'}),", Lua: ",(0,d.jsx)(r.code,{children:"__Viewport_ProjectionModeOrthographic"}),")"]})]})]})]}),"\n",(0,d.jsx)(r.p,{children:"Values for Idx_ProjectionMode."})]})}function a(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,d.jsx)(r,{...e,children:(0,d.jsx)(l,{...e})}):l(e)}},28453:(e,r,i)=>{i.d(r,{R:()=>s,x:()=>o});var n=i(96540);const d={},t=n.createContext(d);function s(e){const r=n.useContext(t);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:s(e.components),n.createElement(t.Provider,{value:r},e.children)}}}]);
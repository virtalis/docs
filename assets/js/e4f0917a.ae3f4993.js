"use strict";(self.webpackChunkvirtalis_docs=self.webpackChunkvirtalis_docs||[]).push([[74156],{70298:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>n,toc:()=>a});const n=JSON.parse('{"id":"visionary-render-programming/reference/c-api/classes/metanodes/meta-pointer-controller","title":"Meta_PointerController","description":"Module: Metanodes / Definitions","source":"@site/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-pointer-controller.mdx","sourceDirName":"visionary-render-programming/reference/c-api/classes/metanodes","slug":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-pointer-controller","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-pointer-controller","draft":false,"unlisted":false,"editUrl":"https://github.com/virtalis/docs/tree/master/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-pointer-controller.mdx","tags":[],"version":"current","lastUpdatedAt":1730817102000,"frontMatter":{"title":"Meta_PointerController","summary":"A PointerController casts a ray to collide with scene and gui objects. It is used to provide lasers on tracked controllers."},"sidebar":"visionaryRenderProgrammingSidebar","previous":{"title":"Meta_PointCloud","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-point-cloud"},"next":{"title":"Meta_PoseGuard","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-pose-guard"}}');var s=t(74848),d=t(28453);const i={title:"Meta_PointerController",summary:"A PointerController casts a ray to collide with scene and gui objects. It is used to provide lasers on tracked controllers."},o="Meta_PointerController",l={},a=[{value:"Public Types",id:"public-types",level:2},{value:"Public Types Documentation",id:"public-types-documentation",level:2},{value:"enum Hand",id:"enum-hand",level:3},{value:"enum IDX",id:"enum-idx",level:3}];function c(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,d.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"meta_pointercontroller",children:"Meta_PointerController"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Module:"})," ",(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/",children:"Metanodes"})})," ",(0,s.jsx)(r.strong,{children:"/"})," ",(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/definitions",children:"Definitions"})})]}),"\n",(0,s.jsx)(r.p,{children:"A PointerController casts a ray to collide with scene and gui objects. It is used to provide lasers on tracked controllers."}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.code,{children:"#include <meta_gui.hpp>"})}),"\n",(0,s.jsx)(r.h2,{id:"public-types",children:"Public Types"}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Type"}),(0,s.jsx)(r.th,{children:"Name"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"enum"}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"#enum-hand",children:"Hand"})})," { Left, Right }",(0,s.jsx)("br",{}),"Values for Idx_Hand."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"enum"}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"#enum-idx",children:"IDX"})})," { Idx_Enabled, Idx_Transform, Idx_Camera, Idx_ButtonSource, Idx_TouchSource, Idx_ShowCursor, Idx_ShowLaser, Idx_LaserSelectEnabled, Idx_Length, Idx_VisibleToAll, Idx_VisibleToSelf, Idx_DoubleClickDistanceTolerance, Idx_DoubleClickAngleTolerance, Idx_Hand, Idx_ActionMask }"]})]})]})]}),"\n",(0,s.jsx)(r.h2,{id:"public-types-documentation",children:"Public Types Documentation"}),"\n",(0,s.jsx)(r.h3,{id:"enum-hand",children:"enum Hand"}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Enumerator"}),(0,s.jsx)(r.th,{children:"Value"}),(0,s.jsx)(r.th,{children:"Description"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Left"}),(0,s.jsx)(r.td,{}),(0,s.jsxs)(r.td,{children:["Symbols - C: ",(0,s.jsx)(r.code,{children:'"LeftHand"'}),", Lua: ",(0,s.jsx)(r.code,{children:"__PointerController_LeftHand"})]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Right"}),(0,s.jsx)(r.td,{}),(0,s.jsxs)(r.td,{children:["Symbols - C: ",(0,s.jsx)(r.code,{children:'"RightHand"'}),", Lua: ",(0,s.jsx)(r.code,{children:"__PointerController_RightHand"})]})]})]})]}),"\n",(0,s.jsx)(r.p,{children:"Values for Idx_Hand."}),"\n",(0,s.jsx)(r.h3,{id:"enum-idx",children:"enum IDX"}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Enumerator"}),(0,s.jsx)(r.th,{children:"Value"}),(0,s.jsx)(r.th,{children:"Description"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Idx_Enabled"}),(0,s.jsx)(r.td,{}),(0,s.jsx)(r.td,{})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Idx_Transform"}),(0,s.jsx)(r.td,{}),(0,s.jsx)(r.td,{children:"bool - Enabled state of the controller and its raycast"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Idx_Camera"}),(0,s.jsx)(r.td,{}),(0,s.jsx)(r.td,{children:"mat4w - Local transform (origin) of the pointer"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Idx_ButtonSource"}),(0,s.jsx)(r.td,{}),(0,s.jsxs)(r.td,{children:["link - Optionally specify a ",(0,s.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-camera",children:"Meta_Camera"})," which should be the only one that can see the pointer"]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Idx_TouchSource"}),(0,s.jsx)(r.td,{}),(0,s.jsx)(r.td,{children:'link - a Meta_TrackerInput providing tracker buttons. Button 0 acts as a "trigger" to click on whatever the pointer is pointing at'})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Idx_ShowCursor"}),(0,s.jsx)(r.td,{}),(0,s.jsx)(r.td,{children:"link - a Meta_TrackerInput providing a touch pad tracker source"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Idx_ShowLaser"}),(0,s.jsx)(r.td,{}),(0,s.jsx)(r.td,{children:"bool - Whether to show a cursor at the end of the laser"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Idx_LaserSelectEnabled"}),(0,s.jsx)(r.td,{}),(0,s.jsx)(r.td,{children:"bool - Whether to show the red laser"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Idx_Length"}),(0,s.jsx)(r.td,{}),(0,s.jsx)(r.td,{children:"bool - Whether the laser can select the 3D scene"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Idx_VisibleToAll"}),(0,s.jsx)(r.td,{}),(0,s.jsx)(r.td,{children:"world_float - The length of the ray, or zero if it should extend to the far clip plane"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Idx_VisibleToSelf"}),(0,s.jsx)(r.td,{}),(0,s.jsx)(r.td,{children:"bool - Whether the laser is visible to all users in a collaboration"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Idx_DoubleClickDistanceTolerance"}),(0,s.jsx)(r.td,{}),(0,s.jsx)(r.td,{children:"bool - Whether the laser is visible to the local user (you)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Idx_DoubleClickAngleTolerance"}),(0,s.jsx)(r.td,{}),(0,s.jsx)(r.td,{children:"float - The distance the laser is allowed to move between clicks before they count as separate clicks"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Idx_Hand"}),(0,s.jsx)(r.td,{}),(0,s.jsx)(r.td,{children:"float - The distance the laser is allowed to rotate between clicks before they count as separate clicks"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Idx_ActionMask"}),(0,s.jsx)(r.td,{}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-pointer-controller#enum-hand",children:"Hand"})," (int) - Which hand should this be treated as? Button event codes are adjusted based on handedness."]})]})]})]})]})}function h(e={}){const{wrapper:r}={...(0,d.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},28453:(e,r,t)=>{t.d(r,{R:()=>i,x:()=>o});var n=t(96540);const s={},d=n.createContext(s);function i(e){const r=n.useContext(d);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),n.createElement(d.Provider,{value:r},e.children)}}}]);
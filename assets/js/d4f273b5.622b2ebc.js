"use strict";(self.webpackChunkvirtalis_docs=self.webpackChunkvirtalis_docs||[]).push([[9318],{1707:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>l,default:()=>o,frontMatter:()=>a,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"visionary-render-programming/reference/c-api/modules/settings","title":"Settings","description":"Functions for accessing settings.","source":"@site/docs/visionary-render-programming/reference/c-api/modules/settings.mdx","sourceDirName":"visionary-render-programming/reference/c-api/modules","slug":"/visionary-render-programming/reference/c-api/modules/settings","permalink":"/visionary-render-programming/reference/c-api/modules/settings","draft":false,"unlisted":false,"editUrl":"https://github.com/virtalis/docs/tree/master/docs/visionary-render-programming/reference/c-api/modules/settings.mdx","tags":[],"version":"current","lastUpdatedAt":1730817102000,"frontMatter":{"title":"Settings","summary":"Functions for accessing settings."},"sidebar":"visionaryRenderProgrammingSidebar","previous":{"title":"Foreign Function Interface","permalink":"/visionary-render-programming/reference/c-api/modules/ffi"},"next":{"title":"VR Exchange","permalink":"/visionary-render-programming/reference/c-api/modules/vrexchange"}}');var s=n(74848),i=n(28453);const a={title:"Settings",summary:"Functions for accessing settings."},l="Settings",h={},d=[{value:"Functions",id:"functions",level:2},{value:"Functions Documentation",id:"functions-documentation",level:2},{value:"VRAddCallbackSettingChanged",id:"vraddcallbacksettingchanged",level:3},{value:"VRAddSettingToScene",id:"vraddsettingtoscene",level:3},{value:"VRCreateSettingArrayDouble",id:"vrcreatesettingarraydouble",level:3},{value:"VRCreateSettingArrayFloat",id:"vrcreatesettingarrayfloat",level:3},{value:"VRCreateSettingArrayInt",id:"vrcreatesettingarrayint",level:3},{value:"VRCreateSettingBool",id:"vrcreatesettingbool",level:3},{value:"VRCreateSettingDouble",id:"vrcreatesettingdouble",level:3},{value:"VRCreateSettingFloat",id:"vrcreatesettingfloat",level:3},{value:"VRCreateSettingInt",id:"vrcreatesettingint",level:3},{value:"VRCreateSettingLink",id:"vrcreatesettinglink",level:3},{value:"VRCreateSettingString",id:"vrcreatesettingstring",level:3},{value:"VRGetRootSettingNode",id:"vrgetrootsettingnode",level:3},{value:"VRGetSceneRootSettingNode",id:"vrgetscenerootsettingnode",level:3},{value:"VRGetSettingNode",id:"vrgetsettingnode",level:3},{value:"VRGetSettingSize",id:"vrgetsettingsize",level:3},{value:"VRReadSettingArrayDouble",id:"vrreadsettingarraydouble",level:3},{value:"VRReadSettingArrayFloat",id:"vrreadsettingarrayfloat",level:3},{value:"VRReadSettingArrayInt",id:"vrreadsettingarrayint",level:3},{value:"VRReadSettingBool",id:"vrreadsettingbool",level:3},{value:"VRReadSettingDouble",id:"vrreadsettingdouble",level:3},{value:"VRReadSettingFloat",id:"vrreadsettingfloat",level:3},{value:"VRReadSettingInt",id:"vrreadsettingint",level:3},{value:"VRReadSettingLink",id:"vrreadsettinglink",level:3},{value:"VRReadSettingString",id:"vrreadsettingstring",level:3},{value:"VRRemoveCallbackSettingChanged",id:"vrremovecallbacksettingchanged",level:3},{value:"VRRemoveSettingFromScene",id:"vrremovesettingfromscene",level:3},{value:"VRSetSettingCaption",id:"vrsetsettingcaption",level:3},{value:"VRSetSettingFilter",id:"vrsetsettingfilter",level:3},{value:"VRSetSettingRange",id:"vrsetsettingrange",level:3},{value:"VRSetSettingStep",id:"vrsetsettingstep",level:3},{value:"VRSetSettingType",id:"vrsetsettingtype",level:3},{value:"VRWriteSettingArrayDouble",id:"vrwritesettingarraydouble",level:3},{value:"VRWriteSettingArrayFloat",id:"vrwritesettingarrayfloat",level:3},{value:"VRWriteSettingArrayInt",id:"vrwritesettingarrayint",level:3},{value:"VRWriteSettingBool",id:"vrwritesettingbool",level:3},{value:"VRWriteSettingDouble",id:"vrwritesettingdouble",level:3},{value:"VRWriteSettingFloat",id:"vrwritesettingfloat",level:3},{value:"VRWriteSettingInt",id:"vrwritesettingint",level:3},{value:"VRWriteSettingLink",id:"vrwritesettinglink",level:3},{value:"VRWriteSettingString",id:"vrwritesettingstring",level:3}];function c(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"settings",children:"Settings"})}),"\n",(0,s.jsx)(t.p,{children:"Functions for accessing settings."}),"\n",(0,s.jsx)(t.h2,{id:"functions",children:"Functions"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Type"}),(0,s.jsx)(t.th,{children:"Name"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"int"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"#vraddcallbacksettingchanged",children:"VRAddCallbackSettingChanged"})}),"(const char * path, ",(0,s.jsx)(t.a,{href:"/visionary-render-programming/reference/c-api/definitions/function-prototypes#typedef-settingchangedfunc",children:"SettingChangedFunc"})," func, void * userData)",(0,s.jsx)("br",{}),"Registers a function to be called when a setting value changes."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"int"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"#vraddsettingtoscene",children:"VRAddSettingToScene"})}),"(const char * path)",(0,s.jsx)("br",{}),"Adds a scene override of a setting (if it doesn't already exist) and copies the value from the user setting to the override."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"int"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"#vrcreatesettingarraydouble",children:"VRCreateSettingArrayDouble"})}),"(const char * path, size_t count, const double * defaultValues)",(0,s.jsx)("br",{}),"Creates a double array setting if it doesn't already exist."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"int"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"#vrcreatesettingarrayfloat",children:"VRCreateSettingArrayFloat"})}),"(const char * path, size_t count, const float * defaultValues)",(0,s.jsx)("br",{}),"Creates a float array setting if it doesn't already exist."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"int"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"#vrcreatesettingarrayint",children:"VRCreateSettingArrayInt"})}),"(const char * path, size_t count, const int * defaultValues)",(0,s.jsx)("br",{}),"Creates an integer array setting if it doesn't already exist."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"int"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"#vrcreatesettingbool",children:"VRCreateSettingBool"})}),"(const char * path, char defaultValue)",(0,s.jsx)("br",{}),"Creates a boolean setting if it doesn't already exist."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"int"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"#vrcreatesettingdouble",children:"VRCreateSettingDouble"})}),"(const char * path, double defaultValue)",(0,s.jsx)("br",{}),"Creates a double setting if it doesn't already exist."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"int"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"#vrcreatesettingfloat",children:"VRCreateSettingFloat"})}),"(const char * path, float defaultValue)",(0,s.jsx)("br",{}),"Creates a float setting if it doesn't already exist."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"int"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"#vrcreatesettingint",children:"VRCreateSettingInt"})}),"(const char * path, int defaultValue)",(0,s.jsx)("br",{}),"Creates an integer setting if it doesn't already exist."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"int"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"#vrcreatesettinglink",children:"VRCreateSettingLink"})}),"(const char * path)",(0,s.jsx)("br",{}),"Creates a link setting if it doesn't already exist."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"int"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"#vrcreatesettingstring",children:"VRCreateSettingString"})}),"(const char * path, const char * defaultValue)",(0,s.jsx)("br",{}),"Creates a string setting if it doesn't already exist."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"#vrgetrootsettingnode",children:"VRGetRootSettingNode"})}),"()",(0,s.jsx)("br",{}),"Gets the VRTree node associated with the root of the settings hierarchy."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"#vrgetscenerootsettingnode",children:"VRGetSceneRootSettingNode"})}),"()",(0,s.jsx)("br",{}),"Gets the VRTree node associated with the root of the scene overrides, if present."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"#vrgetsettingnode",children:"VRGetSettingNode"})}),"(const char * path)",(0,s.jsx)("br",{}),"Gets the VRTree node associated with a setting. If the setting has a scene override, the override node is returned; otherwise, the user setting node is returned."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"size_t"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"#vrgetsettingsize",children:"VRGetSettingSize"})}),"(const char * path)",(0,s.jsx)("br",{}),"Returns the number of bytes required to store a setting's value. For string settings, this includes the terminating null character."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"size_t"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"#vrreadsettingarraydouble",children:"VRReadSettingArrayDouble"})}),"(const char * path, double * values, size_t count)",(0,s.jsx)("br",{}),"Reads a double array setting."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"size_t"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"#vrreadsettingarrayfloat",children:"VRReadSettingArrayFloat"})}),"(const char * path, float * values, size_t count)",(0,s.jsx)("br",{}),"Reads a float array setting."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"size_t"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"#vrreadsettingarrayint",children:"VRReadSettingArrayInt"})}),"(const char * path, int * values, size_t count)",(0,s.jsx)("br",{}),"Reads an int array setting."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"char"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"#vrreadsettingbool",children:"VRReadSettingBool"})}),"(const char * path)",(0,s.jsx)("br",{}),"Reads a boolean setting."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"double"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"#vrreadsettingdouble",children:"VRReadSettingDouble"})}),"(const char * path)",(0,s.jsx)("br",{}),"Reads a double setting."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"float"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"#vrreadsettingfloat",children:"VRReadSettingFloat"})}),"(const char * path)",(0,s.jsx)("br",{}),"Reads a float setting."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"int"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"#vrreadsettingint",children:"VRReadSettingInt"})}),"(const char * path)",(0,s.jsx)("br",{}),"Reads an int setting."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"#vrreadsettinglink",children:"VRReadSettingLink"})}),"(const char * path)",(0,s.jsx)("br",{}),"Reads a link setting."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"size_t"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"#vrreadsettingstring",children:"VRReadSettingString"})}),"(const char * path, char * buffer, size_t bufferSize)",(0,s.jsx)("br",{}),"Reads a string setting."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"int"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"#vrremovecallbacksettingchanged",children:"VRRemoveCallbackSettingChanged"})}),"(const char * path, ",(0,s.jsx)(t.a,{href:"/visionary-render-programming/reference/c-api/definitions/function-prototypes#typedef-settingchangedfunc",children:"SettingChangedFunc"})," func)",(0,s.jsx)("br",{}),"Removes a callback that was added with ",(0,s.jsx)(t.a,{href:"#vraddcallbacksettingchanged",children:"VRAddCallbackSettingChanged()"})]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"int"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"#vrremovesettingfromscene",children:"VRRemoveSettingFromScene"})}),"(const char * path)",(0,s.jsx)("br",{}),"Removes a scene override of a setting."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"int"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"#vrsetsettingcaption",children:"VRSetSettingCaption"})}),"(const char * path, const char * caption)",(0,s.jsx)("br",{}),"Assigns a custom caption to a setting, allowing the text displayed to in user interface to be different from the setting name."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"int"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"#vrsetsettingfilter",children:"VRSetSettingFilter"})}),"(const char * path, const char * filter)",(0,s.jsx)("br",{}),"Assigns a filter to a setting. The meaning of the filter depends on the setting type:"]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"int"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"#vrsetsettingrange",children:"VRSetSettingRange"})}),"(const char * path, double minValue, double maxValue)",(0,s.jsx)("br",{}),"Assigns a range to a numeric setting."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"int"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"#vrsetsettingstep",children:"VRSetSettingStep"})}),"(const char * path, double step)",(0,s.jsx)("br",{}),"Assigns a step size to a numeric setting."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"int"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"#vrsetsettingtype",children:"VRSetSettingType"})}),"(const char * path, const char * type)",(0,s.jsx)("br",{}),"Assigns a type to a setting, which determines how the setting is presented in the user interface. The types that can be assigned depend on the data type of the setting:"]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"int"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"#vrwritesettingarraydouble",children:"VRWriteSettingArrayDouble"})}),"(const char * path, const double * values, size_t count)",(0,s.jsx)("br",{}),"Sets the value of a double array setting."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"int"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"#vrwritesettingarrayfloat",children:"VRWriteSettingArrayFloat"})}),"(const char * path, const float * values, size_t count)",(0,s.jsx)("br",{}),"Sets the value of a float array setting."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"int"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"#vrwritesettingarrayint",children:"VRWriteSettingArrayInt"})}),"(const char * path, const int * values, size_t count)",(0,s.jsx)("br",{}),"Sets the value of an int array setting."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"int"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"#vrwritesettingbool",children:"VRWriteSettingBool"})}),"(const char * path, char value)",(0,s.jsx)("br",{}),"Sets the value of a boolean setting."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"int"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"#vrwritesettingdouble",children:"VRWriteSettingDouble"})}),"(const char * path, double value)",(0,s.jsx)("br",{}),"Sets the value of a double setting."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"int"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"#vrwritesettingfloat",children:"VRWriteSettingFloat"})}),"(const char * path, float value)",(0,s.jsx)("br",{}),"Sets the value of a float setting."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"int"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"#vrwritesettingint",children:"VRWriteSettingInt"})}),"(const char * path, int value)",(0,s.jsx)("br",{}),"Sets the value of an int setting."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"int"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"#vrwritesettinglink",children:"VRWriteSettingLink"})}),"(const char * path, ",(0,s.jsx)(t.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"})," value)",(0,s.jsx)("br",{}),"Sets the value of a link setting."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"int"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"#vrwritesettingstring",children:"VRWriteSettingString"})}),"(const char * path, const char * value)",(0,s.jsx)("br",{}),"Sets the value of a string setting."]})]})]})]}),"\n",(0,s.jsx)(t.h2,{id:"functions-documentation",children:"Functions Documentation"}),"\n",(0,s.jsx)(t.h3,{id:"vraddcallbacksettingchanged",children:"VRAddCallbackSettingChanged"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:"int VRAddCallbackSettingChanged(\r\n    const char * path,\r\n    SettingChangedFunc func,\r\n    void * userData\r\n)\n"})}),"\n",(0,s.jsx)(t.p,{children:"Registers a function to be called when a setting value changes."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"path"})," the path from the root of the settings hierarchy"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"func"})," the function to be called"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"userData"})," an arbitrary value to be passed to the callback function"]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Return"}),": 0 on success, 1 on failure"]}),"\n",(0,s.jsx)(t.h3,{id:"vraddsettingtoscene",children:"VRAddSettingToScene"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:"int VRAddSettingToScene(\r\n    const char * path\r\n)\n"})}),"\n",(0,s.jsx)(t.p,{children:"Adds a scene override of a setting (if it doesn't already exist) and copies the value from the user setting to the override."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"path"})," the path from the root of the settings hierarchy"]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Return"}),": 0 if an override was added or already present, or 1 on failure"]}),"\n",(0,s.jsx)(t.h3,{id:"vrcreatesettingarraydouble",children:"VRCreateSettingArrayDouble"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:"int VRCreateSettingArrayDouble(\r\n    const char * path,\r\n    size_t count,\r\n    const double * defaultValues\r\n)\n"})}),"\n",(0,s.jsx)(t.p,{children:"Creates a double array setting if it doesn't already exist."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"path"})," the path from the root of the settings hierarchy"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"count"})," the number of elements in the array (may be 2, 3, 4, 9 or 16)"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"defaultValue"})," the value to set if the setting didn't already exist"]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Return"}),": 0 if the setting was created or already existed, or 1 on failure"]}),"\n",(0,s.jsx)(t.h3,{id:"vrcreatesettingarrayfloat",children:"VRCreateSettingArrayFloat"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:"int VRCreateSettingArrayFloat(\r\n    const char * path,\r\n    size_t count,\r\n    const float * defaultValues\r\n)\n"})}),"\n",(0,s.jsx)(t.p,{children:"Creates a float array setting if it doesn't already exist."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"path"})," the path from the root of the settings hierarchy"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"count"})," the number of elements in the array (may be 2, 3, 4, 9 or 16)"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"defaultValue"})," the value to set if the setting didn't already exist"]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Return"}),": 0 if the setting was created or already existed, or 1 on failure"]}),"\n",(0,s.jsx)(t.h3,{id:"vrcreatesettingarrayint",children:"VRCreateSettingArrayInt"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:"int VRCreateSettingArrayInt(\r\n    const char * path,\r\n    size_t count,\r\n    const int * defaultValues\r\n)\n"})}),"\n",(0,s.jsx)(t.p,{children:"Creates an integer array setting if it doesn't already exist."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"path"})," the path from the root of the settings hierarchy"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"count"})," the number of elements in the array (may be 2, 3 or 4)"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"defaultValue"})," the value to set if the setting didn't already exist"]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Return"}),": 0 if the setting was created or already existed, or 1 on failure"]}),"\n",(0,s.jsx)(t.h3,{id:"vrcreatesettingbool",children:"VRCreateSettingBool"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:"int VRCreateSettingBool(\r\n    const char * path,\r\n    char defaultValue\r\n)\n"})}),"\n",(0,s.jsx)(t.p,{children:"Creates a boolean setting if it doesn't already exist."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"path"})," the path from the root of the settings hierarchy"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"defaultValue"})," the value to set if the setting didn't already exist"]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Return"}),": 0 if the setting was created or already existed, or 1 on failure"]}),"\n",(0,s.jsx)(t.h3,{id:"vrcreatesettingdouble",children:"VRCreateSettingDouble"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:"int VRCreateSettingDouble(\r\n    const char * path,\r\n    double defaultValue\r\n)\n"})}),"\n",(0,s.jsx)(t.p,{children:"Creates a double setting if it doesn't already exist."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"path"})," the path from the root of the settings hierarchy"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"defaultValue"})," the value to set if the setting didn't already exist"]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Return"}),": 0 if the setting was created or already existed, or 1 on failure"]}),"\n",(0,s.jsx)(t.h3,{id:"vrcreatesettingfloat",children:"VRCreateSettingFloat"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:"int VRCreateSettingFloat(\r\n    const char * path,\r\n    float defaultValue\r\n)\n"})}),"\n",(0,s.jsx)(t.p,{children:"Creates a float setting if it doesn't already exist."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"path"})," the path from the root of the settings hierarchy"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"defaultValue"})," the value to set if the setting didn't already exist"]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Return"}),": 0 if the setting was created or already existed, or 1 on failure"]}),"\n",(0,s.jsx)(t.h3,{id:"vrcreatesettingint",children:"VRCreateSettingInt"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:"int VRCreateSettingInt(\r\n    const char * path,\r\n    int defaultValue\r\n)\n"})}),"\n",(0,s.jsx)(t.p,{children:"Creates an integer setting if it doesn't already exist."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"path"})," the path from the root of the settings hierarchy"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"defaultValue"})," the value to set if the setting didn't already exist"]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Return"}),": 0 if the setting was created or already existed, or 1 on failure"]}),"\n",(0,s.jsx)(t.h3,{id:"vrcreatesettinglink",children:"VRCreateSettingLink"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:"int VRCreateSettingLink(\r\n    const char * path\r\n)\n"})}),"\n",(0,s.jsx)(t.p,{children:"Creates a link setting if it doesn't already exist."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"path"})," the path from the root of the settings hierarchy"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"defaultValue"})," the value to set if the setting didn't already exist"]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Return"}),": 0 if the setting was created or already existed, or 1 on failure"]}),"\n",(0,s.jsx)(t.h3,{id:"vrcreatesettingstring",children:"VRCreateSettingString"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:"int VRCreateSettingString(\r\n    const char * path,\r\n    const char * defaultValue\r\n)\n"})}),"\n",(0,s.jsx)(t.p,{children:"Creates a string setting if it doesn't already exist."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"path"})," the path from the root of the settings hierarchy"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"defaultValue"})," the value to set if the setting didn't already exist"]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Return"}),": 0 if the setting was created or already existed, or 1 on failure"]}),"\n",(0,s.jsx)(t.h3,{id:"vrgetrootsettingnode",children:"VRGetRootSettingNode"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:"HNode VRGetRootSettingNode()\n"})}),"\n",(0,s.jsx)(t.p,{children:"Gets the VRTree node associated with the root of the settings hierarchy."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Return"}),": the VRTree node associated with the root of the settings hierarchy"]}),"\n",(0,s.jsx)(t.h3,{id:"vrgetscenerootsettingnode",children:"VRGetSceneRootSettingNode"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:"HNode VRGetSceneRootSettingNode()\n"})}),"\n",(0,s.jsx)(t.p,{children:"Gets the VRTree node associated with the root of the scene overrides, if present."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Return"}),": the VRTree node associated with the root of the scene overrides, or 0 if no overrides are present"]}),"\n",(0,s.jsx)(t.h3,{id:"vrgetsettingnode",children:"VRGetSettingNode"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:"HNode VRGetSettingNode(\r\n    const char * path\r\n)\n"})}),"\n",(0,s.jsx)(t.p,{children:"Gets the VRTree node associated with a setting. If the setting has a scene override, the override node is returned; otherwise, the user setting node is returned."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"path"})," the path from the root of the settings hierarchy"]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Return"}),": the VRTree node currently associated with the setting"]}),"\n",(0,s.jsx)(t.h3,{id:"vrgetsettingsize",children:"VRGetSettingSize"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:"size_t VRGetSettingSize(\r\n    const char * path\r\n)\n"})}),"\n",(0,s.jsx)(t.p,{children:"Returns the number of bytes required to store a setting's value. For string settings, this includes the terminating null character."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"path"})," the path from the root of the settings hierarchy"]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Return"}),": the size of the value in bytes, or 0 on failure"]}),"\n",(0,s.jsx)(t.h3,{id:"vrreadsettingarraydouble",children:"VRReadSettingArrayDouble"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:"size_t VRReadSettingArrayDouble(\r\n    const char * path,\r\n    double * values,\r\n    size_t count\r\n)\n"})}),"\n",(0,s.jsx)(t.p,{children:"Reads a double array setting."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"path"})," the path from the root of the settings hierarchy"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"values"})," pointer to a buffer to receive the data"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"count"})," the size of the buffer (number of double elements)"]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Return"}),": the number of values written to the buffer"]}),"\n",(0,s.jsx)(t.h3,{id:"vrreadsettingarrayfloat",children:"VRReadSettingArrayFloat"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:"size_t VRReadSettingArrayFloat(\r\n    const char * path,\r\n    float * values,\r\n    size_t count\r\n)\n"})}),"\n",(0,s.jsx)(t.p,{children:"Reads a float array setting."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"path"})," the path from the root of the settings hierarchy"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"values"})," pointer to a buffer to receive the data"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"count"})," the size of the buffer (number of float elements)"]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Return"}),": the number of values written to the buffer"]}),"\n",(0,s.jsx)(t.h3,{id:"vrreadsettingarrayint",children:"VRReadSettingArrayInt"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:"size_t VRReadSettingArrayInt(\r\n    const char * path,\r\n    int * values,\r\n    size_t count\r\n)\n"})}),"\n",(0,s.jsx)(t.p,{children:"Reads an int array setting."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"path"})," the path from the root of the settings hierarchy"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"values"})," pointer to a buffer to receive the data"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"count"})," the size of the buffer (number of int elements)"]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Return"}),": the number of values written to the buffer"]}),"\n",(0,s.jsx)(t.h3,{id:"vrreadsettingbool",children:"VRReadSettingBool"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:"char VRReadSettingBool(\r\n    const char * path\r\n)\n"})}),"\n",(0,s.jsx)(t.p,{children:"Reads a boolean setting."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"path"})," the path from the root of the settings hierarchy"]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Return"}),": the setting value, or 0 on failure"]}),"\n",(0,s.jsx)(t.h3,{id:"vrreadsettingdouble",children:"VRReadSettingDouble"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:"double VRReadSettingDouble(\r\n    const char * path\r\n)\n"})}),"\n",(0,s.jsx)(t.p,{children:"Reads a double setting."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"path"})," the path from the root of the settings hierarchy"]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Return"}),": the setting value, or 0 on failure"]}),"\n",(0,s.jsx)(t.h3,{id:"vrreadsettingfloat",children:"VRReadSettingFloat"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:"float VRReadSettingFloat(\r\n    const char * path\r\n)\n"})}),"\n",(0,s.jsx)(t.p,{children:"Reads a float setting."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"path"})," the path from the root of the settings hierarchy"]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Return"}),": the setting value, or 0 on failure"]}),"\n",(0,s.jsx)(t.h3,{id:"vrreadsettingint",children:"VRReadSettingInt"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:"int VRReadSettingInt(\r\n    const char * path\r\n)\n"})}),"\n",(0,s.jsx)(t.p,{children:"Reads an int setting."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"path"})," the path from the root of the settings hierarchy"]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Return"}),": the setting value, or 0 on failure"]}),"\n",(0,s.jsx)(t.h3,{id:"vrreadsettinglink",children:"VRReadSettingLink"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:"HNode VRReadSettingLink(\r\n    const char * path\r\n)\n"})}),"\n",(0,s.jsx)(t.p,{children:"Reads a link setting."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"path"})," the path from the root of the settings hierarchy"]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Return"}),": the setting value, or 0 on failure"]}),"\n",(0,s.jsx)(t.h3,{id:"vrreadsettingstring",children:"VRReadSettingString"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:"size_t VRReadSettingString(\r\n    const char * path,\r\n    char * buffer,\r\n    size_t bufferSize\r\n)\n"})}),"\n",(0,s.jsx)(t.p,{children:"Reads a string setting."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"path"})," the path from the root of the settings hierarchy"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"buffer"})," pointer to buffer to receive the string data"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"bufferSize"})," the size of the buffer"]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Return"}),": the number of bytes written to the buffer"]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Note"}),": if buffer is null, the function returns the required size of the buffer"]}),"\n",(0,s.jsx)(t.h3,{id:"vrremovecallbacksettingchanged",children:"VRRemoveCallbackSettingChanged"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:"int VRRemoveCallbackSettingChanged(\r\n    const char * path,\r\n    SettingChangedFunc func\r\n)\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Removes a callback that was added with ",(0,s.jsx)(t.a,{href:"#vraddcallbacksettingchanged",children:"VRAddCallbackSettingChanged()"})]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"path"})," the path from the root of the settings hierarchy"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"func"})," the callback function"]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Return"}),": 0 on success, 1 on failure"]}),"\n",(0,s.jsx)(t.h3,{id:"vrremovesettingfromscene",children:"VRRemoveSettingFromScene"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:"int VRRemoveSettingFromScene(\r\n    const char * path\r\n)\n"})}),"\n",(0,s.jsx)(t.p,{children:"Removes a scene override of a setting."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"path"})," the path from the root of the settings hierarchy"]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Return"}),": 0 on success, 1 on failure"]}),"\n",(0,s.jsx)(t.h3,{id:"vrsetsettingcaption",children:"VRSetSettingCaption"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:"int VRSetSettingCaption(\r\n    const char * path,\r\n    const char * caption\r\n)\n"})}),"\n",(0,s.jsx)(t.p,{children:"Assigns a custom caption to a setting, allowing the text displayed to in user interface to be different from the setting name."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"path"})," the path from the root of the settings hierarchy"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"caption"})," the caption to be displayed in the user interface"]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Return"}),": 0 on success, 1 on failure"]}),"\n",(0,s.jsx)(t.h3,{id:"vrsetsettingfilter",children:"VRSetSettingFilter"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:"int VRSetSettingFilter(\r\n    const char * path,\r\n    const char * filter\r\n)\n"})}),"\n",(0,s.jsx)(t.p,{children:"Assigns a filter to a setting. The meaning of the filter depends on the setting type:"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"path"})," the path from the root of the settings hierarchy"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"type"})," the filter to assign"]}),"\n"]}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Setting type"}),(0,s.jsx)(t.th,{children:"Filter meaning"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:'string with type "file", "filesave" or "stream"'}),(0,s.jsx)(t.td,{children:"List of allowable file extensions specified as pairs of strings separated by"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"link"}),(0,s.jsx)(t.td,{children:'List of allowable node types separated by commas, e.g. "StdMaterial,Texture"'})]})]})]}),"\n",(0,s.jsx)(t.h3,{id:"vrsetsettingrange",children:"VRSetSettingRange"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:"int VRSetSettingRange(\r\n    const char * path,\r\n    double minValue,\r\n    double maxValue\r\n)\n"})}),"\n",(0,s.jsx)(t.p,{children:"Assigns a range to a numeric setting."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"path"})," the path from the root of the settings hierarchy"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"minValue"})," the minimum allowable value"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"maxValue"})," the maximum allowable value"]}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"vrsetsettingstep",children:"VRSetSettingStep"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:"int VRSetSettingStep(\r\n    const char * path,\r\n    double step\r\n)\n"})}),"\n",(0,s.jsx)(t.p,{children:"Assigns a step size to a numeric setting."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"path"})," the path from the root of the settings hierarchy"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"step"})," the step size"]}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"vrsetsettingtype",children:"VRSetSettingType"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:"int VRSetSettingType(\r\n    const char * path,\r\n    const char * type\r\n)\n"})}),"\n",(0,s.jsx)(t.p,{children:"Assigns a type to a setting, which determines how the setting is presented in the user interface. The types that can be assigned depend on the data type of the setting:"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"path"})," the path from the root of the settings hierarchy"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"type"})," the type name"]}),"\n"]}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Data type"}),(0,s.jsx)(t.th,{children:"Valid type names"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"string"}),(0,s.jsx)(t.td,{children:"image, file, filesave, stream, dir, font, password, singlelinetext"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"int/float/double"}),(0,s.jsx)(t.td,{children:"slider, logslider, log2slider, collisiongroupmask"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"float array (3 or 4 elements)"}),(0,s.jsx)(t.td,{children:"colour"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"int/float/double array (4 elements)"}),(0,s.jsx)(t.td,{children:"rect, sphere"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"int/float/double array (16 elements)"}),(0,s.jsx)(t.td,{children:"matrix, 2dmatrix"})]})]})]}),"\n",(0,s.jsx)(t.h3,{id:"vrwritesettingarraydouble",children:"VRWriteSettingArrayDouble"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:"int VRWriteSettingArrayDouble(\r\n    const char * path,\r\n    const double * values,\r\n    size_t count\r\n)\n"})}),"\n",(0,s.jsx)(t.p,{children:"Sets the value of a double array setting."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"path"})," the path from the root of the settings hierarchy"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"values"})," the values to set"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"count"})," the number of values"]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Return"}),": 0 on success, 1 on failure"]}),"\n",(0,s.jsx)(t.h3,{id:"vrwritesettingarrayfloat",children:"VRWriteSettingArrayFloat"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:"int VRWriteSettingArrayFloat(\r\n    const char * path,\r\n    const float * values,\r\n    size_t count\r\n)\n"})}),"\n",(0,s.jsx)(t.p,{children:"Sets the value of a float array setting."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"path"})," the path from the root of the settings hierarchy"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"values"})," the values to set"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"count"})," the number of values"]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Return"}),": 0 on success, 1 on failure"]}),"\n",(0,s.jsx)(t.h3,{id:"vrwritesettingarrayint",children:"VRWriteSettingArrayInt"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:"int VRWriteSettingArrayInt(\r\n    const char * path,\r\n    const int * values,\r\n    size_t count\r\n)\n"})}),"\n",(0,s.jsx)(t.p,{children:"Sets the value of an int array setting."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"path"})," the path from the root of the settings hierarchy"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"values"})," the values to set"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"count"})," the number of values"]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Return"}),": 0 on success, 1 on failure"]}),"\n",(0,s.jsx)(t.h3,{id:"vrwritesettingbool",children:"VRWriteSettingBool"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:"int VRWriteSettingBool(\r\n    const char * path,\r\n    char value\r\n)\n"})}),"\n",(0,s.jsx)(t.p,{children:"Sets the value of a boolean setting."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"path"})," the path from the root of the settings hierarchy"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"value"})," the value to set"]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Return"}),": 0 on success, 1 on failure"]}),"\n",(0,s.jsx)(t.h3,{id:"vrwritesettingdouble",children:"VRWriteSettingDouble"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:"int VRWriteSettingDouble(\r\n    const char * path,\r\n    double value\r\n)\n"})}),"\n",(0,s.jsx)(t.p,{children:"Sets the value of a double setting."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"path"})," the path from the root of the settings hierarchy"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"value"})," the value to set"]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Return"}),": 0 on success, 1 on failure"]}),"\n",(0,s.jsx)(t.h3,{id:"vrwritesettingfloat",children:"VRWriteSettingFloat"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:"int VRWriteSettingFloat(\r\n    const char * path,\r\n    float value\r\n)\n"})}),"\n",(0,s.jsx)(t.p,{children:"Sets the value of a float setting."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"path"})," the path from the root of the settings hierarchy"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"value"})," the value to set"]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Return"}),": 0 on success, 1 on failure"]}),"\n",(0,s.jsx)(t.h3,{id:"vrwritesettingint",children:"VRWriteSettingInt"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:"int VRWriteSettingInt(\r\n    const char * path,\r\n    int value\r\n)\n"})}),"\n",(0,s.jsx)(t.p,{children:"Sets the value of an int setting."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"path"})," the path from the root of the settings hierarchy"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"value"})," the value to set"]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Return"}),": 0 on success, 1 on failure"]}),"\n",(0,s.jsx)(t.h3,{id:"vrwritesettinglink",children:"VRWriteSettingLink"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:"int VRWriteSettingLink(\r\n    const char * path,\r\n    HNode value\r\n)\n"})}),"\n",(0,s.jsx)(t.p,{children:"Sets the value of a link setting."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"path"})," the path from the root of the settings hierarchy"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"value"})," the value to set"]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Return"}),": 0 on success, 1 on failure"]}),"\n",(0,s.jsx)(t.h3,{id:"vrwritesettingstring",children:"VRWriteSettingString"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:"int VRWriteSettingString(\r\n    const char * path,\r\n    const char * value\r\n)\n"})}),"\n",(0,s.jsx)(t.p,{children:"Sets the value of a string setting."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"path"})," the path from the root of the settings hierarchy"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"the"})," value to set"]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Return"}),": 0 on success, 1 on failure"]})]})}function o(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>l});var r=n(96540);const s={},i=r.createContext(s);function a(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);
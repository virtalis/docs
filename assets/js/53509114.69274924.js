"use strict";(self.webpackChunkvirtalis_docs=self.webpackChunkvirtalis_docs||[]).push([[38925],{77741:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>t,default:()=>h,frontMatter:()=>a,metadata:()=>d,toc:()=>l});const d=JSON.parse('{"id":"visionary-render-programming/reference/c-api/classes/vrtree-cpp-nodemanager","title":"vrtree_cpp::NodeManager","description":"Utility class providing an interface for responding to changes to specified metanodes; with an additional update function, which will be called every time a frame is drawn.","source":"@site/docs/visionary-render-programming/reference/c-api/classes/vrtree-cpp-nodemanager.mdx","sourceDirName":"visionary-render-programming/reference/c-api/classes","slug":"/visionary-render-programming/reference/c-api/classes/vrtree-cpp-nodemanager","permalink":"/visionary-render-programming/reference/c-api/classes/vrtree-cpp-nodemanager","draft":false,"unlisted":false,"editUrl":"https://github.com/virtalis/docs/tree/master/docs/visionary-render-programming/reference/c-api/classes/vrtree-cpp-nodemanager.mdx","tags":[],"version":"current","lastUpdatedAt":1730817102000,"frontMatter":{"title":"vrtree_cpp::NodeManager","summary":"Utility class providing an interface for responding to changes to specified metanodes; with an additional update function, which will be called every time a frame is drawn."},"sidebar":"visionaryRenderProgrammingSidebar","previous":{"title":"vrtree_cpp::HTypeR","permalink":"/visionary-render-programming/reference/c-api/classes/vrtree-cpp-htyper"},"next":{"title":"vrtree_cpp::ObserverWrapper","permalink":"/visionary-render-programming/reference/c-api/classes/vrtree-cpp-observerwrapper"}}');var i=n(74848),s=n(28453);const a={title:"vrtree_cpp::NodeManager",summary:"Utility class providing an interface for responding to changes to specified metanodes; with an additional update function, which will be called every time a frame is drawn."},t="vrtree_cpp::NodeManager",c={},l=[{value:"Public Functions",id:"public-functions",level:2},{value:"Public Functions Documentation",id:"public-functions-documentation",level:2},{value:"nodeChildAdded",id:"nodechildadded",level:3},{value:"nodeChildRemoved",id:"nodechildremoved",level:3},{value:"nodeCreated",id:"nodecreated",level:3},{value:"nodeDestroying",id:"nodedestroying",level:3},{value:"nodeParentChanged",id:"nodeparentchanged",level:3},{value:"nodeRenamed",id:"noderenamed",level:3},{value:"nodeValuesChanged",id:"nodevalueschanged",level:3},{value:"registerObserver",id:"registerobserver",level:3},{value:"registerUpdateable",id:"registerupdateable",level:3},{value:"unRegisterObserver",id:"unregisterobserver",level:3},{value:"unRegisterUpdateable",id:"unregisterupdateable",level:3},{value:"update",id:"update",level:3}];function o(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"vrtree_cppnodemanager",children:"vrtree_cpp::NodeManager"})}),"\n",(0,i.jsx)(r.p,{children:"Utility class providing an interface for responding to changes to specified metanodes; with an additional update function, which will be called every time a frame is drawn."}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.code,{children:"#include <interface_helpers.hpp>"})}),"\n",(0,i.jsx)(r.h2,{id:"public-functions",children:"Public Functions"}),"\n",(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.th,{children:"Type"}),(0,i.jsx)(r.th,{children:"Name"})]})}),(0,i.jsxs)(r.tbody,{children:[(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"virtual void"}),(0,i.jsxs)(r.td,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"#nodechildadded",children:"nodeChildAdded"})}),"(",(0,i.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/namespaces/vrtree-cpp#typedef-hnoder",children:"HNodeR"})," & vrParent, ",(0,i.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/namespaces/vrtree-cpp#typedef-hnoder",children:"HNodeR"})," & vrChild)"]})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"virtual void"}),(0,i.jsxs)(r.td,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"#nodechildremoved",children:"nodeChildRemoved"})}),"(",(0,i.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/namespaces/vrtree-cpp#typedef-hnoder",children:"HNodeR"})," & vrParent, ",(0,i.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/namespaces/vrtree-cpp#typedef-hnoder",children:"HNodeR"})," & vrChild)"]})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"virtual void"}),(0,i.jsxs)(r.td,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"#nodecreated",children:"nodeCreated"})}),"(",(0,i.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/namespaces/vrtree-cpp#typedef-hnoder",children:"HNodeR"})," & vrNode)"]})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"virtual void"}),(0,i.jsxs)(r.td,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"#nodedestroying",children:"nodeDestroying"})}),"(",(0,i.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/namespaces/vrtree-cpp#typedef-hnoder",children:"HNodeR"})," & vrNode)"]})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"virtual void"}),(0,i.jsxs)(r.td,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"#nodeparentchanged",children:"nodeParentChanged"})}),"(",(0,i.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/namespaces/vrtree-cpp#typedef-hnoder",children:"HNodeR"})," & vrNode, ",(0,i.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/namespaces/vrtree-cpp#typedef-hnoder",children:"HNodeR"})," & vrNewParent, ",(0,i.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/namespaces/vrtree-cpp#typedef-hnoder",children:"HNodeR"})," & vrOldParent)"]})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"virtual void"}),(0,i.jsxs)(r.td,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"#noderenamed",children:"nodeRenamed"})}),"(",(0,i.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/namespaces/vrtree-cpp#typedef-hnoder",children:"HNodeR"})," & vrNode)"]})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"virtual void"}),(0,i.jsxs)(r.td,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"#nodevalueschanged",children:"nodeValuesChanged"})}),"(",(0,i.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/namespaces/vrtree-cpp#typedef-hnoder",children:"HNodeR"})," & vrNode)"]})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"void"}),(0,i.jsxs)(r.td,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"#registerobserver",children:"registerObserver"})}),"(const char * metaName)",(0,i.jsx)("br",{}),"Registers a class implementing static observer functions as an observer of the specified metanode."]})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"void"}),(0,i.jsxs)(r.td,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"#registerupdateable",children:"registerUpdateable"})}),"()"]})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"void"}),(0,i.jsxs)(r.td,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"#unregisterobserver",children:"unRegisterObserver"})}),"(const char * metaName)",(0,i.jsx)("br",{}),"Unregisters a class implementing static observer functions as an observer of the specified metanode."]})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"void"}),(0,i.jsxs)(r.td,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"#unregisterupdateable",children:"unRegisterUpdateable"})}),"()"]})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"virtual void"}),(0,i.jsxs)(r.td,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"#update",children:"update"})}),"(double deltaTime)"]})]})]})]}),"\n",(0,i.jsx)(r.h2,{id:"public-functions-documentation",children:"Public Functions Documentation"}),"\n",(0,i.jsx)(r.h3,{id:"nodechildadded",children:"nodeChildAdded"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-cpp",children:"inline virtual void nodeChildAdded(\r\n    HNodeR & vrParent,\r\n    HNodeR & vrChild\r\n)\n"})}),"\n",(0,i.jsx)(r.h3,{id:"nodechildremoved",children:"nodeChildRemoved"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-cpp",children:"inline virtual void nodeChildRemoved(\r\n    HNodeR & vrParent,\r\n    HNodeR & vrChild\r\n)\n"})}),"\n",(0,i.jsx)(r.h3,{id:"nodecreated",children:"nodeCreated"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-cpp",children:"inline virtual void nodeCreated(\r\n    HNodeR & vrNode\r\n)\n"})}),"\n",(0,i.jsx)(r.h3,{id:"nodedestroying",children:"nodeDestroying"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-cpp",children:"inline virtual void nodeDestroying(\r\n    HNodeR & vrNode\r\n)\n"})}),"\n",(0,i.jsx)(r.h3,{id:"nodeparentchanged",children:"nodeParentChanged"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-cpp",children:"inline virtual void nodeParentChanged(\r\n    HNodeR & vrNode,\r\n    HNodeR & vrNewParent,\r\n    HNodeR & vrOldParent\r\n)\n"})}),"\n",(0,i.jsx)(r.h3,{id:"noderenamed",children:"nodeRenamed"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-cpp",children:"inline virtual void nodeRenamed(\r\n    HNodeR & vrNode\r\n)\n"})}),"\n",(0,i.jsx)(r.h3,{id:"nodevalueschanged",children:"nodeValuesChanged"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-cpp",children:"inline virtual void nodeValuesChanged(\r\n    HNodeR & vrNode\r\n)\n"})}),"\n",(0,i.jsx)(r.h3,{id:"registerobserver",children:"registerObserver"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-cpp",children:"inline void registerObserver(\r\n    const char * metaName\r\n)\n"})}),"\n",(0,i.jsx)(r.p,{children:"Registers a class implementing static observer functions as an observer of the specified metanode."}),"\n",(0,i.jsx)(r.h3,{id:"registerupdateable",children:"registerUpdateable"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-cpp",children:"inline void registerUpdateable()\n"})}),"\n",(0,i.jsx)(r.h3,{id:"unregisterobserver",children:"unRegisterObserver"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-cpp",children:"inline void unRegisterObserver(\r\n    const char * metaName\r\n)\n"})}),"\n",(0,i.jsx)(r.p,{children:"Unregisters a class implementing static observer functions as an observer of the specified metanode."}),"\n",(0,i.jsx)(r.h3,{id:"unregisterupdateable",children:"unRegisterUpdateable"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-cpp",children:"inline void unRegisterUpdateable()\n"})}),"\n",(0,i.jsx)(r.h3,{id:"update",children:"update"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-cpp",children:"inline virtual void update(\r\n    double deltaTime\r\n)\n"})})]})}function h(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},28453:(e,r,n)=>{n.d(r,{R:()=>a,x:()=>t});var d=n(96540);const i={},s=d.createContext(i);function a(e){const r=d.useContext(s);return d.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function t(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),d.createElement(s.Provider,{value:r},e.children)}}}]);
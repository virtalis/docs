"use strict";(self.webpackChunkvirtalis_docs=self.webpackChunkvirtalis_docs||[]).push([[37611],{18383:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"visionary-render-programming/plugins/best-practices","title":"Best Practices","description":"Handles","source":"@site/docs/visionary-render-programming/plugins/best-practices.mdx","sourceDirName":"visionary-render-programming/plugins","slug":"/visionary-render-programming/plugins/best-practices","permalink":"/visionary-render-programming/plugins/best-practices","draft":false,"unlisted":false,"editUrl":"https://github.com/virtalis/docs/tree/master/docs/visionary-render-programming/plugins/best-practices.mdx","tags":[],"version":"current","lastUpdatedAt":1730817102000,"sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"visionaryRenderProgrammingSidebar","previous":{"title":"Introduction","permalink":"/visionary-render-programming/plugins/introduction"},"next":{"title":"Plugins Window","permalink":"/visionary-render-programming/plugins/getting-started/plugins-window"}}');var s=t(74848),i=t(28453);const o={sidebar_position:2},a="Best Practices",c={},d=[{value:"Handles",id:"handles",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"best-practices",children:"Best Practices"})}),"\n",(0,s.jsx)(n.h2,{id:"handles",children:"Handles"}),"\n",(0,s.jsxs)(n.p,{children:["Handles are used to reference internal objects such as nodes. If you request a handle using any API function that returns one (",(0,s.jsx)(n.code,{children:"VRGetScenesNode"}),", etc.), you must close it when you are finished, using ",(0,s.jsx)(n.code,{children:"VRCloseNodeHandle"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Handles passed into plugin API functions (e.g. ",(0,s.jsx)(n.code,{children:"VRPImportProc"}),") and callback functions (e.g. those registered with ",(0,s.jsx)(n.code,{children:"VRAddCallbackUpdate"}),") are managed by the host application and do not need to be closed. They are closed when the callback function returns. If you require a given handle to persist beyond the end of the callback function, use ",(0,s.jsx)(n.code,{children:"VRCopyNodeHandle"})," to create a new handle to the same node, remembering to close the copy yourself when you are done with it."]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var r=t(96540);const s={},i=r.createContext(s);function o(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);
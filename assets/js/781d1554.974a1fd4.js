"use strict";(self.webpackChunkvirtalis_docs=self.webpackChunkvirtalis_docs||[]).push([[6348],{47014:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>d,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"visionary-render-programming/reference/c-api/classes/metanodes/meta-buffered-stack","title":"Meta_BufferedStack","description":"Module: Metanodes / Definitions","source":"@site/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-buffered-stack.mdx","sourceDirName":"visionary-render-programming/reference/c-api/classes/metanodes","slug":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-buffered-stack","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-buffered-stack","draft":false,"unlisted":false,"editUrl":"https://github.com/virtalis/docs/tree/master/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-buffered-stack.mdx","tags":[],"version":"current","frontMatter":{"title":"Meta_BufferedStack","summary":"A BufferedStack is a stack that renders its contents into a texture internally to improve performance."},"sidebar":"visionaryRenderProgrammingSidebar","previous":{"title":"Meta_Bone","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-bone"},"next":{"title":"Meta_ButtonGroup","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-button-group"}}');var s=n(74848),i=n(28453);const d={title:"Meta_BufferedStack",summary:"A BufferedStack is a stack that renders its contents into a texture internally to improve performance."},a="Meta_BufferedStack",c={},l=[{value:"Public Types",id:"public-types",level:2},{value:"Public Types Documentation",id:"public-types-documentation",level:2},{value:"enum IDX",id:"enum-idx",level:3}];function o(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"meta_bufferedstack",children:"Meta_BufferedStack"})}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Module:"})," ",(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/",children:"Metanodes"})})," ",(0,s.jsx)(t.strong,{children:"/"})," ",(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/definitions",children:"Definitions"})})]}),"\n",(0,s.jsx)(t.p,{children:"A BufferedStack is a stack that renders its contents into a texture internally to improve performance."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.code,{children:"#include <meta_gui.hpp>"})}),"\n",(0,s.jsx)(t.h2,{id:"public-types",children:"Public Types"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Type"}),(0,s.jsx)(t.th,{children:"Name"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"enum"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"#enum-idx",children:"IDX"})})," { Idx_Enabled, Idx_Position, Idx_SizingMode, Idx_Size, Idx_Direction, Idx_HAlign, Idx_VAlign, Idx_Gap, Idx_Style, Idx_Resolution, Idx_MipmapEnabled }",(0,s.jsx)("br",{}),"Property index."]})]})})]}),"\n",(0,s.jsx)(t.h2,{id:"public-types-documentation",children:"Public Types Documentation"}),"\n",(0,s.jsx)(t.h3,{id:"enum-idx",children:"enum IDX"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Enumerator"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Idx_Enabled"}),(0,s.jsx)(t.td,{}),(0,s.jsx)(t.td,{children:"bool - When enabled, draws itself and its children"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Idx_Position"}),(0,s.jsx)(t.td,{}),(0,s.jsx)(t.td,{children:"vec3f - Position of the panel relative to its parent"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Idx_SizingMode"}),(0,s.jsx)(t.td,{}),(0,s.jsx)(t.td,{children:"SizingMode (int) - How the panel sizes itself in respect to its contents"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Idx_Size"}),(0,s.jsx)(t.td,{}),(0,s.jsxs)(t.td,{children:["vec2f - Size of the panel, when ",(0,s.jsx)(t.code,{children:"SizingMode==Fixed"})]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Idx_Direction"}),(0,s.jsx)(t.td,{}),(0,s.jsx)(t.td,{children:"Direction (int) - The direction to stack the child objects"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Idx_HAlign"}),(0,s.jsx)(t.td,{}),(0,s.jsx)(t.td,{children:"HAlign (int) - How to align the objects horizontally"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Idx_VAlign"}),(0,s.jsx)(t.td,{}),(0,s.jsx)(t.td,{children:"VAlign (int) - How to align the objects vertically"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Idx_Gap"}),(0,s.jsx)(t.td,{}),(0,s.jsx)(t.td,{children:"float - Specifies the gap size between objects (padding)"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Idx_Style"}),(0,s.jsx)(t.td,{}),(0,s.jsxs)(t.td,{children:["link - A Panel style (",(0,s.jsx)(t.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-coloured-panel-style",children:"Meta_ColouredPanelStyle"}),", ",(0,s.jsx)(t.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-gradient-panel-style",children:"Meta_GradientPanelStyle"}),", ",(0,s.jsx)(t.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-textured-panel-style",children:"Meta_TexturedPanelStyle"}),")"]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Idx_Resolution"}),(0,s.jsx)(t.td,{}),(0,s.jsx)(t.td,{children:"float Specifies the resolution of the frame buffer object used to render this stack"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Idx_MipmapEnabled"}),(0,s.jsx)(t.td,{}),(0,s.jsx)(t.td,{children:"bool When enabled, generates mipmaps to improve quality when rendering at smaller sizes"})]})]})]}),"\n",(0,s.jsx)(t.p,{children:"Property index."})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>d,x:()=>a});var r=n(96540);const s={},i=r.createContext(s);function d(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);
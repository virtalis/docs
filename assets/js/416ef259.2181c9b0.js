"use strict";(self.webpackChunkvirtalis_docs=self.webpackChunkvirtalis_docs||[]).push([[48843],{16890:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>d,contentTitle:()=>a,default:()=>c,frontMatter:()=>l,metadata:()=>n,toc:()=>h});const n=JSON.parse('{"id":"visionary-render-programming/reference/lua-api/modules/settings","title":"Settings","description":"Functions for accessing settings.","source":"@site/docs/visionary-render-programming/reference/lua-api/modules/settings.mdx","sourceDirName":"visionary-render-programming/reference/lua-api/modules","slug":"/visionary-render-programming/reference/lua-api/modules/settings","permalink":"/visionary-render-programming/reference/lua-api/modules/settings","draft":false,"unlisted":false,"editUrl":"https://github.com/virtalis/docs/tree/master/docs/visionary-render-programming/reference/lua-api/modules/settings.mdx","tags":[],"version":"current","lastUpdatedAt":1751475253000,"frontMatter":{"title":"Settings","summary":"Functions for accessing settings."},"sidebar":"visionaryRenderProgrammingSidebar","previous":{"title":"Script Editor","permalink":"/visionary-render-programming/reference/lua-api/modules/script-editor"},"next":{"title":"Tree","permalink":"/visionary-render-programming/reference/lua-api/modules/tree"}}');var s=t(74848),i=t(28453);const l={title:"Settings",summary:"Functions for accessing settings."},a="Settings",d={},h=[{value:"Functions",id:"functions",level:2},{value:"Functions Documentation",id:"functions-documentation",level:2},{value:"vrSettingAddToScene",id:"vrsettingaddtoscene",level:3},{value:"vrSettingCreateArrayDouble",id:"vrsettingcreatearraydouble",level:3},{value:"vrSettingCreateArrayFloat",id:"vrsettingcreatearrayfloat",level:3},{value:"vrSettingCreateArrayInt",id:"vrsettingcreatearrayint",level:3},{value:"vrSettingCreateBool",id:"vrsettingcreatebool",level:3},{value:"vrSettingCreateDouble",id:"vrsettingcreatedouble",level:3},{value:"vrSettingCreateFloat",id:"vrsettingcreatefloat",level:3},{value:"vrSettingCreateInt",id:"vrsettingcreateint",level:3},{value:"vrSettingCreateLink",id:"vrsettingcreatelink",level:3},{value:"vrSettingCreateString",id:"vrsettingcreatestring",level:3},{value:"vrSettingGet",id:"vrsettingget",level:3},{value:"vrSettingGetNode",id:"vrsettinggetnode",level:3},{value:"vrSettingGetRoot",id:"vrsettinggetroot",level:3},{value:"vrSettingGetSceneRoot",id:"vrsettinggetsceneroot",level:3},{value:"vrSettingRead",id:"vrsettingread",level:3},{value:"vrSettingRemoveFromScene",id:"vrsettingremovefromscene",level:3},{value:"vrSettingSetCaption",id:"vrsettingsetcaption",level:3},{value:"vrSettingSetFilter",id:"vrsettingsetfilter",level:3},{value:"vrSettingSetStep",id:"vrsettingsetstep",level:3},{value:"vrSettingSetType",id:"vrsettingsettype",level:3},{value:"vrSettingWrite",id:"vrsettingwrite",level:3}];function o(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"settings",children:"Settings"})}),"\n",(0,s.jsx)(r.p,{children:"Functions for accessing settings."}),"\n",(0,s.jsx)(r.h2,{id:"functions",children:"Functions"}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Type"}),(0,s.jsx)(r.th,{children:"Name"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"void"}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"#vrsettingaddtoscene",children:"vrSettingAddToScene"})}),"(string path, Any defaultVal, Any slot =nil, Any complete =nil, string typestr =0)",(0,s.jsx)("br",{}),"Creates a scene setting as an override to an existing setting or a scene-only setting."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"void"}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"#vrsettingcreatearraydouble",children:"vrSettingCreateArrayDouble"})}),"(string path, number length, ",(0,s.jsx)(r.a,{href:"/visionary-render-programming/reference/lua-api/classes/vrnode",children:"vrnode"})," user =nil, number ... )",(0,s.jsx)("br",{}),"Creates a new double array user setting."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"void"}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"#vrsettingcreatearrayfloat",children:"vrSettingCreateArrayFloat"})}),"(string path, number length, ",(0,s.jsx)(r.a,{href:"/visionary-render-programming/reference/lua-api/classes/vrnode",children:"vrnode"})," user =nil, number ... )",(0,s.jsx)("br",{}),"Creates a new float array user setting."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"void"}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"#vrsettingcreatearrayint",children:"vrSettingCreateArrayInt"})}),"(string path, number length, ",(0,s.jsx)(r.a,{href:"/visionary-render-programming/reference/lua-api/classes/vrnode",children:"vrnode"})," user =nil, number ... )",(0,s.jsx)("br",{}),"Creates a new integer array user setting."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"void"}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"#vrsettingcreatebool",children:"vrSettingCreateBool"})}),"(string path, boolean defaultVal =false, ",(0,s.jsx)(r.a,{href:"/visionary-render-programming/reference/lua-api/classes/vrnode",children:"vrnode"})," user =nil)",(0,s.jsx)("br",{}),"Creates a new boolean user setting."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"void"}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"#vrsettingcreatedouble",children:"vrSettingCreateDouble"})}),"(string path, number defaultVal =0.0, ",(0,s.jsx)(r.a,{href:"/visionary-render-programming/reference/lua-api/classes/vrnode",children:"vrnode"})," user =nil, number minVal =VR_DOUBLE_MIN, number maxVal =VR_DOUBLE_MAX)",(0,s.jsx)("br",{}),"Creates a new double user setting."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"void"}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"#vrsettingcreatefloat",children:"vrSettingCreateFloat"})}),"(string path, number defaultVal =0.0, ",(0,s.jsx)(r.a,{href:"/visionary-render-programming/reference/lua-api/classes/vrnode",children:"vrnode"})," user =nil, number minVal =VR_FLOAT_MIN, number maxVal =VR_FLOAT_MAX)",(0,s.jsx)("br",{}),"Creates a new float user setting."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"void"}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"#vrsettingcreateint",children:"vrSettingCreateInt"})}),"(string path, number defaultVal =0, ",(0,s.jsx)(r.a,{href:"/visionary-render-programming/reference/lua-api/classes/vrnode",children:"vrnode"})," user =nil, number minVal =VR_INT_MIN, number maxVal =VR_INT_MAX)",(0,s.jsx)("br",{}),"Creates a new integer user setting."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"void"}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"#vrsettingcreatelink",children:"vrSettingCreateLink"})}),"(string path, string filter =0, ",(0,s.jsx)(r.a,{href:"/visionary-render-programming/reference/lua-api/classes/vrnode",children:"vrnode"})," user =nil)",(0,s.jsx)("br",{}),"Creates a new link user setting."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"void"}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"#vrsettingcreatestring",children:"vrSettingCreateString"})}),"(string path, string defaultVal =0, ",(0,s.jsx)(r.a,{href:"/visionary-render-programming/reference/lua-api/classes/vrnode",children:"vrnode"})," user =nil)",(0,s.jsx)("br",{}),"Creates a new string user setting."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"vrsetting"}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"#vrsettingget",children:"vrSettingGet"})}),"(string path, ",(0,s.jsx)(r.a,{href:"/visionary-render-programming/reference/lua-api/classes/vrnode",children:"vrnode"})," user =nil)",(0,s.jsx)("br",{}),"Gets an application setting from the user registry, or a scene override if it exists."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"vrsetting"}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"#vrsettinggetnode",children:"vrSettingGetNode"})}),"(string path, ",(0,s.jsx)(r.a,{href:"/visionary-render-programming/reference/lua-api/classes/vrnode",children:"vrnode"})," user =nil)",(0,s.jsx)("br",{}),"Gets an application setting node from the user registry, or a scene override if it exists."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"/visionary-render-programming/reference/lua-api/classes/vrnode",children:"vrnode"})}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"#vrsettinggetroot",children:"vrSettingGetRoot"})}),"()",(0,s.jsx)("br",{}),"Gets the node associated with the root of the settings hierarchy."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"/visionary-render-programming/reference/lua-api/classes/vrnode",children:"vrnode"})}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"#vrsettinggetsceneroot",children:"vrSettingGetSceneRoot"})}),"()",(0,s.jsx)("br",{}),"Gets the root of the settings overrides in the scenes tree if it exists."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Any"}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"#vrsettingread",children:"vrSettingRead"})}),"(string path, ",(0,s.jsx)(r.a,{href:"/visionary-render-programming/reference/lua-api/classes/vrnode",children:"vrnode"})," user =nil)",(0,s.jsx)("br",{}),"Reads the value of a setting."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"boolean"}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"#vrsettingremovefromscene",children:"vrSettingRemoveFromScene"})}),"(string path)",(0,s.jsx)("br",{}),"Removes a scene setting."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"void"}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"#vrsettingsetcaption",children:"vrSettingSetCaption"})}),"(string path, string caption, vrnode user)",(0,s.jsx)("br",{}),"Assigns a custom caption to a setting, allowing the text displayed in user interface to be different from the setting name."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"void"}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"#vrsettingsetfilter",children:"vrSettingSetFilter"})}),"(string path, string filter, vrnode user)",(0,s.jsx)("br",{}),"Assigns a filter to a setting. The meaning of the filter depends on the setting type."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"void"}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"#vrsettingsetstep",children:"vrSettingSetStep"})}),"(string path, number step, vrnode user)",(0,s.jsx)("br",{}),"Assigns a step size to a numerical setting."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"void"}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"#vrsettingsettype",children:"vrSettingSetType"})}),"(string path, string type, vrnode user)",(0,s.jsx)("br",{}),"Assigns a type to a setting, which determines how the setting is presented in the user interface."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"void"}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"#vrsettingwrite",children:"vrSettingWrite"})}),"(string path, Any value, ",(0,s.jsx)(r.a,{href:"/visionary-render-programming/reference/lua-api/classes/vrnode",children:"vrnode"})," user =nil)",(0,s.jsx)("br",{}),"Writes the value of a setting."]})]})]})]}),"\n",(0,s.jsx)(r.h2,{id:"functions-documentation",children:"Functions Documentation"}),"\n",(0,s.jsx)(r.h3,{id:"vrsettingaddtoscene",children:"vrSettingAddToScene"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-lua",children:"void vrSettingAddToScene(\r\n    string path,\r\n    Any defaultVal,\r\n    Any slot =nil,\r\n    Any complete =nil,\r\n    string typestr =0\r\n)\n"})}),"\n",(0,s.jsx)(r.p,{children:"Creates a scene setting as an override to an existing setting or a scene-only setting."}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"path"})," Path to the setting (relative to the registry root)"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"defaultVal"})," Default value if the scene setting is not an override"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"slot"})," Function to call when the setting value changes"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"complete"})," Function to call when the node has been created, which may not be immediately"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"typestr"})," Hint at which number type should be used instead of a double to create a scene-only setting (int, float, world)"]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"vrsettingcreatearraydouble",children:"vrSettingCreateArrayDouble"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-lua",children:"void vrSettingCreateArrayDouble(\r\n    string path,\r\n    number length,\r\n    vrnode user =nil,\r\n    number ... \r\n)\n"})}),"\n",(0,s.jsx)(r.p,{children:"Creates a new double array user setting."}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"path"})," Path to the setting (relative to the registry root)"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"length"})," The length of the array (2, 3, 4, 9 or 16)"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"user"})," The user that this setting belongs to (defaults to the current user)"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"..."})," The default value(s) to apply to the array elements"]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"vrsettingcreatearrayfloat",children:"vrSettingCreateArrayFloat"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-lua",children:"void vrSettingCreateArrayFloat(\r\n    string path,\r\n    number length,\r\n    vrnode user =nil,\r\n    number ... \r\n)\n"})}),"\n",(0,s.jsx)(r.p,{children:"Creates a new float array user setting."}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"path"})," Path to the setting (relative to the registry root)"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"length"})," The length of the array (2, 3, 4, 9 or 16)"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"user"})," The user that this setting belongs to (defaults to the current user)"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"..."})," The default value(s) to apply to the array elements"]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"vrsettingcreatearrayint",children:"vrSettingCreateArrayInt"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-lua",children:"void vrSettingCreateArrayInt(\r\n    string path,\r\n    number length,\r\n    vrnode user =nil,\r\n    number ... \r\n)\n"})}),"\n",(0,s.jsx)(r.p,{children:"Creates a new integer array user setting."}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"path"})," Path to the setting (relative to the registry root)"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"length"})," The length of the array (2, 3 or 4)"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"user"})," The user that this setting belongs to (defaults to the current user)"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"..."})," The default value(s) to apply to the array elements"]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"vrsettingcreatebool",children:"vrSettingCreateBool"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-lua",children:"void vrSettingCreateBool(\r\n    string path,\r\n    boolean defaultVal =false,\r\n    vrnode user =nil\r\n)\n"})}),"\n",(0,s.jsx)(r.p,{children:"Creates a new boolean user setting."}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"path"})," Path to the setting (relative to the registry root)"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"defaultVal"})," The default value to apply to the setting"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"user"})," The user that this setting belongs to (defaults to the current user)"]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"vrsettingcreatedouble",children:"vrSettingCreateDouble"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-lua",children:"void vrSettingCreateDouble(\r\n    string path,\r\n    number defaultVal =0.0,\r\n    vrnode user =nil,\r\n    number minVal =VR_DOUBLE_MIN,\r\n    number maxVal =VR_DOUBLE_MAX\r\n)\n"})}),"\n",(0,s.jsx)(r.p,{children:"Creates a new double user setting."}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"path"})," Path to the setting (relative to the registry root)"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"defaultVal"})," The default value to apply to the setting"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"user"})," The user that this setting belongs to (defaults to the current user)"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"minVal"})," The minimum value that can be assigned to the setting"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"maxVal"})," The maximum value that can be assigned to the setting"]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"vrsettingcreatefloat",children:"vrSettingCreateFloat"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-lua",children:"void vrSettingCreateFloat(\r\n    string path,\r\n    number defaultVal =0.0,\r\n    vrnode user =nil,\r\n    number minVal =VR_FLOAT_MIN,\r\n    number maxVal =VR_FLOAT_MAX\r\n)\n"})}),"\n",(0,s.jsx)(r.p,{children:"Creates a new float user setting."}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"path"})," Path to the setting (relative to the registry root)"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"defaultVal"})," The default value to apply to the setting"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"user"})," The user that this setting belongs to (defaults to the current user)"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"minVal"})," The minimum value that can be assigned to the setting"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"maxVal"})," The maximum value that can be assigned to the setting"]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"vrsettingcreateint",children:"vrSettingCreateInt"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-lua",children:"void vrSettingCreateInt(\r\n    string path,\r\n    number defaultVal =0,\r\n    vrnode user =nil,\r\n    number minVal =VR_INT_MIN,\r\n    number maxVal =VR_INT_MAX\r\n)\n"})}),"\n",(0,s.jsx)(r.p,{children:"Creates a new integer user setting."}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"path"})," Path to the setting (relative to the registry root)"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"defaultVal"})," The default value to apply to the setting"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"user"})," The user that this setting belongs to (defaults to the current user)"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"minVal"})," The minimum value that can be assigned to the setting"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"maxVal"})," The maximum value that can be assigned to the setting"]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"vrsettingcreatelink",children:"vrSettingCreateLink"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-lua",children:"void vrSettingCreateLink(\r\n    string path,\r\n    string filter =0,\r\n    vrnode user =nil\r\n)\n"})}),"\n",(0,s.jsx)(r.p,{children:"Creates a new link user setting."}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"path"})," Path to the setting (relative to the registry root)"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"filter"}),' A comma-separated list of metanode types that can be linked to (e.g. "Assembly" or "Visual,Sequence")']}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"user"})," The user that this setting belongs to (defaults to the current user)"]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"vrsettingcreatestring",children:"vrSettingCreateString"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-lua",children:"void vrSettingCreateString(\r\n    string path,\r\n    string defaultVal =0,\r\n    vrnode user =nil\r\n)\n"})}),"\n",(0,s.jsx)(r.p,{children:"Creates a new string user setting."}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"path"})," Path to the setting (relative to the registry root)"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"defaultVal"})," The default value to apply to the setting"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"user"})," The user that this setting belongs to (defaults to the current user)"]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"vrsettingget",children:"vrSettingGet"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-lua",children:"vrsetting vrSettingGet(\r\n    string path,\r\n    vrnode user =nil\r\n)\n"})}),"\n",(0,s.jsx)(r.p,{children:"Gets an application setting from the user registry, or a scene override if it exists."}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"path"})," Path to the setting (relative to the registry root)"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"user"})," The user that this setting belongs to (defaults to the current user)"]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"vrsettinggetnode",children:"vrSettingGetNode"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-lua",children:"vrsetting vrSettingGetNode(\r\n    string path,\r\n    vrnode user =nil\r\n)\n"})}),"\n",(0,s.jsx)(r.p,{children:"Gets an application setting node from the user registry, or a scene override if it exists."}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"path"})," Path to the setting (relative to the registry root)"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"user"})," The user that this setting belongs to (defaults to the current user)"]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"vrsettinggetroot",children:"vrSettingGetRoot"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-lua",children:"vrnode vrSettingGetRoot()\n"})}),"\n",(0,s.jsx)(r.p,{children:"Gets the node associated with the root of the settings hierarchy."}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Return"}),": The user settings root node, or nil"]}),"\n",(0,s.jsx)(r.h3,{id:"vrsettinggetsceneroot",children:"vrSettingGetSceneRoot"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-lua",children:"vrnode vrSettingGetSceneRoot()\n"})}),"\n",(0,s.jsx)(r.p,{children:"Gets the root of the settings overrides in the scenes tree if it exists."}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Return"}),": The scene overrides root node, or nil"]}),"\n",(0,s.jsx)(r.h3,{id:"vrsettingread",children:"vrSettingRead"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{children:"Any vrSettingRead(\r\n    string path,\r\n    vrnode user =nil\r\n)\n"})}),"\n",(0,s.jsx)(r.p,{children:"Reads the value of a setting."}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"path"})," Path to the setting (relative to the registry root"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"user"})," The user that this setting belongs to (defaults to the current user)"]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"vrsettingremovefromscene",children:"vrSettingRemoveFromScene"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-lua",children:"boolean vrSettingRemoveFromScene(\r\n    string path\r\n)\n"})}),"\n",(0,s.jsx)(r.p,{children:"Removes a scene setting."}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"path"})," Path to the setting (relative to the registry root)"]}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Return"}),": True if the setting was removed"]}),"\n",(0,s.jsx)(r.h3,{id:"vrsettingsetcaption",children:"vrSettingSetCaption"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-lua",children:"void vrSettingSetCaption(\r\n    string path,\r\n    string caption,\r\n    vrnode user\r\n)\n"})}),"\n",(0,s.jsx)(r.p,{children:"Assigns a custom caption to a setting, allowing the text displayed in user interface to be different from the setting name."}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"path"})," Path to the setting (relative to the registry root)"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"caption"})," The caption to be displayed in the user interface"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"user"})," The user that this setting belongs to (defaults to the current user)"]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"vrsettingsetfilter",children:"vrSettingSetFilter"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-lua",children:"void vrSettingSetFilter(\r\n    string path,\r\n    string filter,\r\n    vrnode user\r\n)\n"})}),"\n",(0,s.jsx)(r.p,{children:"Assigns a filter to a setting. The meaning of the filter depends on the setting type."}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"path"})," Path to the setting (relative to the registry root)"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"filter"})," List of allowable file extensions for a file property or node types for a link property"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"user"})," The user that this setting belongs to (defaults to the current user)"]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"vrsettingsetstep",children:"vrSettingSetStep"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-lua",children:"void vrSettingSetStep(\r\n    string path,\r\n    number step,\r\n    vrnode user\r\n)\n"})}),"\n",(0,s.jsx)(r.p,{children:"Assigns a step size to a numerical setting."}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"path"})," Path to the setting (relative to the registry root)"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"step"})," The step size"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"user"})," The user that this setting belongs to (defaults to the current user)"]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"vrsettingsettype",children:"vrSettingSetType"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-lua",children:"void vrSettingSetType(\r\n    string path,\r\n    string type,\r\n    vrnode user\r\n)\n"})}),"\n",(0,s.jsx)(r.p,{children:"Assigns a type to a setting, which determines how the setting is presented in the user interface."}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"path"})," Path to the setting (relative to the registry root)"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"type"})," The type name (e.g. 'image', 'file', 'slider', 'colour', 'rect', 'sphere', 'matrix', etc.)"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"user"})," The user that this setting belongs to (defaults to the current user)"]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"vrsettingwrite",children:"vrSettingWrite"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-lua",children:"void vrSettingWrite(\r\n    string path,\r\n    Any value,\r\n    vrnode user =nil\r\n)\n"})}),"\n",(0,s.jsx)(r.p,{children:"Writes the value of a setting."}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"path"})," Path to the setting (relative to the registry root"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"value"})," The value to set"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"user"})," The user that this setting belongs to (defaults to the current user)"]}),"\n"]})]})}function c(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},28453:(e,r,t)=>{t.d(r,{R:()=>l,x:()=>a});var n=t(96540);const s={},i=n.createContext(s);function l(e){const r=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),n.createElement(i.Provider,{value:r},e.children)}}}]);
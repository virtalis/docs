"use strict";(self.webpackChunkvirtalis_docs=self.webpackChunkvirtalis_docs||[]).push([[7203],{91202:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>d,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"visionary-render-programming/reference/c-api/classes/metanodes/meta-measuring-point","title":"Meta_MeasuringPoint","description":"Module: Metanodes / Definitions","source":"@site/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-measuring-point.mdx","sourceDirName":"visionary-render-programming/reference/c-api/classes/metanodes","slug":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-measuring-point","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-measuring-point","draft":false,"unlisted":false,"editUrl":"https://github.com/virtalis/docs/tree/master/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-measuring-point.mdx","tags":[],"version":"current","frontMatter":{"title":"Meta_MeasuringPoint","summary":"A MeasuringPoint is a point in space, used by a Meta_Dimension to perform measurements."},"sidebar":"visionaryRenderProgrammingSidebar","previous":{"title":"Meta_MaterialSelector","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-material-selector"},"next":{"title":"Meta_Mesh","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-mesh"}}');var s=t(74848),r=t(28453);const d={title:"Meta_MeasuringPoint",summary:"A MeasuringPoint is a point in space, used by a Meta_Dimension to perform measurements."},o="Meta_MeasuringPoint",a={},c=[{value:"Public Types",id:"public-types",level:2},{value:"Public Types Documentation",id:"public-types-documentation",level:2},{value:"enum IDX",id:"enum-idx",level:3}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"meta_measuringpoint",children:"Meta_MeasuringPoint"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Module:"})," ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/",children:"Metanodes"})})," ",(0,s.jsx)(n.strong,{children:"/"})," ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/definitions",children:"Definitions"})})]}),"\n",(0,s.jsxs)(n.p,{children:["A MeasuringPoint is a point in space, used by a ",(0,s.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-dimension",children:"Meta_Dimension"})," to perform measurements."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"#include <meta_measure.hpp>"})}),"\n",(0,s.jsx)(n.h2,{id:"public-types",children:"Public Types"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Name"})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"enum"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#enum-idx",children:"IDX"})})," { Idx_Enabled, Idx_LocalPosition, Idx_InitialPosition, Idx_MinPosition, Idx_MaxPosition, Idx_CurrentPosition, Idx_Display, Idx_TrackDeformation, Idx_CollisionNodePath, Idx_PartIndex, Idx_TriangleIndex, Idx_TrianglePoint }",(0,s.jsx)("br",{}),"Property index."]})]})})]}),"\n",(0,s.jsx)(n.h2,{id:"public-types-documentation",children:"Public Types Documentation"}),"\n",(0,s.jsx)(n.h3,{id:"enum-idx",children:"enum IDX"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Enumerator"}),(0,s.jsx)(n.th,{children:"Value"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_Enabled"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"bool - Enables the measuring point"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_LocalPosition"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"vec3w - Controls the position of the point relative to its parent"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_InitialPosition"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"vec3w - Stores the starting position of the measuring point (for movement range tracking)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_MinPosition"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"vec3w - Stores the minimum position that this point has been placed at"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_MaxPosition"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"vec3w - Stores the maximum position that this point has been placed at"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_CurrentPosition"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"vec3w - Stores the current position of the point in world space (not editable)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_Display"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"Internal."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_TrackDeformation"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"bool - Whether the measuring point sticks to the surface of a deformable mesh"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_CollisionNodePath"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"string - The path from the MeasuringPoint's parent to the node that owns the physics body (this is not a link because Manikin's collision nodes aren't saved so the link would be lost when reloaded)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_PartIndex"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"int - The index of the part of the physics body that the measuring point is attached to"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_TriangleIndex"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"int - The index of the triangle of the physics body's part that the measuring point is attached to"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_TrianglePoint"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"vec3f - The barycentric coordinates of the measuring point within the triangle"})]})]})]}),"\n",(0,s.jsx)(n.p,{children:"Property index."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>o});var i=t(96540);const s={},r=i.createContext(s);function d(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);
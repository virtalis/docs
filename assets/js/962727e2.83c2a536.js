"use strict";(self.webpackChunkvirtalis_docs=self.webpackChunkvirtalis_docs||[]).push([[9703],{78081:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>d,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"visionary-render-programming/reference/c-api/classes/metanodes/meta-transform","title":"Meta_Transform","description":"Module: Metanodes / Definitions","source":"@site/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-transform.mdx","sourceDirName":"visionary-render-programming/reference/c-api/classes/metanodes","slug":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-transform","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-transform","draft":false,"unlisted":false,"editUrl":"https://github.com/virtalis/docs/tree/master/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-transform.mdx","tags":[],"version":"current","frontMatter":{"title":"Meta_Transform","summary":"A Transform is a special node that when parented to a Meta_Visual overrides its local transform (distinctly from the Assembly)."},"sidebar":"visionaryRenderProgrammingSidebar","previous":{"title":"Meta_TransformLink","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-transform-link"},"next":{"title":"Meta_TreeViewItem","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-tree-view-item"}}');var t=n(74848),i=n(28453);const a={title:"Meta_Transform",summary:"A Transform is a special node that when parented to a Meta_Visual overrides its local transform (distinctly from the Assembly)."},o="Meta_Transform",d={},c=[{value:"Public Types",id:"public-types",level:2},{value:"Detailed Description",id:"detailed-description",level:2},{value:"Public Types Documentation",id:"public-types-documentation",level:2},{value:"enum IDX",id:"enum-idx",level:3}];function l(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"meta_transform",children:"Meta_Transform"})}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Module:"})," ",(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/",children:"Metanodes"})})," ",(0,t.jsx)(r.strong,{children:"/"})," ",(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/definitions",children:"Definitions"})})]}),"\n",(0,t.jsxs)(r.p,{children:["A Transform is a special node that when parented to a ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-visual",children:"Meta_Visual"})," overrides its local transform (distinctly from the Assembly).  ",(0,t.jsx)(r.a,{href:"#detailed-description",children:"More..."})]}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.code,{children:"#include <meta_importables.hpp>"})}),"\n",(0,t.jsx)(r.h2,{id:"public-types",children:"Public Types"}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"Type"}),(0,t.jsx)(r.th,{children:"Name"})]})}),(0,t.jsx)(r.tbody,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"enum"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"#enum-idx",children:"IDX"})})," { Idx_Enabled, Idx_Transform }",(0,t.jsx)("br",{}),"Property index."]})]})})]}),"\n",(0,t.jsx)(r.h2,{id:"detailed-description",children:"Detailed Description"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-cpp",children:"struct Meta_Transform;\n"})}),"\n",(0,t.jsxs)(r.p,{children:["A Transform is a special node that when parented to a ",(0,t.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-visual",children:"Meta_Visual"})," overrides its local transform (distinctly from the Assembly)."]}),"\n",(0,t.jsx)(r.p,{children:"This primarily exists to handle data import from formats like FBX, where a model instance may have transforms applied that are distinct from the assembly transform."}),"\n",(0,t.jsx)(r.h2,{id:"public-types-documentation",children:"Public Types Documentation"}),"\n",(0,t.jsx)(r.h3,{id:"enum-idx",children:"enum IDX"}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"Enumerator"}),(0,t.jsx)(r.th,{children:"Value"}),(0,t.jsx)(r.th,{children:"Description"})]})}),(0,t.jsxs)(r.tbody,{children:[(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Idx_Enabled"}),(0,t.jsx)(r.td,{}),(0,t.jsx)(r.td,{children:"bool - Enabled state of this node in the hierarchy"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Idx_Transform"}),(0,t.jsx)(r.td,{}),(0,t.jsx)(r.td,{children:"mat4w - Local transformation matrix"})]})]})]}),"\n",(0,t.jsx)(r.p,{children:"Property index."})]})}function m(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},28453:(e,r,n)=>{n.d(r,{R:()=>a,x:()=>o});var s=n(96540);const t={},i=s.createContext(t);function a(e){const r=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(i.Provider,{value:r},e.children)}}}]);
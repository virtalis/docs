"use strict";(self.webpackChunkvirtalis_docs=self.webpackChunkvirtalis_docs||[]).push([[95715],{33134:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"visionary-render-programming/reference/c-api/definitions/build-filter-flags","title":"Build Filter Flags","description":"Input and output operation flags that can be passed to the builderFlags parameter on VRLoadTreeEx.","source":"@site/docs/visionary-render-programming/reference/c-api/definitions/build-filter-flags.mdx","sourceDirName":"visionary-render-programming/reference/c-api/definitions","slug":"/visionary-render-programming/reference/c-api/definitions/build-filter-flags","permalink":"/visionary-render-programming/reference/c-api/definitions/build-filter-flags","draft":false,"unlisted":false,"editUrl":"https://github.com/virtalis/docs/tree/master/docs/visionary-render-programming/reference/c-api/definitions/build-filter-flags.mdx","tags":[],"version":"current","lastUpdatedAt":1730817102000,"frontMatter":{"title":"Build Filter Flags","summary":"Input and output operation flags that can be passed to the builderFlags parameter on VRLoadTreeEx."},"sidebar":"visionaryRenderProgrammingSidebar","previous":{"title":"vrtree_cpp::ObserverWrapper","permalink":"/visionary-render-programming/reference/c-api/classes/vrtree-cpp-observerwrapper"},"next":{"title":"Error Codes","permalink":"/visionary-render-programming/reference/c-api/definitions/error-codes"}}');var i=n(74848),s=n(28453);const l={title:"Build Filter Flags",summary:"Input and output operation flags that can be passed to the builderFlags parameter on VRLoadTreeEx."},a="Build Filter Flags",d={},o=[{value:"Attributes",id:"attributes",level:2},{value:"Attributes Documentation",id:"attributes-documentation",level:2},{value:"BUILDFILTER_ALLOW_INVALID_ATTRIBS",id:"buildfilter-allow-invalid-attribs",level:3},{value:"BUILDFILTER_ALLOW_MISSING_ATTRIBS",id:"buildfilter-allow-missing-attribs",level:3},{value:"BUILDFILTER_ALLOW_MISSING_METANODES",id:"buildfilter-allow-missing-metanodes",level:3},{value:"BUILDFILTER_MERGE_ALL",id:"buildfilter-merge-all",level:3},{value:"BUILDFILTER_MERGE_ROOTS",id:"buildfilter-merge-roots",level:3}];function c(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"build-filter-flags",children:"Build Filter Flags"})}),"\n",(0,i.jsxs)(t.p,{children:["Input and output operation flags that can be passed to the ",(0,i.jsx)(t.code,{children:"builderFlags"})," parameter on ",(0,i.jsx)(t.a,{href:"/visionary-render-programming/reference/c-api/modules/nodes/tree#vrloadtreeex",children:"VRLoadTreeEx"}),"."]}),"\n",(0,i.jsx)(t.h2,{id:"attributes",children:"Attributes"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Type"}),(0,i.jsx)(t.th,{children:"Name"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"const uint32_t"}),(0,i.jsxs)(t.td,{children:[(0,i.jsx)(t.strong,{children:(0,i.jsx)(t.a,{href:"#buildfilter-allow-invalid-attribs",children:"BUILDFILTER_ALLOW_INVALID_ATTRIBS"})})," ",(0,i.jsx)("br",{}),"Signals that the loader should continue even if it encounters properties that it does not understand."]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"const uint32_t"}),(0,i.jsxs)(t.td,{children:[(0,i.jsx)(t.strong,{children:(0,i.jsx)(t.a,{href:"#buildfilter-allow-missing-attribs",children:"BUILDFILTER_ALLOW_MISSING_ATTRIBS"})})," ",(0,i.jsx)("br",{}),"Signals that the load operation should populate property values with defaults when the value does not exist in the file."]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"const uint32_t"}),(0,i.jsxs)(t.td,{children:[(0,i.jsx)(t.strong,{children:(0,i.jsx)(t.a,{href:"#buildfilter-allow-missing-metanodes",children:"BUILDFILTER_ALLOW_MISSING_METANODES"})})," ",(0,i.jsx)("br",{}),"Signals that the loader should continue even if it encounters node types that it does not understand."]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"const uint32_t"}),(0,i.jsxs)(t.td,{children:[(0,i.jsx)(t.strong,{children:(0,i.jsx)(t.a,{href:"#buildfilter-merge-all",children:"BUILDFILTER_MERGE_ALL"})})," ",(0,i.jsx)("br",{}),"Signals that the load operation should merge all nodes by UUID where possible."]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"const uint32_t"}),(0,i.jsxs)(t.td,{children:[(0,i.jsx)(t.strong,{children:(0,i.jsx)(t.a,{href:"#buildfilter-merge-roots",children:"BUILDFILTER_MERGE_ROOTS"})})," ",(0,i.jsx)("br",{}),"Signals that the load operation should merge the standard root nodes (e.g. a file containing a Scenes node will load its contents into the existing Scenes tree)"]})]})]})]}),"\n",(0,i.jsx)(t.h2,{id:"attributes-documentation",children:"Attributes Documentation"}),"\n",(0,i.jsx)(t.h3,{id:"buildfilter-allow-invalid-attribs",children:"BUILDFILTER_ALLOW_INVALID_ATTRIBS"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:"const uint32_t BUILDFILTER_ALLOW_INVALID_ATTRIBS = (1 << 4);\n"})}),"\n",(0,i.jsx)(t.p,{children:"Signals that the loader should continue even if it encounters properties that it does not understand."}),"\n",(0,i.jsx)(t.h3,{id:"buildfilter-allow-missing-attribs",children:"BUILDFILTER_ALLOW_MISSING_ATTRIBS"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:"const uint32_t BUILDFILTER_ALLOW_MISSING_ATTRIBS = (1 << 0);\n"})}),"\n",(0,i.jsx)(t.p,{children:"Signals that the load operation should populate property values with defaults when the value does not exist in the file."}),"\n",(0,i.jsx)(t.h3,{id:"buildfilter-allow-missing-metanodes",children:"BUILDFILTER_ALLOW_MISSING_METANODES"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:"const uint32_t BUILDFILTER_ALLOW_MISSING_METANODES = (1 << 3);\n"})}),"\n",(0,i.jsx)(t.p,{children:"Signals that the loader should continue even if it encounters node types that it does not understand."}),"\n",(0,i.jsx)(t.h3,{id:"buildfilter-merge-all",children:"BUILDFILTER_MERGE_ALL"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:"const uint32_t BUILDFILTER_MERGE_ALL = (1 << 2);\n"})}),"\n",(0,i.jsx)(t.p,{children:"Signals that the load operation should merge all nodes by UUID where possible."}),"\n",(0,i.jsx)(t.h3,{id:"buildfilter-merge-roots",children:"BUILDFILTER_MERGE_ROOTS"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:"const uint32_t BUILDFILTER_MERGE_ROOTS = (1 << 1);\n"})}),"\n",(0,i.jsx)(t.p,{children:"Signals that the load operation should merge the standard root nodes (e.g. a file containing a Scenes node will load its contents into the existing Scenes tree)"})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>a});var r=n(96540);const i={},s=r.createContext(i);function l(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);
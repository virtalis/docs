"use strict";(self.webpackChunkvirtalis_docs=self.webpackChunkvirtalis_docs||[]).push([[37489],{35923:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>l,contentTitle:()=>d,default:()=>h,frontMatter:()=>a,metadata:()=>n,toc:()=>o});const n=JSON.parse('{"id":"visionary-render-programming/reference/c-api/classes/metanodes/meta-library","title":"Meta_Library","description":"Module: Metanodes / Definitions","source":"@site/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-library.mdx","sourceDirName":"visionary-render-programming/reference/c-api/classes/metanodes","slug":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-library","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-library","draft":false,"unlisted":false,"editUrl":"https://github.com/virtalis/docs/tree/master/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-library.mdx","tags":[],"version":"current","lastUpdatedAt":1730817102000,"frontMatter":{"title":"Meta_Library","summary":"A Library provides an organisational structure for assets such as models and materials in a scene."},"sidebar":"visionaryRenderProgrammingSidebar","previous":{"title":"Meta_LibraryList","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-library-list"},"next":{"title":"Meta_LightList","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-light-list"}}');var i=s(74848),t=s(28453);const a={title:"Meta_Library",summary:"A Library provides an organisational structure for assets such as models and materials in a scene."},d="Meta_Library",l={},o=[{value:"Public Types",id:"public-types",level:2},{value:"Detailed Description",id:"detailed-description",level:2},{value:"Public Types Documentation",id:"public-types-documentation",level:2},{value:"enum IDX",id:"enum-idx",level:3}];function c(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"meta_library",children:"Meta_Library"})}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Module:"})," ",(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/",children:"Metanodes"})})," ",(0,i.jsx)(r.strong,{children:"/"})," ",(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/definitions",children:"Definitions"})})]}),"\n",(0,i.jsxs)(r.p,{children:["A Library provides an organisational structure for assets such as models and materials in a scene.  ",(0,i.jsx)(r.a,{href:"#detailed-description",children:"More..."})]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.code,{children:"#include <meta_importables.hpp>"})}),"\n",(0,i.jsx)(r.h2,{id:"public-types",children:"Public Types"}),"\n",(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.th,{children:"Type"}),(0,i.jsx)(r.th,{children:"Name"})]})}),(0,i.jsx)(r.tbody,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"enum"}),(0,i.jsxs)(r.td,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"#enum-idx",children:"IDX"})})," { Idx_Archive, Idx_Filename, Idx_Modified, Idx_ReadOnly }",(0,i.jsx)("br",{}),"Property index."]})]})})]}),"\n",(0,i.jsx)(r.h2,{id:"detailed-description",children:"Detailed Description"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-cpp",children:"struct Meta_Library;\n"})}),"\n",(0,i.jsx)(r.p,{children:"A Library provides an organisational structure for assets such as models and materials in a scene."}),"\n",(0,i.jsx)(r.p,{children:"As well as tree structure, this node also allows its contents to be saved out to disk as a separate VR file, which allows its contents to be shared among multiple scenes, as well as reducing the amount of data saved while saving a scene that has not modified the library contents."}),"\n",(0,i.jsx)(r.h2,{id:"public-types-documentation",children:"Public Types Documentation"}),"\n",(0,i.jsx)(r.h3,{id:"enum-idx",children:"enum IDX"}),"\n",(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.th,{children:"Enumerator"}),(0,i.jsx)(r.th,{children:"Value"}),(0,i.jsx)(r.th,{children:"Description"})]})}),(0,i.jsxs)(r.tbody,{children:[(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"Idx_Archive"}),(0,i.jsx)(r.td,{}),(0,i.jsx)(r.td,{children:"bool - When enabled and coupled with a Filename, this Library is saved as a separate VR file on disk when the scene is saved"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"Idx_Filename"}),(0,i.jsx)(r.td,{}),(0,i.jsxs)(r.td,{children:["string - Name of the library file relative to the parent / scene document directory. If extensionless, the extension of the parent file is used. For example, ",(0,i.jsx)(r.code,{children:"geometry/library"})," will save a ",(0,i.jsx)(r.code,{children:"library"})," file in the ",(0,i.jsx)(r.code,{children:"geometry"})," subfolder (creating if necessary), using whatever extension the parent scene is saved with (e.g. ",(0,i.jsx)(r.code,{children:"VRNative"}),")"]})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"Idx_Modified"}),(0,i.jsx)(r.td,{}),(0,i.jsx)(r.td,{children:"bool - Automatically enabled whenever anything inside the library changes. Can be enabled manually to force the library to be re-saved when the scene is saved."})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"Idx_ReadOnly"}),(0,i.jsx)(r.td,{}),(0,i.jsx)(r.td,{children:"bool - When enabled, the archive library file becomes read-only, meaning changes are not saved back out. This has no effect if Archive is disabled or Filename is blank."})]})]})]}),"\n",(0,i.jsx)(r.p,{children:"Property index."})]})}function h(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},28453:(e,r,s)=>{s.d(r,{R:()=>a,x:()=>d});var n=s(96540);const i={},t=n.createContext(i);function a(e){const r=n.useContext(t);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function d(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),n.createElement(t.Provider,{value:r},e.children)}}}]);
"use strict";(self.webpackChunkvirtalis_docs=self.webpackChunkvirtalis_docs||[]).push([[44723],{4388:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"visionary-render-programming/reference/c-api/classes/metanodes/meta-marker","title":"Meta_Marker","description":"Module: Metanodes / Definitions","source":"@site/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-marker.mdx","sourceDirName":"visionary-render-programming/reference/c-api/classes/metanodes","slug":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-marker","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-marker","draft":false,"unlisted":false,"editUrl":"https://github.com/virtalis/docs/tree/master/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-marker.mdx","tags":[],"version":"current","lastUpdatedAt":1741279868000,"frontMatter":{"title":"Meta_Marker","summary":"A Marker is a 3D icon used to represent a clickable / draggable object in the scene - defaults to a sphere."},"sidebar":"visionaryRenderProgrammingSidebar","previous":{"title":"Meta_Manikin","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-manikin"},"next":{"title":"Meta_MaterialArgument","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-material-argument"}}');var s=t(74848),d=t(28453);const i={title:"Meta_Marker",summary:"A Marker is a 3D icon used to represent a clickable / draggable object in the scene - defaults to a sphere."},a="Meta_Marker",l={},c=[{value:"Public Types",id:"public-types",level:2},{value:"Public Types Documentation",id:"public-types-documentation",level:2},{value:"enum AutoSelectMode",id:"enum-autoselectmode",level:3},{value:"enum IDX",id:"enum-idx",level:3},{value:"enum SnapTo",id:"enum-snapto",level:3}];function o(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,d.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"meta_marker",children:"Meta_Marker"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Module:"})," ",(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/",children:"Metanodes"})})," ",(0,s.jsx)(r.strong,{children:"/"})," ",(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/definitions",children:"Definitions"})})]}),"\n",(0,s.jsx)(r.p,{children:"A Marker is a 3D icon used to represent a clickable / draggable object in the scene - defaults to a sphere."}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.code,{children:"#include <meta_gui.hpp>"})}),"\n",(0,s.jsx)(r.h2,{id:"public-types",children:"Public Types"}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Type"}),(0,s.jsx)(r.th,{children:"Name"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"enum"}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"#enum-autoselectmode",children:"AutoSelectMode"})})," { AutoSelect_Off, AutoSelect_Marker, AutoSelect_Parent, AutoSelect_Link }",(0,s.jsx)("br",{}),"Values for Idx_AutoSelect."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"enum"}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"#enum-idx",children:"IDX"})})," { Idx_Enabled, Idx_Position, Idx_Style, Idx_Draggable, Idx_AutoSelect, Idx_AutoSelectLink, Idx_Unpickable, Idx_Rotation, Idx_SnapTo, Idx_SizingReference, Idx_AlignmentVector, Idx_MapOffset, Idx_SupportClipPlanes }",(0,s.jsx)("br",{}),"Property index."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"enum"}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"#enum-snapto",children:"SnapTo"})})," { SnapTo_Geometry, SnapTo_Plane, SnapTo_GeometryOrPlane }",(0,s.jsx)("br",{}),"Values for Idx_SnapTo."]})]})]})]}),"\n",(0,s.jsx)(r.h2,{id:"public-types-documentation",children:"Public Types Documentation"}),"\n",(0,s.jsx)(r.h3,{id:"enum-autoselectmode",children:"enum AutoSelectMode"}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Enumerator"}),(0,s.jsx)(r.th,{children:"Value"}),(0,s.jsx)(r.th,{children:"Description"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"AutoSelect_Off"}),(0,s.jsx)(r.td,{}),(0,s.jsxs)(r.td,{children:["No tree selection when marker is clicked (Symbols - C: ",(0,s.jsx)(r.code,{children:'"AutoSelectOff"'}),", Lua: ",(0,s.jsx)(r.code,{children:"__Marker_AutoSelectOff"}),")"]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"AutoSelect_Marker"}),(0,s.jsx)(r.td,{}),(0,s.jsxs)(r.td,{children:["Select the marker itself when it is clicked (Symbols - C: ",(0,s.jsx)(r.code,{children:'"AutoSelectMarker"'}),", Lua: ",(0,s.jsx)(r.code,{children:"__Marker_AutoSelectMarker"}),")"]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"AutoSelect_Parent"}),(0,s.jsx)(r.td,{}),(0,s.jsxs)(r.td,{children:["Select the parent of the marker when it is clicked (Symbols - C: ",(0,s.jsx)(r.code,{children:'"AutoSelectParent"'}),", Lua: ",(0,s.jsx)(r.code,{children:"__Marker_AutoSelectParent"}),")"]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"AutoSelect_Link"}),(0,s.jsx)(r.td,{}),(0,s.jsxs)(r.td,{children:["Select the node specified in Idx_AutoSelectLink (Symbols - C: ",(0,s.jsx)(r.code,{children:'"AutoSelectLink"'}),", Lua: ",(0,s.jsx)(r.code,{children:"__Marker_AutoSelectLink"}),")"]})]})]})]}),"\n",(0,s.jsx)(r.p,{children:"Values for Idx_AutoSelect."}),"\n",(0,s.jsx)(r.h3,{id:"enum-idx",children:"enum IDX"}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Enumerator"}),(0,s.jsx)(r.th,{children:"Value"}),(0,s.jsx)(r.th,{children:"Description"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Idx_Enabled"}),(0,s.jsx)(r.td,{}),(0,s.jsx)(r.td,{children:"bool - Enables or disables the marker and its visual"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Idx_Position"}),(0,s.jsx)(r.td,{}),(0,s.jsx)(r.td,{children:"vec3w - Position of the marker relative to its parent"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Idx_Style"}),(0,s.jsx)(r.td,{}),(0,s.jsxs)(r.td,{children:["link - A style to apply to the marker (Meta_SphericalMarkerStyle, Meta_ModelMarkerStyle, ",(0,s.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-image-marker-style",children:"Meta_ImageMarkerStyle"}),")"]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Idx_Draggable"}),(0,s.jsx)(r.td,{}),(0,s.jsx)(r.td,{children:"bool - Whether the marker is draggable with the mouse"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Idx_AutoSelect"}),(0,s.jsx)(r.td,{}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.a,{href:"#enum-autoselectmode",children:"AutoSelectMode"})," (int) - What happens when the marker is clicked in the scene"]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Idx_AutoSelectLink"}),(0,s.jsx)(r.td,{}),(0,s.jsxs)(r.td,{children:["link - When ",(0,s.jsx)(r.code,{children:"AutoSelectMode==Link"}),", this node is selected"]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Idx_Unpickable"}),(0,s.jsx)(r.td,{}),(0,s.jsx)(r.td,{children:"bool - Whether the marker is pickable (false means the cursor cannot click on it)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Idx_Rotation"}),(0,s.jsx)(r.td,{}),(0,s.jsx)(r.td,{children:"vec3w - Rotation of the marker relative to its parent"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Idx_SnapTo"}),(0,s.jsx)(r.td,{}),(0,s.jsx)(r.td,{children:"SnapTo - What to snap to when dragging"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Idx_SizingReference"}),(0,s.jsx)(r.td,{}),(0,s.jsx)(r.td,{children:"link - Optionally specify a node whose bounding sphere is used as the reference for calculating screen scale (if the style indicates a screen sized marker)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Idx_AlignmentVector"}),(0,s.jsx)(r.td,{}),(0,s.jsx)(r.td,{children:"vec3w - Specifies the orientation and length when the style is set to Vector alignment mode"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Idx_MapOffset"}),(0,s.jsx)(r.td,{}),(0,s.jsx)(r.td,{children:"float - Adjusts the texture mapping when the style uses Map Auto Scale"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Idx_SupportClipPlanes"}),(0,s.jsx)(r.td,{}),(0,s.jsx)(r.td,{children:"bool - Should the gui item respond to clip planes"})]})]})]}),"\n",(0,s.jsx)(r.p,{children:"Property index."}),"\n",(0,s.jsx)(r.h3,{id:"enum-snapto",children:"enum SnapTo"}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Enumerator"}),(0,s.jsx)(r.th,{children:"Value"}),(0,s.jsx)(r.th,{children:"Description"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"SnapTo_Geometry"}),(0,s.jsx)(r.td,{}),(0,s.jsxs)(r.td,{children:["Dragging the marker snaps to whatever surface the cursor is touching (Symbols - C: ",(0,s.jsx)(r.code,{children:'"SnapToGeometry"'}),", Lua: ",(0,s.jsx)(r.code,{children:"__Marker_SnapToGeometry"}),")"]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"SnapTo_Plane"}),(0,s.jsx)(r.td,{}),(0,s.jsxs)(r.td,{children:["Dragging the marker snaps to the camera-aligned plane it was on before it was dragged (Symbols - C: ",(0,s.jsx)(r.code,{children:'"SnapToPlane"'}),", Lua: ",(0,s.jsx)(r.code,{children:"__Marker_SnapToPlane"}),")"]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"SnapTo_GeometryOrPlane"}),(0,s.jsx)(r.td,{}),(0,s.jsxs)(r.td,{children:["Dragging the marker snaps as per Geometry mode, but switches to Plane mode when Shift is held down (Symbols - C: ",(0,s.jsx)(r.code,{children:'"SnapToGeometryOrPlane"'}),", Lua: ",(0,s.jsx)(r.code,{children:"__Marker_SnapToGeometryOrPlane"}),")"]})]})]})]}),"\n",(0,s.jsx)(r.p,{children:"Values for Idx_SnapTo."})]})}function h(e={}){const{wrapper:r}={...(0,d.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},28453:(e,r,t)=>{t.d(r,{R:()=>i,x:()=>a});var n=t(96540);const s={},d=n.createContext(s);function i(e){const r=n.useContext(d);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),n.createElement(d.Provider,{value:r},e.children)}}}]);
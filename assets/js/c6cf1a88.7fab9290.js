"use strict";(self.webpackChunkvirtalis_docs=self.webpackChunkvirtalis_docs||[]).push([[7649],{48766:(e,r,i)=>{i.r(r),i.d(r,{assets:()=>c,contentTitle:()=>a,default:()=>m,frontMatter:()=>d,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"visionary-render-programming/reference/c-api/classes/metanodes/meta-vertex-prim","title":"Meta_VertexPrim","description":"Module: Metanodes / Definitions","source":"@site/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-vertex-prim.mdx","sourceDirName":"visionary-render-programming/reference/c-api/classes/metanodes","slug":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-vertex-prim","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-vertex-prim","draft":false,"unlisted":false,"editUrl":"https://github.com/virtalis/docs/tree/master/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-vertex-prim.mdx","tags":[],"version":"current","lastUpdatedAt":1730817102000,"frontMatter":{"title":"Meta_VertexPrim","summary":"A VertexPrim specifies a range of vertices in Meta_VertexAttrib siblings to render from, requiring this data to be in primitive order (and possibly duplicated)"},"sidebar":"visionaryRenderProgrammingSidebar","previous":{"title":"Meta_VertexAttrib","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-vertex-attrib"},"next":{"title":"Meta_ViewFilter","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-view-filter"}}');var n=i(74848),s=i(28453);const d={title:"Meta_VertexPrim",summary:"A VertexPrim specifies a range of vertices in Meta_VertexAttrib siblings to render from, requiring this data to be in primitive order (and possibly duplicated)"},a="Meta_VertexPrim",c={},o=[{value:"Public Types",id:"public-types",level:2},{value:"Detailed Description",id:"detailed-description",level:2},{value:"Public Types Documentation",id:"public-types-documentation",level:2},{value:"enum IDX",id:"enum-idx",level:3}];function l(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.header,{children:(0,n.jsx)(r.h1,{id:"meta_vertexprim",children:"Meta_VertexPrim"})}),"\n",(0,n.jsxs)(r.p,{children:[(0,n.jsx)(r.strong,{children:"Module:"})," ",(0,n.jsx)(r.strong,{children:(0,n.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/",children:"Metanodes"})})," ",(0,n.jsx)(r.strong,{children:"/"})," ",(0,n.jsx)(r.strong,{children:(0,n.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/definitions",children:"Definitions"})})]}),"\n",(0,n.jsxs)(r.p,{children:["A VertexPrim specifies a range of vertices in ",(0,n.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-vertex-attrib",children:"Meta_VertexAttrib"})," siblings to render from, requiring this data to be in primitive order (and possibly duplicated)  ",(0,n.jsx)(r.a,{href:"#detailed-description",children:"More..."})]}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)(r.code,{children:"#include <meta_importables.hpp>"})}),"\n",(0,n.jsx)(r.h2,{id:"public-types",children:"Public Types"}),"\n",(0,n.jsxs)(r.table,{children:[(0,n.jsx)(r.thead,{children:(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.th,{children:"Type"}),(0,n.jsx)(r.th,{children:"Name"})]})}),(0,n.jsx)(r.tbody,{children:(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"enum"}),(0,n.jsxs)(r.td,{children:[(0,n.jsx)(r.strong,{children:(0,n.jsx)(r.a,{href:"#enum-idx",children:"IDX"})})," { Idx_Enabled, Idx_Prim, Idx_Count, Idx_Start }",(0,n.jsx)("br",{}),"Property index."]})]})})]}),"\n",(0,n.jsx)(r.h2,{id:"detailed-description",children:"Detailed Description"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-cpp",children:"struct Meta_VertexPrim;\n"})}),"\n",(0,n.jsxs)(r.p,{children:["A VertexPrim specifies a range of vertices in ",(0,n.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-vertex-attrib",children:"Meta_VertexAttrib"})," siblings to render from, requiring this data to be in primitive order (and possibly duplicated)"]}),"\n",(0,n.jsxs)(r.p,{children:["See ",(0,n.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/classes/metanodes/meta-index-prim",children:"Meta_IndexPrim"})," for a list of supported prim type names."]}),"\n",(0,n.jsx)(r.h2,{id:"public-types-documentation",children:"Public Types Documentation"}),"\n",(0,n.jsx)(r.h3,{id:"enum-idx",children:"enum IDX"}),"\n",(0,n.jsxs)(r.table,{children:[(0,n.jsx)(r.thead,{children:(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.th,{children:"Enumerator"}),(0,n.jsx)(r.th,{children:"Value"}),(0,n.jsx)(r.th,{children:"Description"})]})}),(0,n.jsxs)(r.tbody,{children:[(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"Idx_Enabled"}),(0,n.jsx)(r.td,{}),(0,n.jsx)(r.td,{children:"bool - When enabled, this primitive is drawn by the mesh"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"Idx_Prim"}),(0,n.jsx)(r.td,{}),(0,n.jsx)(r.td,{children:"string - Primitive type"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"Idx_Count"}),(0,n.jsx)(r.td,{}),(0,n.jsx)(r.td,{children:"int - The number of primitives to draw from the array"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"Idx_Start"}),(0,n.jsx)(r.td,{}),(0,n.jsx)(r.td,{children:"int - The index of the vertex to start drawing from"})]})]})]}),"\n",(0,n.jsx)(r.p,{children:"Property index."})]})}function m(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},28453:(e,r,i)=>{i.d(r,{R:()=>d,x:()=>a});var t=i(96540);const n={},s=t.createContext(n);function d(e){const r=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:d(e.components),t.createElement(s.Provider,{value:r},e.children)}}}]);
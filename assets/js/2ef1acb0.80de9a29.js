"use strict";(self.webpackChunkvirtalis_docs=self.webpackChunkvirtalis_docs||[]).push([[26753],{3227:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>d,metadata:()=>n,toc:()=>o});const n=JSON.parse('{"id":"visionary-render-programming/reference/c-api/classes/metanodes/meta-simulation-terrain","title":"Meta_SimulationTerrain","description":"Module: Metanodes / Definitions","source":"@site/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-simulation-terrain.mdx","sourceDirName":"visionary-render-programming/reference/c-api/classes/metanodes","slug":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-simulation-terrain","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-simulation-terrain","draft":false,"unlisted":false,"editUrl":"https://github.com/virtalis/docs/tree/master/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-simulation-terrain.mdx","tags":[],"version":"current","lastUpdatedAt":1730817102000,"frontMatter":{"title":"Meta_SimulationTerrain","summary":"A SimulationTerrain controls the display of preprocessed height and image data."},"sidebar":"visionaryRenderProgrammingSidebar","previous":{"title":"Meta_ShadowBoundsOverride","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-shadow-bounds-override"},"next":{"title":"Meta_Slider","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-slider"}}');var i=t(74848),s=t(28453);const d={title:"Meta_SimulationTerrain",summary:"A SimulationTerrain controls the display of preprocessed height and image data."},a="Meta_SimulationTerrain",l={},o=[{value:"Public Types",id:"public-types",level:2},{value:"Public Types Documentation",id:"public-types-documentation",level:2},{value:"enum IDX",id:"enum-idx",level:3}];function c(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"meta_simulationterrain",children:"Meta_SimulationTerrain"})}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Module:"})," ",(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/",children:"Metanodes"})})," ",(0,i.jsx)(r.strong,{children:"/"})," ",(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/definitions",children:"Definitions"})})]}),"\n",(0,i.jsx)(r.p,{children:"A SimulationTerrain controls the display of preprocessed height and image data."}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.code,{children:"#include <meta_terrain2.hpp>"})}),"\n",(0,i.jsx)(r.h2,{id:"public-types",children:"Public Types"}),"\n",(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.th,{children:"Type"}),(0,i.jsx)(r.th,{children:"Name"})]})}),(0,i.jsx)(r.tbody,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"enum"}),(0,i.jsxs)(r.td,{children:[(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"#enum-idx",children:"IDX"})})," { Idx_Enabled, Idx_ElevationPath, Idx_MainImageryPath, Idx_AuxImageryPath, Idx_ImageryEnabled, Idx_ImageryBlend, Idx_Lighting, Idx_Reflectivity, Idx_Shininess, Idx_Metalness, Idx_Ambient, Idx_Grid, Idx_TileLODThreshold }",(0,i.jsx)("br",{}),"Property index."]})]})})]}),"\n",(0,i.jsx)(r.h2,{id:"public-types-documentation",children:"Public Types Documentation"}),"\n",(0,i.jsx)(r.h3,{id:"enum-idx",children:"enum IDX"}),"\n",(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.th,{children:"Enumerator"}),(0,i.jsx)(r.th,{children:"Value"}),(0,i.jsx)(r.th,{children:"Description"})]})}),(0,i.jsxs)(r.tbody,{children:[(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"Idx_Enabled"}),(0,i.jsx)(r.td,{}),(0,i.jsx)(r.td,{children:"bool - Whether to draw the terrain"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"Idx_ElevationPath"}),(0,i.jsx)(r.td,{}),(0,i.jsx)(r.td,{children:"string - Path to directory containing height data files (.vsi or .vs3)"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"Idx_MainImageryPath"}),(0,i.jsx)(r.td,{}),(0,i.jsx)(r.td,{children:"string - Path to directory containing image data files (.vsi or .vs3)"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"Idx_AuxImageryPath"}),(0,i.jsx)(r.td,{}),(0,i.jsx)(r.td,{children:"string - Path to directory containing image data files (.vsi or .vs3)"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"Idx_ImageryEnabled"}),(0,i.jsx)(r.td,{}),(0,i.jsx)(r.td,{children:"bool - When enabled, imagery layer is drawn over the elevation"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"Idx_ImageryBlend"}),(0,i.jsx)(r.td,{}),(0,i.jsx)(r.td,{children:"float - Alpha value to apply to the imagery"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"Idx_Lighting"}),(0,i.jsx)(r.td,{}),(0,i.jsx)(r.td,{children:"bool - Whether the terrain is affected by lighting"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"Idx_Reflectivity"}),(0,i.jsx)(r.td,{}),(0,i.jsx)(r.td,{children:"float - Constant which modulates the colour sampled from the reflection map before adding to result."})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"Idx_Shininess"}),(0,i.jsx)(r.td,{}),(0,i.jsx)(r.td,{children:"float - How shiny is the terrain"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"Idx_Metalness"}),(0,i.jsx)(r.td,{}),(0,i.jsx)(r.td,{children:"float - Constant metalness value (0=not metal, 1=metal)."})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"Idx_Ambient"}),(0,i.jsx)(r.td,{}),(0,i.jsx)(r.td,{children:"float - Ambient scalar."})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"Idx_Grid"}),(0,i.jsx)(r.td,{}),(0,i.jsx)(r.td,{children:"bool - Whether to display the tile grid"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"Idx_TileLODThreshold"}),(0,i.jsx)(r.td,{}),(0,i.jsx)(r.td,{children:"float - LOD threshold for switching between mipmap layers"})]})]})]}),"\n",(0,i.jsx)(r.p,{children:"Property index."})]})}function h(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},28453:(e,r,t)=>{t.d(r,{R:()=>d,x:()=>a});var n=t(96540);const i={},s=n.createContext(i);function d(e){const r=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),n.createElement(s.Provider,{value:r},e.children)}}}]);
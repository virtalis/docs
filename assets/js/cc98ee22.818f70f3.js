"use strict";(self.webpackChunkvirtalis_docs=self.webpackChunkvirtalis_docs||[]).push([[81492],{4629:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>x,frontMatter:()=>d,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"visionary-render-programming/reference/c-api/classes/metanodes/meta-dynamic-section","title":"Meta_DynamicSection","description":"Module: Metanodes / Definitions","source":"@site/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-dynamic-section.mdx","sourceDirName":"visionary-render-programming/reference/c-api/classes/metanodes","slug":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-dynamic-section","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-dynamic-section","draft":false,"unlisted":false,"editUrl":"https://github.com/virtalis/docs/tree/master/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-dynamic-section.mdx","tags":[],"version":"current","lastUpdatedAt":1730817102000,"frontMatter":{"title":"Meta_DynamicSection","summary":"A DynamicSection is a cutting plane that can be placed in the scene."},"sidebar":"visionaryRenderProgrammingSidebar","previous":{"title":"Meta_DynamicSectionList","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-dynamic-section-list"},"next":{"title":"Meta_Environment","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-environment"}}');var s=i(74848),r=i(28453);const d={title:"Meta_DynamicSection",summary:"A DynamicSection is a cutting plane that can be placed in the scene."},c="Meta_DynamicSection",l={},a=[{value:"Public Types",id:"public-types",level:2},{value:"Public Types Documentation",id:"public-types-documentation",level:2},{value:"enum AXISALIGNMODE",id:"enum-axisalignmode",level:3},{value:"enum IDX",id:"enum-idx",level:3}];function o(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"meta_dynamicsection",children:"Meta_DynamicSection"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Module:"})," ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/",children:"Metanodes"})})," ",(0,s.jsx)(n.strong,{children:"/"})," ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/definitions",children:"Definitions"})})]}),"\n",(0,s.jsx)(n.p,{children:"A DynamicSection is a cutting plane that can be placed in the scene."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"#include <meta_sections.hpp>"})}),"\n",(0,s.jsx)(n.h2,{id:"public-types",children:"Public Types"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Name"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"enum"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#enum-axisalignmode",children:"AXISALIGNMODE"})})," { AxisAlignMode_xy, AxisAlignMode_xz, AxisAlignMode_yz, AxisAlignMode_custom }",(0,s.jsx)("br",{}),"Values for Idx_AlignMode."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"enum"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"#enum-idx",children:"IDX"})})," { Idx_Enabled, Idx_EnableCaps, Idx_Visible, Idx_Inverted, Idx_Selected, Idx_AlignMode, Idx_SectionLink, Idx_AssemblyLink, Idx_CornerBotLeft, Idx_CornerBotRight, Idx_CornerTopRight, Idx_CornerTopLeft, Idx_Plane, Idx_Opacity }",(0,s.jsx)("br",{}),"Property index."]})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"public-types-documentation",children:"Public Types Documentation"}),"\n",(0,s.jsx)(n.h3,{id:"enum-axisalignmode",children:"enum AXISALIGNMODE"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Enumerator"}),(0,s.jsx)(n.th,{children:"Value"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"AxisAlignMode_xy"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"Align along the XY axis."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"AxisAlignMode_xz"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"Align along the XZ axis."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"AxisAlignMode_yz"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"Align along the YZ axis."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"AxisAlignMode_custom"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"Align according to the parent assembly transform."})]})]})]}),"\n",(0,s.jsx)(n.p,{children:"Values for Idx_AlignMode."}),"\n",(0,s.jsx)(n.h3,{id:"enum-idx",children:"enum IDX"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Enumerator"}),(0,s.jsx)(n.th,{children:"Value"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_Enabled"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"bool - Enable the dynamic section."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_EnableCaps"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"bool - Enable the capped sections."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_Visible"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"bool - Enable the visibility of the section plane."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_Inverted"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"bool - Invert the direction of the clipping."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_Selected"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"bool - The dynamic section is selected"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_AlignMode"}),(0,s.jsx)(n.td,{}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.a,{href:"#enum-axisalignmode",children:"AXISALIGNMODE"})," (int) - Change the orientation of the clip plane."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_SectionLink"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"link - A link to the parent of the graph to be clipped."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_AssemblyLink"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"link - A link to the sections parent assembly."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_CornerBotLeft"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"(internal) The bottom left corner of the plane (used to save the size and position on exit)."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_CornerBotRight"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"(internal)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_CornerTopRight"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"(internal)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_CornerTopLeft"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"(internal)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_Plane"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"(internal) The plane equation in world space."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Idx_Opacity"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"float - The opacity of the plane."})]})]})]}),"\n",(0,s.jsx)(n.p,{children:"Property index."})]})}function x(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>d,x:()=>c});var t=i(96540);const s={},r=t.createContext(s);function d(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);
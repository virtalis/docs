"use strict";(self.webpackChunkvirtalis_docs=self.webpackChunkvirtalis_docs||[]).push([[33605],{3921:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"visionary-render-programming/reference/c-api/classes/metanodes/meta-transform-limits","title":"Meta_TransformLimits","description":"Module: Metanodes / Definitions","source":"@site/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-transform-limits.mdx","sourceDirName":"visionary-render-programming/reference/c-api/classes/metanodes","slug":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-transform-limits","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-transform-limits","draft":false,"unlisted":false,"editUrl":"https://github.com/virtalis/docs/tree/master/docs/visionary-render-programming/reference/c-api/classes/metanodes/meta-transform-limits.mdx","tags":[],"version":"current","lastUpdatedAt":1730817102000,"frontMatter":{"title":"Meta_TransformLimits","summary":"Defines limits that can be applied to constrain an Assembly\'s transform values."},"sidebar":"visionaryRenderProgrammingSidebar","previous":{"title":"Meta_TrackerPRSLink","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-tracker-prs-link"},"next":{"title":"Meta_TransformLink","permalink":"/visionary-render-programming/reference/c-api/classes/metanodes/meta-transform-link"}}');var r=s(74848),t=s(28453);const a={title:"Meta_TransformLimits",summary:"Defines limits that can be applied to constrain an Assembly's transform values."},l="Meta_TransformLimits",o={},d=[{value:"Public Types",id:"public-types",level:2},{value:"Detailed Description",id:"detailed-description",level:2},{value:"Public Types Documentation",id:"public-types-documentation",level:2},{value:"enum IDX",id:"enum-idx",level:3}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"meta_transformlimits",children:"Meta_TransformLimits"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Module:"})," ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/",children:"Metanodes"})})," ",(0,r.jsx)(n.strong,{children:"/"})," ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/modules/metanodes/definitions",children:"Definitions"})})]}),"\n",(0,r.jsxs)(n.p,{children:["Defines limits that can be applied to constrain an Assembly's transform values.  ",(0,r.jsx)(n.a,{href:"#detailed-description",children:"More..."})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"#include <meta_importables.hpp>"})}),"\n",(0,r.jsx)(n.h2,{id:"public-types",children:"Public Types"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Name"})]})}),(0,r.jsx)(n.tbody,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"enum"}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"#enum-idx",children:"IDX"})})," { Idx_Mask, Idx_Limits }",(0,r.jsx)("br",{}),"Property index."]})]})})]}),"\n",(0,r.jsx)(n.h2,{id:"detailed-description",children:"Detailed Description"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"struct Meta_TransformLimits;\n"})}),"\n",(0,r.jsx)(n.p,{children:"Defines limits that can be applied to constrain an Assembly's transform values."}),"\n",(0,r.jsx)(n.p,{children:"The transform is decomposed into Translation, Rotation and Scale elements each having 3 axes. The constraint then applies simple rules to these values."}),"\n",(0,r.jsx)(n.p,{children:"For the mask bitset there are 27 bits, For each of Translation,Rotation,Scale each axis has a bit for:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Locked -> The axis value may never change"}),"\n",(0,r.jsx)(n.li,{children:"Limited -> The axis values may vary over the range defined in corresponding Min/Max value the Limits array"}),"\n",(0,r.jsx)(n.li,{children:"Stepped -> The axis values will only ever be integer multiple of the corresponding Step value in the Limits array"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"For the Limits float array, for each of Translation,Rotation,Scale each axis has the value for:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"RangeMin -> The smallest this axis value can be"}),"\n",(0,r.jsx)(n.li,{children:"RangeMax -> The largest this axis value can be"}),"\n",(0,r.jsx)(n.li,{children:"Step -> the size of step increments"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Lua may construct this mask using vrBitsToInteger"}),"\n",(0,r.jsx)(n.h2,{id:"public-types-documentation",children:"Public Types Documentation"}),"\n",(0,r.jsx)(n.h3,{id:"enum-idx",children:"enum IDX"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Enumerator"}),(0,r.jsx)(n.th,{children:"Value"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Idx_Mask"}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"int - Bitmask containing transform limits"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Idx_Limits"}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"floatw[27] - Values corresponding to enabled mask bits"})]})]})]}),"\n",(0,r.jsx)(n.p,{children:"Property index."})]})}function m(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>l});var i=s(96540);const r={},t=i.createContext(r);function a(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);
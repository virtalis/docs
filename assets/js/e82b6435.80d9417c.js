"use strict";(self.webpackChunkvirtalis_docs=self.webpackChunkvirtalis_docs||[]).push([[86202],{55750:(e,n,d)=>{d.r(n),d.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"visionary-render-programming/reference/c-api/definitions/function-prototypes","title":"Function Prototypes","description":"Defines the function prototypes used for registering callbacks with the API.","source":"@site/docs/visionary-render-programming/reference/c-api/definitions/function-prototypes.mdx","sourceDirName":"visionary-render-programming/reference/c-api/definitions","slug":"/visionary-render-programming/reference/c-api/definitions/function-prototypes","permalink":"/visionary-render-programming/reference/c-api/definitions/function-prototypes","draft":false,"unlisted":false,"editUrl":"https://github.com/virtalis/docs/tree/master/docs/visionary-render-programming/reference/c-api/definitions/function-prototypes.mdx","tags":[],"version":"current","lastUpdatedAt":1730817102000,"frontMatter":{"title":"Function Prototypes","summary":"Defines the function prototypes used for registering callbacks with the API."},"sidebar":"visionaryRenderProgrammingSidebar","previous":{"title":"Flags","permalink":"/visionary-render-programming/reference/c-api/definitions/flags"},"next":{"title":"Save/Load Tree IO Flags","permalink":"/visionary-render-programming/reference/c-api/definitions/io-flags"}}');var t=d(74848),s=d(28453);const i={title:"Function Prototypes",summary:"Defines the function prototypes used for registering callbacks with the API."},a="Function Prototypes",o={},c=[{value:"Types",id:"types",level:2},{value:"Types Documentation",id:"types-documentation",level:2},{value:"typedef EventGestureFunc",id:"typedef-eventgesturefunc",level:3},{value:"typedef EventKeyFunc",id:"typedef-eventkeyfunc",level:3},{value:"typedef EventNodeFunc",id:"typedef-eventnodefunc",level:3},{value:"typedef EventTwoNodesFunc",id:"typedef-eventtwonodesfunc",level:3},{value:"typedef EventTwoNodesUserFunc",id:"typedef-eventtwonodesuserfunc",level:3},{value:"typedef FFIFunc",id:"typedef-ffifunc",level:3},{value:"typedef MigrationAddFunc",id:"typedef-migrationaddfunc",level:3},{value:"typedef MigrationDownFunc",id:"typedef-migrationdownfunc",level:3},{value:"typedef MigrationDowngradeFunc",id:"typedef-migrationdowngradefunc",level:3},{value:"typedef MigrationFunc",id:"typedef-migrationfunc",level:3},{value:"typedef MigrationUpFunc",id:"typedef-migrationupfunc",level:3},{value:"typedef MigrationUpgradeFunc",id:"typedef-migrationupgradefunc",level:3},{value:"typedef NodeChildAddedFunc",id:"typedef-nodechildaddedfunc",level:3},{value:"typedef NodeChildRemovedFunc",id:"typedef-nodechildremovedfunc",level:3},{value:"typedef NodeCreatedFunc",id:"typedef-nodecreatedfunc",level:3},{value:"typedef NodeDestroyingFunc",id:"typedef-nodedestroyingfunc",level:3},{value:"typedef NodeParentChangedFunc",id:"typedef-nodeparentchangedfunc",level:3},{value:"typedef NodeRenamedFunc",id:"typedef-noderenamedfunc",level:3},{value:"typedef NodeValuesChangedFunc",id:"typedef-nodevalueschangedfunc",level:3},{value:"typedef ScriptEventFunc",id:"typedef-scripteventfunc",level:3},{value:"typedef SettingChangedFunc",id:"typedef-settingchangedfunc",level:3},{value:"typedef UpdateFunc",id:"typedef-updatefunc",level:3}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"function-prototypes",children:"Function Prototypes"})}),"\n",(0,t.jsx)(n.p,{children:"Defines the function prototypes used for registering callbacks with the API."}),"\n",(0,t.jsx)(n.h2,{id:"types",children:"Types"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Name"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"typedef void(*)(int code, HNode user, void *userData)"}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"#typedef-eventgesturefunc",children:"EventGestureFunc"})})," ",(0,t.jsx)("br",{}),"Signature of a function that is called when a key code is changed (for event observers)"]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"typedef void(*)(int code, int state, HNode user, void *userData)"}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"#typedef-eventkeyfunc",children:"EventKeyFunc"})})," ",(0,t.jsx)("br",{}),"Signature of a function that is called when a key state is changed (for event observers)"]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"typedef void(*)(HNode node, HNode user, void *userData)"}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"#typedef-eventnodefunc",children:"EventNodeFunc"})})," ",(0,t.jsx)("br",{}),"Signature of a function that is called when a node state is changed (for event observers)"]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"typedef void(*)(HNode node, HNode other, void *userData)"}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"#typedef-eventtwonodesfunc",children:"EventTwoNodesFunc"})})," ",(0,t.jsx)("br",{}),"Signature of a function that is called when two nodes interact (for event observers)"]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"typedef void(*)(HNode node, HNode other, HNode user, void *userData)"}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"#typedef-eventtwonodesuserfunc",children:"EventTwoNodesUserFunc"})})," ",(0,t.jsx)("br",{}),"Signature of a function that is called when two nodes interact (for event observers)"]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["typedef ",(0,t.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hffivar",children:"HFFIVar"}),"(*)(int argc, HFFIVar *argv, void *userData)"]}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"#typedef-ffifunc",children:"FFIFunc"})})," ",(0,t.jsx)("br",{}),"Signature of a function that is exposed to the Lua environment."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"typedef void(*)(HMigration m)"}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"#typedef-migrationaddfunc",children:"MigrationAddFunc"})})," ",(0,t.jsx)("br",{}),"Signature of a function that receives a new migration handle and should use it to register other callbacks."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"typedef int(*)(HMigration m, HMeta meta)"}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"#typedef-migrationdownfunc",children:"MigrationDownFunc"})})," ",(0,t.jsx)("br",{}),"Signature of a function that should perform a downgrade on a metanode."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["typedef ",(0,t.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"}),"(*)(HMigration m, HNode node)"]}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"#typedef-migrationdowngradefunc",children:"MigrationDowngradeFunc"})})," ",(0,t.jsx)("br",{}),"Signature of a function that should perform a downgrade on a node instance."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"typedef void(*)(HNode node, void *userData)"}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"#typedef-migrationfunc",children:"MigrationFunc"})})," ",(0,t.jsx)("br",{}),"Signature of a function that is called at the end of a nodes migration calls."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"typedef int(*)(HMigration m, HMeta meta)"}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"#typedef-migrationupfunc",children:"MigrationUpFunc"})})," ",(0,t.jsx)("br",{}),"Signature of a function that should perform an upgrade on a metanode."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["typedef ",(0,t.jsx)(n.a,{href:"/visionary-render-programming/reference/c-api/definitions/types#typedef-hnode",children:"HNode"}),"(*)(HMigration m, HNode node)"]}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"#typedef-migrationupgradefunc",children:"MigrationUpgradeFunc"})})," ",(0,t.jsx)("br",{}),"Signature of a function that should perform an upgrade on a node instance, e.g. by modifying property values."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"typedef void(*)(HNode parent, HNode child, void *userData)"}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"#typedef-nodechildaddedfunc",children:"NodeChildAddedFunc"})})," ",(0,t.jsx)("br",{}),"Signature of a function that is called when a child is added to a node."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"typedef void(*)(HNode parent, HNode child, void *userData)"}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"#typedef-nodechildremovedfunc",children:"NodeChildRemovedFunc"})})," ",(0,t.jsx)("br",{}),"Signature of a function that is called when a child is removed from a node."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"typedef void(*)(HNode node, void *userData)"}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"#typedef-nodecreatedfunc",children:"NodeCreatedFunc"})})," ",(0,t.jsx)("br",{}),"Signature of a function that is called when a node is created."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"typedef void(*)(HNode node, void *userData)"}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"#typedef-nodedestroyingfunc",children:"NodeDestroyingFunc"})})," ",(0,t.jsx)("br",{}),"Signature of a function that is called when a node is about to be deleted."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"typedef void(*)(HNode node, HNode newParent, HNode oldParent, void *userData)"}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"#typedef-nodeparentchangedfunc",children:"NodeParentChangedFunc"})})," ",(0,t.jsx)("br",{}),"Signature of a function that is called when a node is moved to a new parent."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"typedef void(*)(HNode node, void *userData)"}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"#typedef-noderenamedfunc",children:"NodeRenamedFunc"})})," ",(0,t.jsx)("br",{}),"Signature of a function that is called when a node is renamed."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"typedef void(*)(HNode node, void *userData)"}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"#typedef-nodevalueschangedfunc",children:"NodeValuesChangedFunc"})})," ",(0,t.jsx)("br",{}),"Signature of a function that is called when properties on a node are changed."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"typedef void(*)(void *userData)"}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"#typedef-scripteventfunc",children:"ScriptEventFunc"})})," ",(0,t.jsx)("br",{}),"Signature of a function that is called in response to a registered script event."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"typedef void(*)(const char *path, void *userData)"}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"#typedef-settingchangedfunc",children:"SettingChangedFunc"})})," ",(0,t.jsx)("br",{}),"Signature of a function that is called when a setting is changed."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"typedef void(*)(double deltaTime, void *userData)"}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"#typedef-updatefunc",children:"UpdateFunc"})})," ",(0,t.jsx)("br",{}),"Signature of a function that is called every frame."]})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"types-documentation",children:"Types Documentation"}),"\n",(0,t.jsx)(n.h3,{id:"typedef-eventgesturefunc",children:"typedef EventGestureFunc"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"typedef void(* EventGestureFunc) (int code, HNode user, void *userData);\n"})}),"\n",(0,t.jsx)(n.p,{children:"Signature of a function that is called when a key code is changed (for event observers)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"code"})," key code"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"user"})," user node copied from the __User LUA register"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"userData"})," arbitrary user data that was provided when registering the callback"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"typedef-eventkeyfunc",children:"typedef EventKeyFunc"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"typedef void(* EventKeyFunc) (int code, int state, HNode user, void *userData);\n"})}),"\n",(0,t.jsx)(n.p,{children:"Signature of a function that is called when a key state is changed (for event observers)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"code"})," key code"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"code"})," key state"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"user"})," user node copied from the __User LUA register"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"userData"})," arbitrary user data that was provided when registering the callback"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"typedef-eventnodefunc",children:"typedef EventNodeFunc"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"typedef void(* EventNodeFunc) (HNode node, HNode user, void *userData);\n"})}),"\n",(0,t.jsx)(n.p,{children:"Signature of a function that is called when a node state is changed (for event observers)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"node"})," node which state is changed"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"user"})," user node copied from the __User LUA register"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"userData"})," arbitrary user data that was provided when registering the callback"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"typedef-eventtwonodesfunc",children:"typedef EventTwoNodesFunc"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"typedef void(* EventTwoNodesFunc) (HNode node, HNode other, void *userData);\n"})}),"\n",(0,t.jsx)(n.p,{children:"Signature of a function that is called when two nodes interact (for event observers)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"node"})," node which state is changed"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"other"})," interacting node copied from the __Other LUA register"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"userData"})," arbitrary user data that was provided when registering the callback"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"typedef-eventtwonodesuserfunc",children:"typedef EventTwoNodesUserFunc"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"typedef void(* EventTwoNodesUserFunc) (HNode node, HNode other, HNode user, void *userData);\n"})}),"\n",(0,t.jsx)(n.p,{children:"Signature of a function that is called when two nodes interact (for event observers)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"node"})," node which state is changed"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"other"})," interacting node copied from the __Other LUA register"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"user"})," user node copied from the __User LUA register"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"userData"})," arbitrary user data that was provided when registering the callback"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"typedef-ffifunc",children:"typedef FFIFunc"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"typedef HFFIVar(* FFIFunc) (int argc, HFFIVar *argv, void *userData);\n"})}),"\n",(0,t.jsx)(n.p,{children:"Signature of a function that is exposed to the Lua environment."}),"\n",(0,t.jsx)(n.h3,{id:"typedef-migrationaddfunc",children:"typedef MigrationAddFunc"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"typedef void(* MigrationAddFunc) (HMigration m);\n"})}),"\n",(0,t.jsx)(n.p,{children:"Signature of a function that receives a new migration handle and should use it to register other callbacks."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"m"})," handle to a migration"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"typedef-migrationdownfunc",children:"typedef MigrationDownFunc"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"typedef int(* MigrationDownFunc) (HMigration m, HMeta meta);\n"})}),"\n",(0,t.jsx)(n.p,{children:"Signature of a function that should perform a downgrade on a metanode."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"m"})," the migration that owns this downgradfe function"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"meta"})," the metanode that should be modified as part of the downgrade"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Return"}),": should return zero on success"]}),"\n",(0,t.jsx)(n.h3,{id:"typedef-migrationdowngradefunc",children:"typedef MigrationDowngradeFunc"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"typedef HNode(* MigrationDowngradeFunc) (HMigration m, HNode node);\n"})}),"\n",(0,t.jsx)(n.p,{children:"Signature of a function that should perform a downgrade on a node instance."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"m"})," the migration that owns this upgrade function"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"node"})," the node instance to downgrade"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Return"}),": a node handle representing the new, downgraded node instance"]}),"\n",(0,t.jsx)(n.h3,{id:"typedef-migrationfunc",children:"typedef MigrationFunc"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"typedef void(* MigrationFunc) (HNode node, void *userData);\n"})}),"\n",(0,t.jsx)(n.p,{children:"Signature of a function that is called at the end of a nodes migration calls."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"node"})," the node that you are migrating"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"userData"})," arbitrary user data that was provided when registering the callback"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"typedef-migrationupfunc",children:"typedef MigrationUpFunc"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"typedef int(* MigrationUpFunc) (HMigration m, HMeta meta);\n"})}),"\n",(0,t.jsx)(n.p,{children:"Signature of a function that should perform an upgrade on a metanode."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"m"})," the migration that owns this upgrade function"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"meta"})," the metanode that should be modified as part of the upgrade"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Return"}),": should return zero on success"]}),"\n",(0,t.jsx)(n.h3,{id:"typedef-migrationupgradefunc",children:"typedef MigrationUpgradeFunc"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"typedef HNode(* MigrationUpgradeFunc) (HMigration m, HNode node);\n"})}),"\n",(0,t.jsx)(n.p,{children:"Signature of a function that should perform an upgrade on a node instance, e.g. by modifying property values."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"m"})," the migration that owns this upgrade function"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"node"})," the node instance to upgrade"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Return"}),": a node handle representing the new, upgraded node instance"]}),"\n",(0,t.jsx)(n.h3,{id:"typedef-nodechildaddedfunc",children:"typedef NodeChildAddedFunc"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"typedef void(* NodeChildAddedFunc) (HNode parent, HNode child, void *userData);\n"})}),"\n",(0,t.jsx)(n.p,{children:"Signature of a function that is called when a child is added to a node."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"parent"})," the parent node"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"child"})," the child that is being added to the parent"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"userData"})," arbitrary user data that was provided when registering the callback"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"typedef-nodechildremovedfunc",children:"typedef NodeChildRemovedFunc"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"typedef void(* NodeChildRemovedFunc) (HNode parent, HNode child, void *userData);\n"})}),"\n",(0,t.jsx)(n.p,{children:"Signature of a function that is called when a child is removed from a node."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"parent"})," the parent node"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"child"})," the child that was removed from the parent"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"userData"})," arbitrary user data that was provided when registering the callback"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"typedef-nodecreatedfunc",children:"typedef NodeCreatedFunc"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"typedef void(* NodeCreatedFunc) (HNode node, void *userData);\n"})}),"\n",(0,t.jsx)(n.p,{children:"Signature of a function that is called when a node is created."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"node"})," the node that was created"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"userData"})," arbitrary user data that was provided when registering the callback"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"typedef-nodedestroyingfunc",children:"typedef NodeDestroyingFunc"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"typedef void(* NodeDestroyingFunc) (HNode node, void *userData);\n"})}),"\n",(0,t.jsx)(n.p,{children:"Signature of a function that is called when a node is about to be deleted."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"node"})," the node that is about the be deleted"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"userData"})," arbitrary user data that was provided when registering the callback"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"typedef-nodeparentchangedfunc",children:"typedef NodeParentChangedFunc"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"typedef void(* NodeParentChangedFunc) (HNode node, HNode newParent, HNode oldParent, void *userData);\n"})}),"\n",(0,t.jsx)(n.p,{children:"Signature of a function that is called when a node is moved to a new parent."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"node"})," the node that was moved"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"newParent"})," the new parent of the node"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"oldParent"})," the old parent that the node was moved from"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"userData"})," arbitrary user data that was provided when registering the callback"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"typedef-noderenamedfunc",children:"typedef NodeRenamedFunc"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"typedef void(* NodeRenamedFunc) (HNode node, void *userData);\n"})}),"\n",(0,t.jsx)(n.p,{children:"Signature of a function that is called when a node is renamed."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"node"})," the node that was created"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"userData"})," arbitrary user data that was provided when registering the callback"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"typedef-nodevalueschangedfunc",children:"typedef NodeValuesChangedFunc"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"typedef void(* NodeValuesChangedFunc) (HNode node, void *userData);\n"})}),"\n",(0,t.jsx)(n.p,{children:"Signature of a function that is called when properties on a node are changed."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"node"})," the node that was modified"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"userData"})," arbitrary user data that was provided when registering the callback"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"typedef-scripteventfunc",children:"typedef ScriptEventFunc"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"typedef void(* ScriptEventFunc) (void *userData);\n"})}),"\n",(0,t.jsx)(n.p,{children:"Signature of a function that is called in response to a registered script event."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"userData"})," arbitrary user data that was provided when registering the callback"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"typedef-settingchangedfunc",children:"typedef SettingChangedFunc"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"typedef void(* SettingChangedFunc) (const char *path, void *userData);\n"})}),"\n",(0,t.jsx)(n.p,{children:"Signature of a function that is called when a setting is changed."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"path"})," the path to the setting from the root of the settings hierarchy"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"userData"})," arbitrary user data that was provided when registering the callback"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"typedef-updatefunc",children:"typedef UpdateFunc"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"typedef void(* UpdateFunc) (double deltaTime, void *userData);\n"})}),"\n",(0,t.jsx)(n.p,{children:"Signature of a function that is called every frame."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"deltaTime"})," the time (in seconds) since the last frame"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"userData"})," arbitrary user data that was provided when registering the callback"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},28453:(e,n,d)=>{d.d(n,{R:()=>i,x:()=>a});var r=d(96540);const t={},s=r.createContext(t);function i(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);